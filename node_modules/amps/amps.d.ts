// Generated by dts-bundle v0.7.3


/**
    * This is the authenticator interface that is used by the client during the logging on. It provides the authentication
    * for custom authentication scenarios when external actions are required before logging on.
    *
    * #### Example:
    *
    * ```javascript
    * var myAuthenticator = {
    *     authenticate: function(username, password) {
    *         return new Promise(function(resolve, reject) {
    *             // invoke your authentication mechanism here
    *             verySecureAuthentication(function(err, token) {
    *                 if (err) { return reject(err); }
    *                 resolve(token);
    *             });
    *         });
    *     },
    *     retry: function(username, password) {
    *         return new Promise(function(resolve, reject) {
    *             // invoke your authentication mechanism here - retry the authentication
    *             retryVerySecureAuthentication(function(err, token) {
    *                 if (err) { return reject(err); }
    *
    *                 resolve(token);
    *             });
    *         });
    *     },
    *     completed: function(username, password, reason) {
    *         // This method will be invoked upon successful authorization with AMPS
    *         console.log('completed method called: ', reason);
    *     }
    * };
    *
    * var client = new amps.Client()
    * client.connect('ws://localhost:9100/amps/json', myAuthenticator)
    *     .then(function() {
    *         console.log('Connected!');
    *     })
    *     .catch(function(err) {
    *         console.error('connection err: ', err);
    *     });
    * ```
    */
export interface Authenticator {
        /**
            * Called by [[Client]], just before the logon command is sent.
            *
            * @param {string} login The current value of the username as specified in the URI.
            * @param {string} password The current value of the password, as specified in the URI.
            * @returns {Promise<string>} The Promise object which once fullfilled will contain the value that should be placed
            * into the Password header for the logon attempt will be passed.
            */
        authenticate(login: string, password: string): Promise<string>;
        /**
            * Called when a logon "ack" is received with a status of "retry". AMPS will continue trying to logon as long as
            * the server returns "retry", and this method continues to succeed.
            *
            * @param {string} login The username returned by the server's ACK message.
            * @param {string} password The password or token returned in the server's ACK message.
            * @returns {Promise<string>} The Promise object which once fullfilled will contain the value that should be placed
            * into the Password header for the next logon attempt will be passed.
            */
        retry(login: string, password: string): Promise<string>;
        /**
            * Called when a logon completes successfully. Once a logon has completed, this method is called with the username
            * and password that caused a successful logon.
            *
            * @param {string} login The username that successfully logged on to the server.
            * @param {string} password The password that successfully logged on to the server.
            * @param {string} reason The reason for this successful completion.
            */
        completed(login: string, password: string, reason: string): void;
}

export interface BigInteger {
    /** Returns the absolute value of a bigInt. */
    abs(): BigInteger;
    /** Performs addition */
    add(number: number): BigInteger;
    /** Performs addition */
    add(number: BigInteger): BigInteger;
    /** Performs addition */
    add(number: string): BigInteger;
    /** Alias for the add method. */
    plus(number: number): BigInteger;
    /** Alias for the add method. */
    plus(number: BigInteger): BigInteger;
    /** Alias for the add method. */
    plus(number: string): BigInteger;
    /** Alias for the subtract method. */
    minus(number: number): BigInteger;
    /** Alias for the subtract method. */
    minus(number: BigInteger): BigInteger;
    /** Alias for the subtract method. */
    minus(number: string): BigInteger;
    /** Performs subtraction. */
    subtract(number: number): BigInteger;
    /** Performs subtraction. */
    subtract(number: BigInteger): BigInteger;
    /** Performs subtraction. */
    subtract(number: string): BigInteger;
    /** Performs multiplication. */
    multiply(number: number): BigInteger;
    /** Performs multiplication. */
    multiply(number: BigInteger): BigInteger;
    /** Performs multiplication. */
    multiply(number: string): BigInteger;
    /** Alias for the multiply method. */
    times(number: number): BigInteger;
    /** Alias for the multiply method. */
    times(number: BigInteger): BigInteger;
    /** Alias for the multiply method. */
    times(number: string): BigInteger;
    /** Performs integer division, disregarding the remainder. */
    divide(number: number): BigInteger;
    /** Performs integer division, disregarding the remainder. */
    divide(number: BigInteger): BigInteger;
    /** Performs integer division, disregarding the remainder. */
    divide(number: string): BigInteger;
    /** Alias for the divide method. */
    over(number: number): BigInteger;
    /** Alias for the divide method. */
    over(number: BigInteger): BigInteger;
    /** Alias for the divide method. */
    over(number: string): BigInteger;
    /** Performs exponentiation. If the exponent is less than 0, pow returns 0. bigInt.zero.pow(0) returns 1. */
    pow(number: number): BigInteger;
    /** Performs exponentiation. If the exponent is less than 0, pow returns 0. bigInt.zero.pow(0) returns 1. */
    pow(number: BigInteger): BigInteger;
    /** Performs exponentiation. If the exponent is less than 0, pow returns 0. bigInt.zero.pow(0) returns 1. */
    pow(number: string): BigInteger;
    /** Adds one to the number. */
    next(): BigInteger;
    /** Subtracts one from the number. */
    prev(): BigInteger;
    /** Performs division and returns the remainder, disregarding the quotient. The sign of the remainder will match the sign of the dividend. */
    mod(number: number): BigInteger;
    /** Performs division and returns the remainder, disregarding the quotient. The sign of the remainder will match the sign of the dividend. */
    mod(number: BigInteger): BigInteger;
    /** Performs division and returns the remainder, disregarding the quotient. The sign of the remainder will match the sign of the dividend. */
    mod(number: string): BigInteger;
    /** Performs division and returns an object with two properties: quotient and remainder. The sign of the remainder will match the sign of the dividend. */
    divmod(number: number): {
        quotient: BigInteger;
        remainder: BigInteger;
    };
    /** Performs division and returns an object with two properties: quotient and remainder. The sign of the remainder will match the sign of the dividend. */
    divmod(number: BigInteger): {
        quotient: BigInteger;
        remainder: BigInteger;
    };
    /** Performs division and returns an object with two properties: quotient and remainder. The sign of the remainder will match the sign of the dividend. */
    divmod(number: string): {
        quotient: BigInteger;
        remainder: BigInteger;
    };
    /** Checks if the first number is greater than the second. */
    greater(number: number): boolean;
    /** Checks if the first number is greater than the second. */
    greater(number: BigInteger): boolean;
    /** Checks if the first number is greater than the second. */
    greater(number: string): boolean;
    /** Checks if the first number is greater than or equal to the second. */
    greaterOrEquals(number: number): boolean;
    /** Checks if the first number is greater than or equal to the second. */
    greaterOrEquals(number: BigInteger): boolean;
    /** Checks if the first number is greater than or equal to the second. */
    greaterOrEquals(number: string): boolean;
    /** Checks if the first number is lesser than the second. */
    lesser(number: number): boolean;
    /** Checks if the first number is lesser than the second. */
    lesser(number: BigInteger): boolean;
    /** Checks if the first number is lesser than the second. */
    lesser(number: string): boolean;
    /** Checks if the first number is less than or equal to the second. */
    lesserOrEquals(number: number): boolean;
    /** Checks if the first number is less than or equal to the second. */
    lesserOrEquals(number: BigInteger): boolean;
    /** Checks if the first number is less than or equal to the second. */
    lesserOrEquals(number: string): boolean;
    /** Returns true if the number is even, false otherwise. */
    isEven(): boolean;
    /** Returns true if the number is odd, false otherwise. */
    isOdd(): boolean;
    /** Return true if the number is positive, false otherwise. Returns true for 0 and false for -0. */
    isPositive(): boolean;
    /** Returns true if the number is negative, false otherwise. Returns false for 0 and true for -0. */
    isNegative(): boolean;
    /**
         * Performs a comparison between two numbers. If the numbers are equal, it returns 0.
         * If the first number is greater, it returns 1. If the first number is lesser, it returns -1.
         */
    compare(number: number): number;
    /**
         * Performs a comparison between two numbers. If the numbers are equal, it returns 0.
         * If the first number is greater, it returns 1. If the first number is lesser, it returns -1.
         */
    compare(number: BigInteger): number;
    /**
         * Performs a comparison between two numbers. If the numbers are equal, it returns 0.
         * If the first number is greater, it returns 1. If the first number is lesser, it returns -1.
         */
    compare(number: string): number;
    /** Performs a comparison between the absolute value of two numbers. */
    compareAbs(number: number): number;
    /** Performs a comparison between the absolute value of two numbers. */
    compareAbs(number: BigInteger): number;
    /** Performs a comparison between the absolute value of two numbers. */
    compareAbs(number: string): number;
    /** Checks if two numbers are equal. */
    equals(number: number): boolean;
    /** Checks if two numbers are equal. */
    equals(number: BigInteger): boolean;
    /** Checks if two numbers are equal. */
    equals(number: string): boolean;
    /** Checks if two numbers are not equal. */
    notEquals(number: number): boolean;
    /** Checks if two numbers are not equal. */
    notEquals(number: BigInteger): boolean;
    /** Checks if two numbers are not equal. */
    notEquals(number: string): boolean;
    /** Performs the bitwise AND operation. */
    and(number: number): BigInteger;
    /** Performs the bitwise AND operation. */
    and(number: BigInteger): BigInteger;
    /** Performs the bitwise AND operation. */
    and(number: string): BigInteger;
    /** Performs the bitwise NOT operation. */
    not(): BigInteger;
    /** Performs the bitwise OR operation. */
    or(number: number): BigInteger;
    /** Performs the bitwise OR operation. */
    or(number: BigInteger): BigInteger;
    /** Performs the bitwise OR operation. */
    or(number: string): BigInteger;
    /** Performs the bitwise XOR operation. */
    xor(number: number): BigInteger;
    /** Performs the bitwise XOR operation. */
    xor(number: BigInteger): BigInteger;
    /** Performs the bitwise XOR operation. */
    xor(number: string): BigInteger;
    /** Converts a bigInt into a native Javascript number. Loses precision for numbers outside the range. */
    toJSNumber(): number;
    /** Converts a bigInt to a string. */
    toString(radix?: number): string;
    /** Converts a bigInt to a native Javascript number. This override allows you to use native arithmetic operators without explicit conversion. */
    valueOf(): number;
}
export var BigInteger: {
    /** Equivalent to bigInt(1) */
    one: BigInteger;
    /** Equivalent to bigInt(0) */
    zero: BigInteger;
    /** Equivalent to bigInt(-1) */
    minusOne: BigInteger;
    /** Equivalent to bigInt(0) */
    (): BigInteger;
    /** Parse a Javascript number into a bigInt */
    (number: number): BigInteger;
    /** Parse a string into a bigInt */
    (string: string, base?: string | number | BigInteger): BigInteger;
    /** no-op */
    (bigInt: BigInteger): BigInteger;
};

/**
    * This is the interface for the classes that represent a bookmark store.
    * Bookmark store is used by the [[Client]] to provide resumable subscriptions and client-side
    * duplicate message handling.
    */
export interface BookmarkStore {
        /**
            * This method is called internally by the [[Client]] to log a bookmark to the persistent
            * log.
            *
            * @param {Message} message the message to bookmark.
            * @returns {BigInteger} The corresponding bookmark sequence number for this bookmark.
            */
        log(message: Message): BigInteger;
        /**
            * This method is called when you want to mark the message object as discarded, indicating that the application has
            * completed processing the message. Marking a message as discarded means that the message will not be replayed when
            * the subcription resumes.
            *
            * @param {Message} message The message object.
            */
        discard(message: Message): void;
        /**
            * ------
            * This method is called when you want to mark the message specified by the subscription ID and the bookmark
            * sequence number as discarded, indicating that the application has completed processing the message.
            * Marking a message as discarded means that the message will not be replayed when the subcription resumes.
            *
            * @param {string} subId The subscription id.
            * @param {string} bookmark The raw bookmark field value of a message.
            */
        discard(subId: string, bookmark: string): void;
        /**
            * This method is called when you want to return the most recent bookmark from the log that ought to be used for
            * (re-)subscriptions.
            *
            * @param {string} subId The subscription id.
            * @returns {string} The most recent bookmark.
            */
        mostRecent(subId: string): string;
        /**
            * This method is called for each arriving message to determine if the application has already processed and
            * discarded this message. Returns 'true' if the bookmark is in the log and marked as discarded and should therefore
            * not be reprocessed. Otherwise, returns 'false'. Generally, isDiscarded is called by the
            * [[Client]] however, if needed, it can be called by the application as well.
            *
            * @param {Message} message The message to check.
            * @returns {boolean} `true` if the bookmark is in the log and marked as discarded and should therefore
            * not be reprocessed. Otherwise, returns `false`.
            */
        isDiscarded(message: Message): boolean;
        /**
            * This method is called when you want to purge the contents of this store. If the subId is not provided, removes
            * any tracking history associated with publishers and received messages. Otherwise, removes history for that subId
            * only.
            *
            * @param {string} subId The identifier of the subscription to purge.
            */
        purge(subId: string): void;
        /**
            * This method is called when you want to retrieve the sequence number of the oldest bookmark in the store.
            *
            * @param {string} subId The identifier of the subscription.
            * @returns {BigInteger} The sequence nubmer of the oldest bookmark in the store.
            */
        oldestBookmarkSeq(subId: string): BigInteger;
        /**
            * This method is called internally by the [[Client]] to mark a message as safely persisted
            * by AMPS to all of its sync replication destinations.
            *
            * @param {string} subId The identifier of the subscription.
            * @param {string} bookmark A raw bookmark string.
            */
        persisted(subId: string, bookmark: string): void;
}

export class Client {
        static readonly Bookmarks: {
                [key: string]: string;
        };
        static readonly ConnectionStateListener: {
                [key: string]: number;
        };
        /**
            * @param {string} name Unique name for the client (important for queues and sow). It is strongly recommended to
            * set a client name, but if it's not set, it'll be assigned automatically.
            */
        constructor(name?: string);
        /**
            * This is a convenience static method that creates a memory-backed client that tracks
            * bookmarks and subscriptions in memory. Subscriptions are automatically restored after a reconnection using
            * [[DefaultSubscriptionManager]] object. [[MemoryBookmarkStore]] is enabled for bookmarks, [[MemoryPublishStore]]
            * is enabled for publishing messages.
            *
            * @param {string} name Unique name for the client (important for queues and sow). It is strongly recommended to
            * set a client name, but if it's not set, it'll be assigned automatically.
            * @returns {Client} a highly available [[Client]] instance.
            */
        static createMemoryBacked(name?: string): Client;
        /**
            * This method returns the server version returned by the AMPS server in the logon acknowledgement.
            * If logon has not been performed yet, returns null.
            * @returns The version of the AMPS server.
            */
        serverVersion(): string;
        /**
            * This method returns the server version returned by the AMPS server in the logon acknowledgement in a form
            * of an integer XXYYZZWWW. For example, for 5.2.1.22 will be represented as `050201022`.
            * If logon has not been performed yet, returns 0.
            * @returns The version of the AMPS server.
            */
        serverVersionAsInt(): number;
        /**
            * This method is a setter/getter for the client's name.
            * If logon has not been performed yet and the name was not set, returns null.
            * @param {string} name The name of the AMPS client instance.
            * @returns The client object if the setter is called. The name of the AMPS
            * client instance (if any) otherwise.
            */
        name(name?: string): Client | string;
        /**
            * This static method returns a version of the AMPS client.
            * @returns The version of this AMPS client.
            */
        static version(): string;
        /**
            * This is the private method that sends commands to an AMPS server. It's allowed to use it outside for
            * specific purposes such as custom subscription manager implementations. Please reach our specialists if
            * you're implementing something like that.
            *
            * @param {Header} header The header object to send.
            * @param {any} data The data to send.
            * @param {number} timeout The timeout in milliseconds to send the message and get a response.
            * @private
            * @hidden
            */
        send(header: Header, data?: any, timeout?: number): void;
        /**
            * This is a method that is only used with external modules like SubscribeManager. Reports the connection
            * status of the client.
            *
            * @returns The connection status.
            * @hidden
            */
        isConnected(): boolean;
        /**
            * This is a method that is only used with external modules like SubscribeManager. Provides next available id
            * for a command/message.
            *
            * @returns The sub/command id.
            * @hidden
            */
        nextSubId(): string;
        /**
            * This method replaces a message handler for a subscription. It is only used by a SubscribeManager object.
            * It is not intended to be used otherwise.
            *
            * @param {string} subId The subscription id.
            * @param {function} messageHandler The message handler function.
            * @hidden
            */
        setMessageHandler(subId: string, messageHandler: (message: Message) => void): void;
        /**
            * This is the command execution interface method that allows to send commands that don't have a convenience
            * method or require
            * additional settings that are not provided by the convenience methods.
            * The purpose of the method is to execute Command objects.
            *
            * ```javascript
            * var subscribeCommand = new amps.Command('subscribe')
            *   .topic('messages')
            *   .filter('/id > 20');
            *
            * client.execute(subscribeCommand, function(message) {
            *     console.log('message: ', message.data);
            * }).then(function(commandId) {
            *     console.log('commandId: ', commandId);
            * });
            * ```
            * @param {Command} command a Command object.
            * @param {function} handler a callback to report the messages (including ack messages if they were requested).
            * @param {number} timeout a timeout value for the command execution in milliseconds.
            * @returns The promise object fullfilled with the command id created.
            */
        execute(command: Command, handler?: (message: Message) => void, timeout?: number): Promise<string>;
        /**
            * This method connects the AMPS client to the server. It automatically calls logon() upon successful connection.
            * If the [[ServerChooser]] is set, arguments are ignored.
            *
            * ```javascript
            * var client = new amps.Client('my-application');
            *
            * client.connect('ws://localhost:9100/amps/json')
            *     .then(function() {
            *         // now the client is ready to send and receive any commands
            *         // ...
            *     })
            *     .catch(function(err) {
            *         console.error('Connection error: ', err);
            *     });
            * ```
            *
            * @param {string} uri The URI containing all required credentials/addresses/types.
            * @param {Authenticator} authenticator The authenticator object for custom authentication scenarios.
            * See [[Authenticator]] for details.
            * @param {string} logonOptions The logon options, such as `pretty``.
            * @returns The promise object with the result of fullfilling/failing the connection promise.
            */
        connect(uri?: string, authenticator?: Authenticator, logonOptions?: string): Promise<Message>;
        /**
            * This method sets/gets the error handler for all general errors such as connection issues, exceptions, etc.
            *
            * ```javascript
            * var client = new amps.Client().errorHandler(function(err) {
            *     console.error('err: ', err);
            * });
            * ```
            *
            * @param {function} errorHandler The callback function that will be invoked in case of a general error.
            * @returns The client if a setter called, the error handler (if any) otherwise.
            */
        errorHandler(): ((error: Error) => void);
        errorHandler(errorHandler: (error: Error) => void): Client;
        /**
            * This method adds a connection state listener that will be called every time a connection state has been changed.
            *
            * ```javascript
            * var client = new amps.Client();
            * var listenerId = client.addConnectionStateListener(function(state) {
            *     console.log('state: ', state);
            * });
            *
            * // ... later
            * client.removeConnectionStateListener(listenerId);
            * ```
            *
            * @param {function} connectionStateListener The callback function that will be invoked in case of a connection
            * state change.
            * @returns The unique monotonically increasing listener id that can be used to remove the listener later.
            */
        addConnectionStateListener(connectionStateListener: (connectionState: number) => void): number;
        /**
            * This method removes a connection state listener with the id provided.
            *
            * ```javascript
            * var client = new amps.Client();
            * var listenerId = client.addConnectionStateListener(function(state) {
            *     console.log('state: ', state);
            * });
            *
            * // ... later
            * client.removeConnectionStateListener(listenerId);
            * ```
            *
            * @param {number} connectionStateListener The callback function that will be invoked in case of a connection
            * state change.
            */
        removeConnectionStateListener(connectionStateListenerId: number): void;
        /**
            * This method sets/gets the disconnect handler that is in case of an unintentional disconnection.
            *
            * ```javascript
            * var disconnectHandler = function(client, err) {
            *     // when the Client unintentionally disconnects, this method is invoked.
            *     console.error('err: ', err);
            * };
            *
            * var client = new amps.Client().disconnectHandler(disconnectHandler);
            * ```
            *
            * @param {function} disconnectHandler The callback function that will be invoked in case of a disconnection.
            * @returns The client if a setter called, the disconnect handler (if any)
            * otherwise.
            */
        disconnectHandler(): ((client: Client, error: Error) => void);
        disconnectHandler(disconnectHandler: (client: Client, error: Error) => void): Client;
        /**
            * This method sets/gets the transport filter to observe incoming and outgoing messages in the format they are
            * sent and received on the network. This allows you to inspect or modify outgoing messages before they are
            * sent to the network, and incoming messages as they arrive from the network. This can be especially useful
            * when using SSL connections, since this gives you a way to monitor outgoing network traffic before it is
            * encrypted, and incoming network traffic after it is decrypted.
            *
            * ```javascript
            * function printingFilter(data, outgoing) {
            *     if (outgoing) {
            *         console.log('OUTGOING ---> ', data);
            *     }
            *     else {
            *         console.log('INCOMING ---> ', data);
            *     }
            * }
            *
            * var client = new amps.Client().transportFilter(printingFilter);
            * ```
            *
            * @param {function} transportFilter The callback function that will be invoked when data is being sent / received.
            * @returns The client if a setter called, the transport filter method (if any) otherwise.
            */
        transportFilter(): ((data: any, outgoing?: boolean) => void);
        transportFilter(transportFilter: (data: any, outgoing?: boolean) => void): Client;
        /**
            * This method sets up the heartbeat mode with the server. It sends a command to AMPS that starts or refreshes
            * a heartbeat timer. When a heartbeat timer is active, AMPS publishes periodic heartbeat messages to AMPS and
            * expects the client to respond with a heartbeat message. If the client does not provide a heartbeat within the
            * time specified, AMPS logs an error and disconnects the connection.
            *
            * ```javascript
            * // Initialize a client with the heartbeat of 5 seconds
            * var client = new amps.Client().heartbeat(5);
            * ```
            *
            * @param {number} interval the heartbeat value in seconds.
            * @param {number} timeout the timeout value in seconds. By default it is the heartbeat interval value times 2.
            * @returns The Client object.
            */
        heartbeat(interval: number, timeout?: number): Client;
        /**
            * This method is a setter/getter for the logon options of the client. Logon options can also be set via the
            * connect() method as an optional argument. Logon options can't be set after the client is connected and logged on.
            *
            * ```javascript
            * // create a client and set the logon options
            * var client = new amps.Client().logonOptions('pretty,ack_conflation=300ms');
            *
            * // ... access the logon options later
            * console.log(client.logonOptions());
            * ```
            *
            * @param {string} logonOptions The comma-separated string with logon options of the client.
            * @returns {string | Client} The client if a setter is called. The logon options (if any) otherwise.
            */
        logonOptions(): string;
        logonOptions(logonOptions: string): Client;
        /**
            * This method is a setter/getter for the server chooser object of the client.
            * [[ServerChooser]] interface is used to obtain a URI to connect. The chooser can
            * only be set before the client is connected. Once a server chooser is set, the client is working in the High
            * Availability mode and uses a [[DelayStrategy]] object to determine a delay between
            * reconnection attempts. If no delay strategy was provided, the client will use
            * [[ExponentialDelayStrategy]] with default settings. AMPS provides the
            * [[DefaultServerChooser]] implementation.
            *
            * ```javascript
            * // create a server chooser and assign URIs
            * var chooser = new amps.DefaultServerChooser();
            * chooser.add('wss://localhost:9000/amps/json');
            * chooser.add('wss://localhost:9100/amps/json');
            *
            * // create a client and assign a server chooser to it
            * var client = new amps.Client().serverChooser(chooser);
            *
            * // ... access the chooser object later
            * client.serverChooser().add('wss://backup_host:9200/amps/json');
            * ```
            *
            * @param {ServerChooser} serverChooser The serverChooser object of the client.
            * @returns {ServerChooser | Client} The client if a setter is called. The server chooser(if any) otherwise.
            */
        serverChooser(): ServerChooser;
        serverChooser(serverChooser: ServerChooser): Client;
        /**
            * This method is a setter/getter for the DelayStrategy object of the client. AMPS provides
            * [[FixedDelayStrategy]] and
            * [[ExponentialDelayStrategy]] strategies that are used to define a delay
            * between reconnection attempts. It is possible to implement a custom [[DelayStrategy]].
            * If it is not set, but the server chooser is used, the client will use [[ExponentialDelayStrategy]] with default
            * settings.
            *
            * ```javascript
            * // create a client and assign a delay strategy to it
            * var strategy = new amps.ExponentialDelayStrategy();
            * var client = new amps.Client().delayStrategy(strategy);
            *
            * // ... access the delay strategy object later
            * client.delayStrategy().reset();
            * ```
            *
            * @param {DelayStrategy} delayStrategy The reconnection delay strategy that the client uses.
            * @returns The client if a setter is called. The
            * DelayStrategy object (if any) otherwise.
            */
        delayStrategy(): DelayStrategy;
        delayStrategy(delayStrategy: DelayStrategy): Client;
        /**
            * This method sets a reconnection delay for the client. This is a convenience method that sets up a
            * [[FixedDelayStrategy]] with a requested delay value.
            *
            * ```javascript
            * // create a client and set a reconnect delay
            * var client = new amps.Client().reconnectDelay(5000);
            * ```

            * @param {number} delay=200 The delay between reconnection attempts in milliseconds.
            * @returns The client object.
            * @see [[Client.delayStrategy]] for more flexible controls over reconnection logic.
            */
        reconnectDelay(delay?: number): Client;
        /**
            * This method is a setter/getter for the SubscriptionManager object of the client. AMPS provides
            * [[DefaultSubscriptionManager]] that is used to restore subscriptions
            * after an unintended disconnection. It is not set by default.
            *
            * ```javascript
            * // create a client and assign a subscription manager to it
            * var subscriptionManager = new amps.DefaultSubscriptionManager();
            * var client = new amps.Client().subscriptionManager(subscriptionManager);
            *
            * // ... access the subscription manager object later
            * client.subscriptionManager().clear();
            * ```
            *
            * @param {SubscriptionManager} subscriptionManager The subscription manager that the client uses.
            * @returns The client if a setter is called. The SubscriptionManager object (if any) otherwise.
            */
        subscriptionManager(): SubscriptionManager;
        subscriptionManager(subscriptionManager: SubscriptionManager): Client;
        /**
            * This method is a setter/getter for the logon correlation id of the client. It must be
            * a valid Base64 string.
            *
            * ```javascript
            * // assign a logon correlation id to the client object
            * var client = new amps.Client().logonCorrelationId('L2p0vkn2');
            *
            * // ... access the logon correlation id later
            * console.log(client.logonCorrelationId());
            * ```
            *
            * @param {string} logonCorrelationId The logon correlation id of the client.
            * @returns The client if a setter is called. The logon correlation id (if any) otherwise.
            */
        logonCorrelationId(): string;
        logonCorrelationId(logonCorrelationId: string): Client;
        /**
            * This method is a setter/getter for the PublishStore object of the client.
            * [[PublishStore]] interface is being used to to provide consistent publish
            * functionality with guaranteed delivery.
            *
            * ```javascript
            * // create a client and assign a publish store to it
            * var publishStore = new amps.MemoryPublishStore();
            * var client = new amps.Client().publishStore(publishStore);
            *
            * // ... access the publish store later
            * if (client.publishStore().unpersistedCount() == 0) {
            *     client.disconnect();
            * }
            * ```
            *
            * @param {PublishStore} publishStore The PublishStore object of the client.
            * @returns The client if a setter is called. The PublishStore object (if any) otherwise.
            */
        publishStore(): PublishStore;
        publishStore(publishStore: PublishStore): Client;
        /**
            * This method is a setter/getter for the BookmarkStore object of the client.
            * [[BookmarkStore]] interface is being used to to provide resumable subscriptions and
            * client-side duplicate message handling.
            *
            * ```javascript
            * // create a client and assign a bookmark store to it
            * var bookmarkStore = new amps.MemoryBookmarkStore();
            * var client = new amps.Client().bookmarkStore(bookmarkStore);
            *
            * // ... access the bookmark store later
            * client.bookmarkStore().purge();
            * ```
            *
            * @param {BookmarkStore} bookmarkStore The BookmarkStore object of the client.
            * @returns The client if a setter is called. The BookmarkStore object (if any) otherwise.
            */
        bookmarkStore(): BookmarkStore;
        bookmarkStore(bookmarkStore: BookmarkStore): Client;
        /**
            * This method is a setter/getter for the autoAck option of the client. The AMPS client allows you to specify that
            * messages should be automatically acknowledged. When this mode is on, AMPS acknowledges the message automatically
            * if the message handler returns without throwing an exception. It is false by default.
            *
            * ```javascript
            * // create a client and set autoAck to true
            * var client = new amps.Client().autoAck(true);
            *
            * // ... check the autoAck option value later
            * if (client.autoAck() === true) { ...  }
            * ```
            *
            * @param {boolean} autoAck The new option value (true/false).
            * @returns {boolean | Client} The client if a setter is called. The autoAck otion value otherwise.
            */
        autoAck(): boolean;
        autoAck(autoAck: boolean): Client;
        /**
            * This method is a setter/getter for the acknowledgement batch size of the client.
            *
            * Batching acknowledgements reduces the number of round-trips to AMPS, which reduces network traffic and
            * improves overall performance. AMPS sends the batch of acknowledgements when the number of acknowledgements
            * exceeds a specified size. By default, if not specified otherwise, it is equal to 0. If the batch size value is
            * greater than 1, the automatic ack timeout will be assigned with the default value of 1000 ms, if not already set.
            * To override this behavior and disable ack timeouts with the batch size > 1, explicitly set ack timeout value to 0
            * after setting the batch size.
            *
            * ```javascript
            * // create a client and assign a publish store to it
            * var client = new amps.Client().ackBatchSize(100);
            *
            * // ... get the ack batch size later
            * if (client.ackBatchSize() > 10) { ... }
            * ```
            *
            * @param {number} ackBatchSize The size of the batch to acknowledge.
            * @returns The client if a setter is called. The acknowledgement batch size otherwise.
            */
        ackBatchSize(): number;
        ackBatchSize(ackBatchSize: number): Client;
        /**
            * This method is a setter/getter for the acknowledgement batch timeout of the client.
            *
            * Batching acknowledgements reduces the number of round-trips to AMPS, which reduces network traffic and
            * improves overall performance. AMPS sends the batch of acknowledgements when the amount of time since the last
            * batch was sent exceeds a specified timeout.
            *
            * ```javascript
            * // create a client and assign a acknowledgment batch timeout to it
            * var client = new amps.Client().ackTimeout(100);
            *
            * // ... get the ack batch timeout later
            * if (client.ackTimeout() > 1000) { ... }
            * ```
            *
            * @param {number} ackTimeout The amount in milliseconds of time since the last batch acknowledgement. If set to
            * 0, there will be no timeout.
            * @returns The client if a setter is called. The acknowledgement batch timeout value (if any) otherwise.
            */
        ackTimeout(): number;
        ackTimeout(ackTimeout: number): Client;
        /**
            * This method disconnects the client from an AMPS server (if the connection existed).
            * @returns The promise object.
            */
        disconnect(): Promise<any>;
        /**
            * This method performs the publish command.
            * The publish command is the primary way to inject messages into the AMPS processing stream. A publish command
            * received by AMPS will be forwarded to other connected clients with matching subscriptions.
            *
            * ```javascript
            * client.publish('topic', {id: 1});
            * ```
            *
            * @param {string} topic the topic to publish data.
            * @param data the data to publish to a topic.
            * @param {object} params an object with params, like: &#123;expiration: 30, ...&#125;
            */
        publish(topic: string, data: any, params?: CommandParams): void;
        /**
            * This method delta publishes a message to a SOW topic.
            *
            * ```javascript
            * client.deltaPublish('topic', {id: 1, text: 'Hello, World'});
            * ```
            *
            * @param {string} topic the topic to publish data.
            * @param data the data to publish to a topic.
            * @param {object} params an object with params, like: &#123;expiration: 30, ...&#125;
            */
        deltaPublish(topic: string, data: any, params?: CommandParams): void;
        /**
            * This method performs the __flush__ command. It sends a command to AMPS that returns an acknowledgement when all
            * previous messages from this client have been received and processed. This command helps applications that use
            * AMPS determine when AMPS has received all of the messages that have been sent, making it safe for the client
            * to exit.
            *
            * ```javascript
            * client.publish('topic', {id: 1});
            * client.publish('topic', {id: 2});
            * client.flush().then(...).catch(...);
            * ```
            *
            * @param {number} timeout the flush timeout in milliseconds.
            * @returns The Promise object with the results of execution of the command.
            */
        flush(timeout?: number): Promise<{}>;
        /**
            * This method performs the __subscribe__ command. The __subscribe__ command is the primary way to retrieve messages
            * from the AMPS processing stream. A client can issue a __subscribe__ command on a topic to receive all published
            * messages to that topic in the future. Additionally, content filtering can be used to choose which messages the
            * client is interested in receiving.
            *
            * ```javascript
            * client.subscribe(function(message) { console.log(message); }, 'topic')
            *     .then(function(subscriptionId) { console.log(subscriptionId); })
            *     .catch(function(err) { console.error('err: ', err); });
            * ```
            *
            * @param {function} onMessage a message handler that will be called each time a message is received.
            * @param {string} topic The topic argument in subscribe.
            * @param {string} filter The filter argument in subscribe.
            * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.
            * @returns The Promise object with the results of execution of the command.
            */
        subscribe(onMessage: (message: Message) => void, topic: string, filter?: string, params?: CommandParams): Promise<string>;
        /**
            * This method performs the __sow__ command. The __sow__ command is use to query the contents of a previously
            * defined SOW Topic. A __sow__ command can be used to query an entire SOW Topic, or a filter can be used to further
            * refine the results found inside a SOW Topic. For more information, see the State of the World and SOW Queries
            * chapters in the AMPS User Guide.
            *
            * ```javascript
            * client.sow(function(message) { console.log(message); }, 'sow-topic')
            *     .then(function(subscriptionId) { console.log(subscriptionId); })
            *     .catch(function(err) { console.error('err: ', err); });
            * ```
            *
            * @param {function} onMessage a message handler that will be called each time a message is received.
            * @param {string} topic The topic argument in sow.
            * @param {string} filter The filter argument in sow.
            * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.
            * @returns  The Promise object with the results of execution of the command.
            */
        sow(onMessage: (message: Message) => void, topic: string, filter?: string, params?: CommandParams): Promise<string>;
        /**
            * This method performs the __sow_and_subscribe__ command. A __sow_and_subscribe__ command is used to combine the
            * functionality of __sow__ and a __subscribe__ command in a single command. The __sow_and_subscribe__ command is
            * used
            *
            * * to query the contents of a SOW topic (this is the __sow__ command); and
            * * to place a subscription such that any messages matching the subscribed SOW topic and query filter will
            *      be published to the AMPS client (this is the __subscribe__ command). As with the __subscribe__ command,
            *      publish messages representing updates to SOW records will contain only information that has changed.
            *
            * ```javascript
            * client.sowAndSubscribe(function(message) { ... }, 'sow-topic')
            *     .then(function(subId) { console.log(subId); })
            *     .catch(function(err) { console.error('err: ', err); });
            * ```
            *
            * @param {function} onMessage a message handler that will be called each time a message is received.
            * @param {string} topic The topic argument in sow.
            * @param {string} filter The filter argument in sow.
            * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.
            * @returns The Promise object with the results of execution of the command.
            */
        sowAndSubscribe(onMessage: (message: Message) => void, topic: string, filter?: string, params?: CommandParams): Promise<string>;
        /**
            * This method performs the __delta_subscribe__ command. The __delta_subscribe__ command is like the __subscribe__
            * command except that subscriptions placed through __delta_subscribe__ will receive only messages that have changed
            * between the SOW record and the new update. If __delta_subscribe__ is used on a record which does not currently
            * exist in the SOW or if it is used on a topic which does not have a SOW-topic store defined, then
            * __delta_subscribe__ behaves like a __subscribe__ command.
            *
            * ```javascript
            * client.deltaSubscribe(function(message) { ... }, 'topic')
            *     .then(function(subId) { console.log(subId); })
            *     .catch(function(err) { console.error('err: ', err); });
            * ```
            *
            * @param {function} onMessage a message handler that will be called each time a message is received.
            * @param {string} topic The topic argument in sow.
            * @param {string} filter The filter argument in sow.
            * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.
            * @returns The Promise object with the results of execution of the command.
            */
        deltaSubscribe(onMessage: (message: Message) => void, topic: string, filter?: string, params?: CommandParams): Promise<string>;
        /**
            * This method performs the __sow_and_delta_subscribe__ command.
            * A __sow_and_delta_subscribe__ command is used to combine the functionality of commands __sow__ and a
            * __delta_subscribe__ in a single command. The __sow_and_delta_subscribe__ command is used
            *
            * * to query the contents of a SOW topic (this is the __sow__ command); and
            * * to place a subscription such that any messages matching the subscribed SOW topic and query filter
            *   will be published to the AMPS client (this is the __delta_subscribe__ command).
            *
            * As with the __delta_subscribe__ command, publish messages representing updates to SOW records will contain only
            * the information that has changed. If a __sow_and_delta_subscribe__ is issued on a record that does not currently
            * exist in the SOW topic, or if it is used on a topic that does not have a SOW-topic store defined,
            * then a __sow_and_delta_subscribe__ will behave like a __sow_and_subscribe__ command.
            *
            * ```javascript
            * client.sowAndDeltaSubscribe(function(message) { ... }, 'sow-topic')
            *     .then(function(subId) { console.log(subId); })
            *     .catch(function(err) { console.error('err: ', err); });
            * ```
            *
            * @param {function} onMessage a message handler that will be called each time a message is received.
            * @param {string} topic The topic argument in sow.
            * @param {string} filter The filter argument in sow.
            * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.
            * @returns The Promise object with the results of execution of the command.
            */
        sowAndDeltaSubscribe(onMessage: (message: Message) => void, topic: string, filter?: string, params?: CommandParams): Promise<string>;
        /**
            * This method performs the unsubscribe command. The unsubscribe command unsubscribes the client from the topic
            * which messages the client is is no more interested in receiving. If not subscription id is provided, the client
            * will unsubscribe from all subscriptions.
            *
            * ```javascript
            * client.unsubscribe();  // unsubscribe from all
            * client.unsubscribe('123');
            * ```
            *
            * @param {string} subId The id of the subscription.
            * @returns The Promise object with the results of execution of the command.
            */
        unsubscribe(subId?: string): Promise<string>;
        /**
            * This method ACKs a message queue message using the message object.
            *
            * ```javascript
            * client.ack(queueMessage);
            * ```
            *
            * @param {Message} message AMPS message object.
            * @param {string} options A comma separated list of values indicating additional options, such as `cancel`,
            * `expire`, or `lease_extension=60s`.
            */
        ack(message: Message, options?: string): void;
        /**
            * --------
            * This method ACKs a message queue message using the topic and bookmark values.
            *
            * ```javascript
            * client.ack('queue-topic', '12290412031115262887|1484244707000000008|');
            * ```
            *
            * @param {string} topic The topic of the message to ack.
            * @param {string} bookmark The bookmark of the message to ack.
            * @param {string} options A comma separated list of values indicating additional options, such as `cancel`,
            * `expire`, or `lease_extension=60s`.
            */
        ack(topic: string, bookmark: string, options?: string): void;
        /**
            * This method executes a SOW delete with a filter.
            *
            * ```javascript
            * client
            *     .sowDelete('sow-topic', '/status = "obsolete"')
            *     .then(function(message) {
            *         console.log(message.header.ackType(), ': ',  message.header.status());
            *     });
            * ```
            *
            * @param {string} topic The topic to execute the SOW delete against.
            * @param {string} filter The filter. To delete all records, set a filter that is always true: `1 = 1`
            * @param {string} options A comma separated list of values indicating additional processing options.
            * @returns {Promise<Message>} The promise object with the results of execution of the command.
            */
        sowDelete(topic: string, filter: string, options?: string): Promise<Message>;
        /**
            * This method deletes a message from a SOW, using data supplied to locate a SOW entry with matching keys.
            *
            * ```javascript
            * var topic = sowMessage.header.topic();
            * var data = sowMessage.data;
            *
            * client
            *     .sowDeleteByData(topic, data)
            *     .then(function(message) {
            *         console.log(message.header.ackType(), ': ',  message.header.status());
            *     });
            * ```
            *
            * @param {string} topic The topic to execute the SOW delete against.
            * @param {any} data The A message data whose keys match the message to be deleted in the server’s SOW.
            * @returns {Promise<Message>} The promise object with the results of execution of the command.
            */
        sowDeleteByData(topic: string, data: any): Promise<Message>;
        /**
            * This method executes a SOW delete with sow keys (supplied as a comma-separated values in a string). SOW keys are
            * provided in the header of a SOW message, and are the internal identifier AMPS uses for that SOW message.
            *
            * ```javascript
            * var topic = sowMessage1.header.topic();
            * var keys = sowMessage1.header.sowKey() + ',' + sowMessage2.header.sowKey();
            *
            * client
            *     .sowDeleteByKeys(topic, keys)
            *     .then(function(message) {
            *         console.log(message.header.ackType(), ': ',  message.header.status());
            *     });
            * ```
            *
            * @param {string} topic The topic to execute the SOW delete against.
            * @param {string} keys A comma separated list of SOW keys to be deleted. SOW keys are provided in the header of
            * a SOW message, and are the internal identifier AMPS uses for that SOW message.
            * @returns {Promise<Message>} The promise object with the results of execution of the command.
            */
        sowDeleteByKeys(topic: string, keys: string): Promise<Message>;
}

/**
    * Interface for objects that represent a collection of valid key-value pairs
    * of parameters that can be set withing a convenience method like [[Client.subscribe]], [[Client.sow]], etc.
    *
    * See [[Command]] class for detailed descriptions of the parameters.
    */
export interface CommandParams {
        [key: string]: any;
        command?: string;
        commandId?: string;
        queryId?: string;
        subId?: string;
        ackType?: string;
        data?: any;
        topN?: number;
        batchSize?: number;
        topic?: string;
        filter?: string;
        bookmark?: string;
        options?: string;
        correlationId?: string;
        orderBy?: string;
        sowKey?: string;
        sowKeys?: string;
        expiration?: number;
        sequenceId?: BigInteger;
        subIds?: string;
}
/**
    * The Command class encapsulates the AMPS Command entity. The JavaScript client sends [[Command]] objects to the server
    * and receives [[Message]] objects from the server.
    */
export class Command {
        /**
            * index type (for adding options through addParams() method)
            * @hidden
            */
        [key: string]: any;
        /**
            * @param {string} command The name of the command.
            */
        constructor(command: string);
        /**
            * This method returns the 'raw' header of the command as an object with key-value pairs.
            * @hidden
            */
        rawHeader(): Header;
        /**
            * This method returns a command converted into a message.
            * @hidden
            */
        toMessage(): Message;
        /**
            * Sets the command e.g. 'publish', 'sow_and_subscribe', to be executed.
            * The following commands are available:
            * - publish
            * - delta_publish
            * - subscribe
            * - delta_subscribe
            * - sow
            * - sow_and_subscribe
            * - sow_and_delta_subscribe
            * - sow_delete
            * - unsubscribe
            *
            * @param {string} value The command name value.
            * @returns {Command} The updated Command object.
            */
        command(value: string): Command;
        /**
            * ---------
            * Returns the Command name.
            * @returns {string} The Command name value.
            */
        command(): string;
        /**
            * Sets the Client-specified command id. The command id is returned by the engine in responses to commands to allow
            * the client to correlate the response to the command.
            * @param {string} value The command id value.
            * @returns {Command} The updated Command object.
            */
        commandId(value: string): Command;
        /**
            * ---------
            * Returns the command id.
            * @returns {string} The command id value.
            */
        commandId(): string;
        /**
            * Sets the SOW Query identifier set by client to identify a query.
            * @param {string} value The query id.
            * @returns {Command} The updated Command object.
            */
        queryId(value: string): Command;
        /**
            * ---------
            * Returns the query id.
            * @returns {string} The query id.
            */
        queryId(): string;
        /**
            * Sets the subscription identifier set by server when processing a subscription.
            * @param {string} value The subscription id.
            * @returns {Command} The updated Command object.
            */
        subId(value: string): Command;
        /**
            * ---------
            * Returns the subscription id.
            * @returns {string} The subscription id.
            */
        subId(): string;
        /**
            * Sets the acknowledgements requested for the command. Multiple ack types should be comma-delimited.
            * The acknowledgement messages will be delivered to the message handler.
            * @param {string} value The acknowledgement message type(s).
            * @returns {Command} The updated Command object.
            */
        ackType(value: string): Command;
        /**
            * ---------
            * Returns the acknowledgement message type(s).
            * @returns {string} The acknowledgement message type(s).
            */
        ackType(): string;
        /**
            * Sets the command data (message payload). Makes sense only for `publish`, `delta_publish`, and `sow_delete`
            * commands.
            * @param {any} value The Command data (message payload).
            * @returns {Command} The updated Command object.
            */
        data(value: any): Command;
        /**
            * ---------
            * Returns the Command data (message payload).
            * @returns {any} The Command data (message payload).
            */
        data(): any;
        /**
            * Sets the number of records to return.
            * Note: If `TopN` is not equally divisible by the `BatchSize` value, then more records will be returned so that the
            * total number of records is equally divisible by the `BatchSize` setting.
            * @param {number} value The top N value.
            * @returns {Command} The updated Command object.
            */
        topN(value: number): Command;
        /**
            * ---------
            * Returns the top N value.
            * @returns {number} The top N value.
            */
        topN(): number;
        /**
            * Sets the number of messages that are batched together when returning a query result. If it's not set, it is
            * `10` by default.
            * @param {number} value The batch size value.
            * @returns {Command} The updated Command object.
            */
        batchSize(value: number): Command;
        /**
            * ---------
            * Returns the batch size value.
            * @returns {number} The batch size value.
            */
        batchSize(): number;
        /**
            * Sets the topic value.
            * @param {string} value The topic value.
            * @returns {Command} The updated Command object.
            */
        topic(value: string): Command;
        /**
            * ---------
            * Returns the topic value.
            * @returns {string} The topic value.
            */
        topic(): string;
        /**
            * Sets the content filter expression.
            * @param {string} value The filter value.
            * @returns {Command} The updated Command object.
            */
        filter(value: string): Command;
        /**
            * ---------
            * Returns the filter value.
            * @returns {string} The filter value.
            */
        filter(): string;
        /**
            * Sets the client-originated identifier used to mark a location in journaled messages.
            * @param {string} value The bookmark value.
            * @returns {Command} The updated Command object.
            */
        bookmark(value: string): Command;
        /**
            * ---------
            * Returns the bookmark value.
            * @returns {string} The bookmark value.
            */
        bookmark(): string;
        /**
            * Sets the (comma-delimited) string of options on a specific Command.
            * @param {string} value The options (comman-delimited) string value.
            * @returns {Command} The updated Command object.
            */
        options(value: string): Command;
        /**
            * ---------
            * Returns the options (comma-delimited) string value.
            * @returns {string} The options (comma-delimited) string value.
            */
        options(): string;
        /**
            * Sets the opaque token set by an application and returned with the message.
            * @param {string} value The correlationId value.
            * @returns {Command} The updated Command object.
            */
        correlationId(value: string): Command;
        /**
            * ---------
            * Returns the correlationId value.
            * @returns {string} The correlationId value.
            */
        correlationId(): string;
        /**
            * Sets the SOW topic key(s) by which to order SOW query.
            * @param {string} value The orderBy value.
            * @returns {Command} The updated Command object.
            */
        orderBy(value: string): Command;
        /**
            * ---------
            * Returns the orderBy value.
            * @returns {string} The orderBy value.
            */
        orderBy(): string;
        /**
            * Sets the sow key value.
            * A SOW key will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in
            * on a subscription when the published message matches a record in the SOW.
            *
            * Format:
            *
            * - string containing the digits of an unsigned long for AMPS-generated SOW keys
            *
            * OR
            *
            * - arbitrary string in the base64 character set for user-provided SOW keys.
            * @param {string} value The sow key value.
            * @returns {Command} The updated Command object.
            */
        sowKey(value: string): Command;
        /**
            * ---------
            * Returns the sow key value.
            * @returns {string} The sow key value.
            */
        sowKey(): string;
        /**
            * Sets the sowKeys as a comma-delimited value.
            * @param {string} value The sow keys value.
            * @returns {Command} The updated Command object.
            */
        sowKeys(value: string): Command;
        /**
            * ---------
            * Returns the sowKeys value.
            * @returns {string} The sowKeys value.
            */
        sowKeys(): string;
        /**
            * Sets the SOW expiration time (in seconds) if used in `publish`.
            * @param {number} value The command expiration value (in seconds).
            * @returns {Command} The updated Command object.
            */
        expiration(value: number): Command;
        /**
            * ---------
            * Returns the command expiration value (in seconds).
            * @returns {number} The command expiration value.
            */
        expiration(): number;
        /**
            * Sets the client name value. It is used to identify a client. Useful for publishers that wish to identify the
            * source of a publish, client status messages and for client heartbeats. If it's not set, it'll be taken from the
            * [[Client]] object.
            * @param {string} value The client name value.
            * @returns {Command} The updated Command object.
            * @hidden
            */
        clientName(value: string): Command;
        /**
            * ---------
            * Returns the client name value.
            * @returns {string} The client name value.
            * @hidden
            */
        clientName(): string;
        /**
            * Sets the sequenceId value. SequenceId is an integer that corresponds to the publish message sequence number. For
            * more information see the **Replication** section in the **User Guide**.
            * @param {BigInteger} value The sequenceId value.
            * @returns {Command} The updated Command object.
            */
        sequenceId(value: BigInteger): Command;
        /**
            * ---------
            * Returns the sequenceId value.
            * @returns {BigInteger} The sequenceId value.
            */
        sequenceId(): BigInteger;
        /**
            * Sets the subIds - a comma-separated list of subscription ids sent from AMPS engine to identify which client
            * subscriptions match a given `publish` message.
            * @param {string} value The subIds (comma-delimited) value.
            * @returns {Command} The updated Command object.
            */
        subIds(value: string): Command;
        /**
            * ---------
            * Returns the subIds (comma-delimited) value.
            * @returns {string} The subIds (comma-delimited) value.
            */
        subIds(): string;
        /**
            * Parses an object with params into a set of command parameters. For example,
            * an object &#123; expiration: 30, filter: '/age > 20' &#125; will be equivalent to make a command using
            * new amps.Command().expiration(30).filter('/age > 20');
            * @param {object} [params] An object with params.
            * @returns {Command} The updated Command object.
            * @hidden
            */
        addParams(params?: CommandParams): Command;
}

/**
  * @hidden
  */
export class DefaultAuthenticator implements Authenticator {
    authenticate(login: string, password: string): Promise<string>;
    retry(login: string, password: string): Promise<string>;
    completed(login: string, password: string, reason: string): void;
}

/**
    * Represents a simple object that contains a URI string value and an optional object that implements the
    * [[Authenticator]] interface.
    */
export interface ChooserItem {
        uri: string;
        authenticator?: Authenticator;
}
/**
    * This is a simple server chooser that implements the [[ServerChooser]] interface. It keeps a list of AMPS instance
    * URIs and Authenticators, and advances to the next one when a failure occurs. You can add any number of URIs to the
    * [[DefaultServerChooser]].
    *
    * *To use the [[DefaultServerChooser]], you add the URIs for the server to choose from, then set the chooser to the
    * [[Client]]:*
    *
    * ```javascript
    * var chooser = new amps.DefaultServerChooser();
    * chooser.add('wss://server:9005/amps/nvfix');
    * chooser.add('wss://server-two:9005/amps/nvfix');
    *
    * var client = new amps.Client('showchooser');
    * client.serverChooser(chooser);
    *
    * client
    *     .connect()
    *     .then(...)
    *     .catch(...);
    * ```
    */
export class DefaultServerChooser implements ServerChooser {
        /**
            * This is the constructor for the [[DefaultServerChooser ]] class.
            */
        constructor();
        /**
            * This method adds a URI and an optional authenticator for [[Client]] to choose from.
            *
            * ```javascript
            * chooser.add('wss://server:9005/amps/json');
            * chooser.add('wss://another_server:9006/amps/json', myAuthenticator);
            * ```
            *
            * @param {string} uri The URI of the server.
            * @param {Authenticator} authenticator The authenticator object for custom authentication scenarios.
            * @returns {DefaultServerChooser} The server chooser object.
            */
        add(uri: string, authenticator?: Authenticator): DefaultServerChooser;
        /**
            * This method allows to add as many server choosers as needed. The arguments can be either uri strings or objects
            * that contain uri key, and optionally, the authenticator key.
            *
            * ```javascript
            * chooser.addAll(
            *     'wss://server:9005/amps/json',
            *     {uri: 'wss://extra_server:9007/amps/json'},
            *     {uri: 'wss://another_server:9003/amps/json', authenticator: myAuthenticator}
            * );
            * ```
            *
            * @param {...(string | ChooserItem)} options either uri strings or objects that contain uri key, and optionally,
            * the authenticator key.
            * @returns {DefaultServerChooser} The server chooser object.
            */
        addAll(...options: Array<string | ChooserItem>): DefaultServerChooser;
        /**
            * This method returns the current URI chosen. If no URI was chosen yet, returns null.
            *
            * @returns {string} The current URI chosen (if any).
            */
        getCurrentURI(): string;
        /**
            * This method returns the current authenticator chosen. If no authenticator was chosen yet, returns null.
            *
            * @returns {Authenticator} The current authenticator chosen (if any).
            */
        getCurrentAuthenticator(): Authenticator;
        /**
            * This method is invoked by the [[Client]] to indicate a connection failure occurred.
            *
            * @param {Error} error An error object containing an error message.
            * @param {any} connectionInfo An object of properties associated with the failed connection.
            */
        reportFailure(error: Error, connectionInfo: any): void;
        /**
            * This method is invoked by the [[Client]] to indicate a connection attempt was successful.
            *
            * @param {any} connectionInfo An object of properties associated with the successful connection.
            */
        reportSuccess(connectionInfo: any): void;
        /**
            * This method provides additional detail to be included in an exception thrown by when the AMPS instance(s) are not
            * available. Called by the [[Client]] when creating an exception.
            *
            * @returns {string} A string with information about the connection that failed and the reason for the failure.
            * When no further information is available, returns an empty string.
            */
        getError(): string;
}

/**
    * [[DefaultSubscriptionManager]] is used to resubscribe and manage client subscriptions in case of a unintended
    * disconnection.
    *
    * ```javascript
    * // create a client
    * let client = new amps.Client('my-client');
    *
    * // Create and assign the subscription manager
    * client.subscriptionManager(new amps.DefaultSubscriptionManager());
    *
    * // ... access the subscription manager later
    * client.subscriptionManager().clear();
    * ```
    */
export class DefaultSubscriptionManager implements SubscriptionManager {
        /**
            * This is the constructor for the DefaultSubscriptionManager class.
            * @param {number} resubscriptionTimeout The maximum time (milliseconds) for the Resubscription to timeout. If
            * it is equal to zero, it never times out.
            */
        constructor(_resubscriptionTimeout?: number);
        /**
            * This method performs the subscription to a topic.
            *
            * @param {Header} header The subscription command header with all command data.
            * @param {function} messageHandler The message handler callback function. Not required in case of 'replace' or
            * 'pause' subscriptions.
            */
        subscribe(header: Header, messageHandler?: (message: Message) => void): void;
        /**
            * This method unsubcribes from a topic using the subscription id.
            *
            * @param {string} subId The subscription id.
            */
        unsubscribe(subId: string): void;
        /**
            * This method clears all the managed subscriptions so that in case of the disconnection there will be no
            * subscriptions to restore.
            */
        clear(): void;
        /**
            * This method sets/gets the resubscription timeout value. It should be bigger or equal to zero. If it
            * is equal to zero, it never times out.
            *
            * @param {number} timeout The timeout value (in milliseconds).
            * @returns {number} The subscription timeout.
            */
        resubscriptionTimeout(timeout?: number): number;
        /**
            * This method resubscribes to all the stored subscriptions using the [[Client]] object provided.
            *
            * @param {Client} client The AMPS client object. It must be connected.
            */
        resubscribe(client: Client): void;
}

/**
    * This is the interface for classes that represent a delay strategy. [[DelayStrategy]] objects are used by the client
    * in order to determine a delay period between reconnection attempts. AMPS provides [[FixedDelayStrategy]] and
    * [[ExponentialDelayStrategy]] classes that implement basic functionality to calculate delay intervals with fixed or
    * exponentially growing values.
    */
export interface DelayStrategy {
        /**
            * This method returns the time (in milliseconds) that the client should delay before connecting to the given
            * server URI.
            *
            * @param {string} uri The URI of the server.
            * @returns {number} the time (in milliseconds) that the client should delay.
            */
        getConnectWaitDuration(uri: string): number;
        /**
            * This method resets the state of this reconnect delay. AMPS calls this method when a connection is established.
            */
        reset(): void;
}

/**
    * This is the interface with available parameters to set for a [[ExponentialDelayStrategy]] object.
    */
export interface ExponentialDelayStrategyParams {
        initialDelay?: number;
        maximumDelay?: number;
        backoffExponent?: number;
        maximumRetryTime?: number;
        jitter?: number;
}
/**
    * [[ExponentialDelayStrategy]] is an implementation that exponentially backs off when reconnecting to the same server,
    * with a maximum time to retry before it gives up entirely.
    *
    * ```javascript
    * // create the strategy with all default values
    * var strategy = new amps.ExponentialDelayStrategy();
    *
    * // set jitter to 3.5, and keep other parameters default
    * var strategy = new amps.ExponentialDelayStrategy({jitter: 3.5});
    *
    * // set all params as arguments...
    * var strategy = new amps.ExponentialDelayStrategy(400, 25000, 1.5, 0, 2.5);
    *
    * // ... or using the object with values
    * var strategy = new amps.ExponentialDelayStrategy({
    *     initialDelay: 400,
    *     maximumDelay: 25000,
    *     backoffExponent: 1.5,
    *     maximumRetryTime: 0,
    *     jitter: 2.5
    * });
    *
    * // ... or using setter methods
    * var strategy = new amps.ExponentialDelayStrategy()
    *     .initialDelay(400)
    *     .maximumDelay(25000)
    *     .backoffExponent(1.5)
    *     .maximumRetryTime(0)
    *     .jitter(2.5);
    *
    *  // Setters can also be used after initialization of the strategy to change values dynamically
    * });
    * ```
    */
export class ExponentialDelayStrategy implements DelayStrategy {
        /**
            * @param {number} initialDelay The time (in milliseconds) to wait before reconnecting to a server for the
            * first time after a failed connection. The default value is **200** ms.
            * @param {number} maximumDelay The maximum time to wait for any reconnect attempt (milliseconds).
            * Exponential backoff will not exceed this maximum. The default value is **20** s.
            * @param {number} backoffExponent The exponent to use for calculating the next delay time. For example, if
            * the initial time is 200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.
            * The default value is **2.0**.
            * @param {number} maximumRetryTime The maximum time (milliseconds) to allow reconnect attempts to continue
            * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client
            * never gives up. The default value is **0**.
            * @param {number} jitter The amount of 'jitter' to apply when calculating a delay time, measured in multiples
            * of the initial delay. Jitter is used to reduce the number of simultaneous reconnects that may be issued from
            * multiple clients. The default value is **1.0**.
            */
        constructor(initialDelay?: number, maximumDelay?: number, backoffExponent?: number, maximumRetryTime?: number, jitter?: number);
        /**
            * -------------
            * @param {ExponentialDelayStrategyParams} params The object with delay parameters, such as delay, maximumRetryTime,
            * etc.
            */
        constructor(params: ExponentialDelayStrategyParams);
        /**
            * This method sets the time (in milliseconds) to wait before reconnecting to a server for the first time after
            * a failed connection.
            *
            * @param {number} initialDelay The time (in milliseconds) to wait before reconnecting to a server for the
            * first time after a failed connection.
            * @returns {ExponentialDelayStrategy} The Delay object.
            */
        initialDelay(initialDelay?: number): ExponentialDelayStrategy;
        /**
            * This method sets the maximum time to wait between any reconnection attempts.
            * Exponential backoff will not exceed this maximum.
            *
            * @param {number} maximumDelay The maximum time to wait for any reconnect attempt (milliseconds).
            * Exponential backoff will not exceed this maximum.
            * @returns {ExponentialDelayStrategy} The Delay object.
            */
        maximumDelay(maximumDelay?: number): ExponentialDelayStrategy;
        /**
            *  This method sets the exponent to use for calculating the next delay time. For example if the initial time is
            *  200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.
            *
            * @param {number} backoffExponent The exponent to use for calculating the next delay time. For example, if
            * the initial time is 200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.
            * @returns {ExponentialDelayStrategy} The Delay object.
            */
        backoffExponent(backoffExponent?: number): ExponentialDelayStrategy;
        /**
            * This method sets the time (in millseconds) to allow reconnect attempts to continue without a successful
            * connection, before "giving up" and abandoning the connection attempt. 0 means never give up.
            *
            * @param {number} maximumRetryTime The maximum time (milliseconds) to allow econnect attempts to continue
            * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client
            * never gives up.
            * @returns {ExponentialDelayStrategy} The Delay object.
            */
        maximumRetryTime(maximumRetryTime?: number): ExponentialDelayStrategy;
        /**
            * This method sets the jitter factor used to add randomness to the delay time. Jitter is represented as a multiple
            * of the initial delay time;
            * a random number from `[ 0, (JITTER * INITIAL_DELAY) )` is added to nonzero time delays.
            *
            * @param {number} jitter The amount of 'jitter' to apply when calculating a delay time, measured in
            * multiples of the initial delay. Jitter is used to reduce the number of simultaneous reconnects that may be
            * issued from multiple clients.
            * @returns {ExponentialDelayStrategy} The Delay object.
            */
        jitter(jitter?: number): ExponentialDelayStrategy;
        /**
            * This method returns the time (in milliseconds) that the client should delay before connecting to the given
            * server URI.
            *
            * @param {string} uri The URI of the server.
            * @returns {number} The time (in milliseconds) that the client should delay.
            */
        getConnectWaitDuration(uri: string): number;
        /**
            * This method resets the state of this reconnect delay. AMPS calls this method when a connection is established.
            */
        reset(): void;
}

/**
    * This is the interface with available parameters to set for a [[FixedDelayStrategy]] object.
    */
export interface FixedDelayStrategyParams {
        delay?: number;
        maximumRetryTime?: number;
}
/**
    * [[FixedDelayStrategy]] is a reconnect delay strategy implementation that waits a fixed amount of time before retrying
    * a connection.
    *
    * ```javascript
    * // create the fixed strategy with all default values
    * var strategy = new amps.FixedDelayStrategy();
    *
    * // set the maximum retry time to 15 seconds, leave the default delay value
    * var strategy = new amps.FixedDelayStrategy({maximumRetryTime: 15000});
    *
    * // set all params as arguments...
    * var strategy = new amps.FixedDelayStrategy(2000, 45000);
    *
    * // ... or using the object with values
    * var strategy = new amps.FixedDelayStrategy({
    *     delay: 2000,
    *     maximumRetryTime: 45000
    * });
    * ```
    */
export class FixedDelayStrategy implements DelayStrategy {
        /**
            * @param {number} delay The time (in milliseconds) to wait before reconnecting to a server after a failed
            * connection. The default value is **200** ms.
            * @param {number} maximumRetryTime The maximum time (milliseconds) to allow reconnect attempts to continue
            * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client
            * never gives up. The default value is **0**.
            */
        constructor(delay?: number, maximumRetryTime?: number);
        /**
            * ---------
            * @param {FixedDelayStrategyParams} params The object with delay parameters, such as delay and maximumRetryTime.
            */
        constructor(params: FixedDelayStrategyParams);
        /**
            * This method returns the time (in milliseconds) that the client should delay before connecting to the given
            * server URI.
            *
            * @param {string} uri The URI of the server.
            * @returns {number} The time (in milliseconds) that the client should delay.
            */
        getConnectWaitDuration(uri: string): number;
        /**
            * This method resets the state of this reconnect delay. AMPS calls this method when a connection is established.
            */
        reset(): void;
}

/**
    * This is the underlying class for [[Message]] / [[Command]] headers. It represents raw parameter names as they are
    * sent to / received from the server.
    * @hidden
    */
export class Header {
        /**
            * @hidden
            */
        [key: string]: any;
        /**
            * Command to be executed. Can be one of:
            *
            * - publish
            * - subscribe
            * - subscribe
            * - sow_and_subscribe
            * - sow_delete
            * - unsubscribe
            * - flush
            * - heartbeat
            * - start_timer
            * - stop_timer
            * - logon
            *
            * @deprecated Use [[MessageHeader.command]] method instead.
            */
        c: string;
        /**
            * Acknowledgement type for the given command.
            *
            * @deprecated Use [[MessageHeader.ackType]] method instead.
            */
        a: string;
        /**
            * Password used to authenticate with an AMPS server.
            * @hidden
            */
        pw: string;
        /**
            * A client-originated identifier used to mark a location in journaled messages.
            *
            * @deprecated Use [[MessageHeader.bookmark]] method instead.
            */
        bm: string;
        /**
            * Specifies the number of messages that are batched together when returning a query result.
            *
            * @deprecated Use [[MessageHeader.batchSize]] method instead.
            */
        bs: number;
        /**
            * Used to identify a client. Useful for publishers that wish to identify the source of a publish, client status
            * messages and for client heartbeats. Can be set with `logon` command.
            *
            * @deprecated Use [[MessageHeader.clientName]] method instead.
            */
        client_name: string;
        /**
            * Client-specified command id. The command id is returned by the engine in responses to commands to allow the
            * client to correlate the response to the command.
            *
            * @deprecated Use [[MessageHeader.commandId]] method instead.
            */
        cid: string;
        /**
            * Opaque token set by an application and returned with the message. Must be `base64` encoded characters only.
            *
            * @deprecated Use [[MessageHeader.correlationId]] method instead.
            */
        x: string;
        /**
            * If true, only send raw data to subscriber for a matching publish message, i.e. do not include FIX/NVFIX envelope.
            *
            * @hidden
            */
        data_only: boolean;
        /**
            * SOW expiration time (in seconds) if used in publish.
            *
            * @deprecated Use [[MessageHeader.expiration]] method instead.
            */
        e: number;
        /**
            * Content filter expression.
            *
            * @deprecated Use [[MessageHeader.filter]] method instead.
            */
        filter: string;
        /**
            * Group Sequence Number returned with each batch message of a SOW response.
            *
            * @deprecated Use [[MessageHeader.groupSequenceNumber]] method instead.
            */
        gseq: number;
        /**
            * Heartbeat command. Can be one of:
            *
            * - start
            * - stop
            * - beat
            *
            * @hidden
            */
        heartbeat: string;
        /**
            * For messages from a queue, the time at which the lease expires.
            *
            * @deprecated Use [[MessageHeader.leasePeriod]] method instead.
            */
        lp: string;
        /**
            * Returned in the acknowledgement to a SOW query that indicates number of matches.
            *
            * @deprecated Use [[MessageHeader.matches]] method instead.
            */
        matches: number;
        /**
            * Sent with XML formatted message data to indicate the number of bytes used by the message body.
            *
            * @deprecated Use [[MessageHeader.messageLength]] method instead.
            */
        l: number;
        /**
            * Specifies the maximum number of messages within a batch publish. Must be greater than zero.
            *
            * @hidden
            */
        max_msgs: number;
        /**
            * 	A comma-delimited list of options on a specific command. Also has an alias: `opts`.
            *
            * @deprecated Use [[MessageHeader.options]] method instead.
            */
        o: string;
        /**
            * The SOW topic key by which to order SOW query.
            *
            * @deprecated Use [[MessageHeader.orderBy]] method instead.
            */
        orderby: string;
        /**
            * SOW Query identifier set by client to identify a query.
            *
            * @deprecated Use [[MessageHeader.queryId]] method instead.
            */
        query_id: string;
        /**
            * The failure message that appears when an acknowledgement returns a status of failure.
            *
            * @deprecated Use [[MessageHeader.reason]] method instead.
            */
        reason: string;
        /**
            * Used in conjunction with the stats acknowledgement, this is the number of records deleted from the SOW with a
            * `sow_delete` command.
            *
            * @deprecated Use [[MessageHeader.recordsDeleted]] method instead.
            */
        records_deleted: number;
        /**
            * Used in conjunction with the stats acknowledgement, this is the number of records inserted into the SOW.
            *
            * @deprecated Use [[MessageHeader.recordsInserted]] method instead.
            */
        records_inserted: number;
        /**
            * Returned in the acknowledgement to an SOW query that indicates number of records in the store.
            *
            * @deprecated Use [[MessageHeader.recordsReturned]] method instead.
            */
        records_returned: number;
        /**
            * Used in conjunction with the stats acknowledgement, this is the number of records updated in the SOW.
            *
            * @deprecated Use [[MessageHeader.recordsUpdated]] method instead.
            */
        records_updated: number;
        /**
            * An integer that corresponds to the publish message sequence number. For more information see the *Replication*
            * section in the *User Guide*. It is actually a big integer, but since it's received in the JSON header and is
            * parsed before we can wrap it in the [[BigInteger]] object, it's treated as a string to prevent rounding issues
            * with JavaScript.
            *
            * @deprecated Use [[MessageHeader.sequenceId]] method instead.
            */
        s: string;
        /**
            * If true, empty messages that are published will be forwarded to matching subscriptions.
            *
            * @hidden
            */
        send_empty: boolean;
        /**
            * Option to instruct AMPS that a client would like to receive the SowKey(s) back.
            *
            * @hidden
            */
        send_keys: boolean;
        /**
            * If true, Out-of-Focus messages are sent for the SOW query.
            *
            * @hidden
            */
        send_oof: boolean;
        /**
            * A SowKey will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in
            * on a subscription when the published message matches a record in the SOW. A `publish` command may contain a SOW
            * key if the SOW for the topic is configured to accept user-provided SOW keys.
            *
            * Format:
            *
            * - string containing the digits of an unsigned long for AMPS-generated SOW keys
            *
            * OR
            *
            * - arbitrary string in the base64 character set for user-provided SOW keys.
            *
            * @deprecated Use [[MessageHeader.sowKey]] method instead.
            */
        k: string;
        /**
            * Comma-separated list of SowKey values.
            *
            * @deprecated Use [[MessageHeader.sowKeys]] method instead.
            */
        sow_keys: string;
        /**
            * Used to indicate client status when client is monitored for heartbeats. Can be one of:
            *
            * - stopped
            * - alive
            * - timed out
            * - error
            *
            * @deprecated Use [[MessageHeader.status]] method instead.
            */
        status: string;
        /**
            * The subscription identifier set by server when processing a subscription.
            *
            * @deprecated Use [[MessageHeader.subId]] method instead.
            */
        sub_id: string;
        /**
            * Comma-separated list of SubIds sent from AMPS engine to identify which client subscriptions match a given
            * `publish` message.
            *
            * @deprecated Use [[MessageHeader.subIds]] method instead.
            */
        sids: string;
        /**
            * Used in conjunction with the heartbeat interval to set the timeout interval for a publisher.
            *
            * @hidden
            */
        timeout_interval: number;
        /**
            * Message timestamp set by the server in a ISO-8601 date-time format.
            *
            * @deprecated Use [[MessageHeader.timestamp]] method instead.
            */
        ts: string;
        /**
            * The number of records to return. Note: If TopN is not equally divisible by the batch size, then more records will
            * be returned so that the total number of records is equally divisible by the batch size setting.
            *
            * @deprecated Use [[MessageHeader.topN]] method instead.
            */
        top_n: number;
        /**
            * Returned in the acknowledgement to an SOW query that indicates number of topic matches.
            *
            * @deprecated Use [[MessageHeader.topicMatches]] method instead.
            */
        topic_matches: number;
        /**
            * Transmission timestamp set by client in the ISO-8601 date-time format.
            *
            * @hidden
            */
        transmission_time: string;
        /**
            * If false, subscription identifiers will not be sent for a matched message.
            *
            * @hidden
            */
        send_subscription_ids: boolean;
        /**
            * The Topic value.
            *
            * @deprecated Use [[MessageHeader.topic]] method instead.
            */
        t: string;
        /**
            * Use SOAP XML namespaces in all messages from the AMPS engine.
            *
            * @hidden
            */
        use_ns: boolean;
        /**
            * Used to identify the user id of a command.
            *
            * @deprecated Use [[MessageHeader.userId]] method instead.
            */
        user_id: string;
        /**
            * contains the version of the AMPS server.
            *
            * @deprecated Use [[MessageHeader.version]] method instead.
            */
        version: string;
}

/**
    * @hidden
    */
export interface URIParserOtions {
        source?: string;
        protocol?: string;
        authority?: string;
        userInfo?: string;
        user?: string;
        password?: string;
        host?: string;
        port?: string;
        relative?: string;
        path?: string;
        directory?: string;
        file?: string;
        query?: string;
        queryKey?: {
                [key: string]: string;
        };
        anchor?: string;
}
/**
    * @hidden
    */
export class Helpers {
        static parseUri: (uri: string) => URIParserOtions;
}
/**
    * Browser environment detected.
    */
export const IS_BROWSER: boolean;
/**
    * Node.js (and derivatives) environment detected.
    */
export const IS_NODE: boolean;
/**
    * OpenFin environment detected.
    */
export const IS_OPENFIN: any;
/**
    * Electron environment detected.
    */
export const IS_ELECTRON: any;
/**
    * WebWorker context detected.
    */
export const IS_WEBWORKER: boolean;

/**
    * Bookmark store is used by the [[Client]] to provide resumable subscriptions and client-side duplicate message
    * handling using in-memory storage.
    *
    * ```javascript
    * // create the bookmark store
    * var bookmarkStore = new amps.MemoryBookmarkStore();
    *
    * // create the client instance and assign the bookmark store to it
    * var client = new amps.Client('my-client');
    * client.bookmarkStore(bookmarkStore);
    *
    * // ... access the bookmark store later
    * client.bookmarkStore().purge();
    * ```
    */
export class MemoryBookmarkStore implements BookmarkStore {
        /**
            * This method is called internally by the [[Client]] to log a bookmark to the persistent log.
            *
            * @param {Message} message The message to bookmark.
            * @returns {BigInteger} The corresponding bookmark sequence number for this bookmark.
            */
        log(message: Message): BigInteger;
        /**
            * This method is called when you want to mark the message object as discarded, indicating that the application has
            * completed processing the message. Marking a message as discarded means that the message will not be replayed when
            * the subcription resumes.
            *
            * @param {Message} message The message object.
            */
        discard(message: Message): void;
        /**
            * ------------
            * This method is called when you want to mark the message specified by the subscription ID and the bookmark
            * sequence number as discarded, indicating that the application has completed processing the message.
            * Marking a message as discarded means that the message will not be replayed when the subcription resumes.
            *
            * @param {string} subId The subscription id.
            * @param {string} bookmark The bookmark field value in a message.
            */
        discard(subId: string, bookmark: string): void;
        /**
            * This method is called when you want to return the most recent bookmark from the log that ought to be used for
            * (re-)subscriptions.
            *
            * @param {string} subId The subscription id.
            * @returns {string} The most recent bookmark.
            */
        mostRecent(subId: string): string;
        /**
            * This method is called for each arriving message to determine if the application has already processed and
            * discarded this message. Returns 'true' if the bookmark is in the log and marked as discarded and should therefore
            * not be reprocessed. Otherwise, returns 'false'. Generally, isDiscarded is called by the
            * [[Client]] however, if needed it can be called by the application as well.
            *
            * @param {Message} message The message to check.
            * @returns {boolean} `true` if the bookmark is in the log and marked as discarded and should therefore
            * not be reprocessed. Otherwise, returns `false`.
            */
        isDiscarded(message: Message): boolean;
        /**
            * This method is called when you want to purge the contents of this store. If the subId is not provided, removes
            * any tracking history associated with publishers and received messages. Otherwise, removes history for that subId
            * only.
            *
            * @param {string} subId The identifier of the subscription to purge.
            */
        purge(subId?: string): void;
        /**
            * This method is called when you want to retrieve the sequence number of the oldest bookmark in the store.
            *
            * @param {string} subId The identifier of the subscription.
            * @returns {BigInteger} The sequence number of the oldest bookmark in the store. 0 if not found/doesn't exist
            */
        oldestBookmarkSeq(subId: string): BigInteger;
        /**
            * This method is called internally by the [[Client]] to mark a message as safely persisted by AMPS to all of its
            * sync replication destinations.
            *
            * @param {string} subId The identifier of the subscription.
            * @param {string} bookmark A raw bookmark string.
            */
        persisted(subId: string, bookmark: string): void;
        /**
            * This method notifies the bookmark store that the subscription won't receive persisted acks.
            *
            * @param {string} subId The subscription id.
            */
        noPersistedAcks(subId: string): void;
}

/**
    * [[MemoryPublishStore]] represents the default implementation of the in-memory publish store. The AMPS client uses
    * publish stores for recovery purposes. The store is responsible for maintaining the state of published messages and
    * recovering that state in the event of a disconnection.
    */
export class MemoryPublishStore implements PublishStore {
        /**
            * Store the provided message. The sequence of the message is a key that the client can later use to replay the
            * operation or remove the operation from the store. Implementations may assume that the sequence increases
            * monotonically.
            *
            * @param {Message} message The message that contains fields like command name, topic name, data, etc.
            */
        store(message: Message): void;
        /**
            * This method replays all messages in the store using the provided message sender.
            *
            * @param {function} messageSender The sender that will re-send the messages.
            */
        replay(messageSender: (header: Header, data?: any, timeout?: number) => void): void;
        /**
            * This method replays the message with the specified sequenceId.
            *
            * @param {function} messageSender The sender that will re-send the message.
            * @param {BigInteger} sequenceId The sequence id of the message to replay.
            */
        replaySingle(messageSender: (header: Header, data?: any, timeout?: number) => void, sequenceId: BigInteger): void;
        /**
            * This method discards all operations up to the index provided.
            *
            * @param {BigInteger} sequenceId The sequence id to keep. All previous sequence numbers will be discarded.
            */
        discardUpTo(sequenceId: BigInteger): void;
        /**
            * This method returns the number of messages in the store.
            *
            * @returns {number} The number of messages in the store.
            */
        unpersistedCount(): number;
        /**
            * This method returns the oldest sequence in the store.
            *
            * @returns {BigInteger} The oldest sequence number in the store.
            */
        lowestUnpersisted(): BigInteger;
        /**
            * This method returns the last persisted sequence id in the store.
            *
            * @returns {BigInteger} The sequence number of the last discarded message.
            */
        lastPersisted(): BigInteger;
}

/**
    * This is a class that encapsulates a message header. The message header is exposed via `message.header` field of
    * the [[Message]] class:
    *
    * ```javascript
    * function messageHander(message) {
    *     if (message.header.command() === 'sow') {
    *         console.log(message.header.groupSequenceNumber());
    *         console.log(message.data);
    *     }
    * }
    * ```
    * @notice Not all messages populate all headers. The *Command Reference* provides detailed description of the headers
    * returned on specific messages and what they contain.
    */
export class MessageHeader {
        constructor(_header: Header);
        /**
            * Returns the command name, e.g. 'publish', 'sow_and_subscribe', which is one of the followng:
            * - ack
            * - publish
            * - delta_publish
            * - subscribe
            * - delta_subscribe
            * - oof
            * - sow
            * - sow_and_subscribe
            * - sow_and_delta_subscribe
            * - sow_delete
            * - unsubscribe
            *
            * Returns the command name.
            * @returns {string} The command name value.
            */
        command(): string;
        /**
            * Returns the command id.
            * @returns {string} The command id value.
            */
        commandId(): string;
        /**
            * Returns the query id.
            * @returns {string} The query id.
            */
        queryId(): string;
        /**
            * Returns the subscription id.
            * @returns {string} The subscription id.
            */
        subId(): string;
        /**
            * Returns the acknowledgement type for the given command. Multiple ack types are comma-delimited.
            * @returns {string} The acknowledgement message type.
            */
        ackType(): string;
        /**
            * Returns the number of records to return. Note: If TopN is not equally divisible by the batch size, then more
            * records will be returned so that the total number of records is equally divisible by the batch size setting.
            * @returns {number} The top N value.
            */
        topN(): number;
        /**
            * Returns the specified number of messages that are batched together when returning a query result.
            * @returns {number} The batch size value.
            */
        batchSize(): number;
        /**
            * Returns the topic value.
            * @returns {string} The topic value.
            */
        topic(): string;
        /**
            * Returns a client-originated identifier used to mark a location in journaled messages.
            * @returns {string} The bookmark value.
            */
        bookmark(): string;
        /**
            * Returns a comma-delimited list of options on a specific command.
            * @returns {string} The options value.
            */
        options(): string;
        /**
            * Returns the correlation id: opaque token set by an application and returned with the message. Must be
            * `base64` encoded characters only.
            * @returns {string} The correlationId value.
            */
        correlationId(): string;
        /**
            * Returns the SOW topic key(s) by which to order SOW query.
            * @returns {string} The orderBy value.
            */
        orderBy(): string;
        /**
            * Returns the sow key value.
            * A SOW key will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in
            * on a subscription when the published message matches a record in the SOW.
            *
            * Format:
            *
            * - string containing the digits of an unsigned long for AMPS-generated SOW keys
            *
            * OR
            *
            * - arbitrary string in the base64 character set for user-provided SOW keys.
            * @returns {string} The sow key value.
            */
        sowKey(): string;
        /**
            * Returns the sowKeys as a comma-delimited value.
            * @returns {string} The sowKeys value.
            */
        sowKeys(): string;
        /**
            * Returns the Message expiration value (in seconds).
            * @returns {number} The Message expiration value.
            */
        expiration(): number;
        /**
            * Returns the client name value.
            * Used to identify a client. Useful for publishers that wish to identify the source of a publish, client status
            * messages and for client heartbeats.
            * @returns {string} The client name value.
            */
        clientName(): string;
        /**
            * Returns an integer that corresponds to the publish message sequence number. For more information see the
            * *Replication* section in the *User Guide*.
            * @returns {BigInteger} The sequenceId value.
            */
        sequenceId(): BigInteger;
        /**
            * Returns a comma-separated list of SubIds sent from AMPS engine to identify which client subscriptions match a
            * given `publish` message.
            * @returns {string} The subIds (comma-delimited) value.
            */
        subIds(): string;
        /**
            * Returns the content filter value.
            * @returns {string} The content filter value.
            */
        filter(): string;
        /**
            * Returns the message timestamp set by the server in a ISO-8601 date-time format.
            * @returns {string} The timestamp value.
            */
        timestamp(): string;
        /**
            * Returns the number of topic matches for the SOW query. Sent in `stats` acknowledgement message.
            * @returns {string} The topicMatches value.
            */
        topicMatches(): number;
        /**
            * Returns the user id used to identify the user of a command.
            * @returns {string} The userId value.
            */
        userId(): string;
        /**
            * Returns the failure message that appears when an acknowledgement returns a status of failure.
            * @returns {string} The failure reason value.
            */
        reason(): string;
        /**
            * Returns the number of records deleted from the SOW with a `sow_delete` command.
            * Used in conjunction with the stats acknowledgement.
            * @returns {string} The recordsDeleted value.
            */
        recordsDeleted(): number;
        /**
            * Returns the number of records inserted into the SOW. Used in conjunction with the stats acknowledgement.
            * @returns {string} The recordsInserted value.
            */
        recordsInserted(): number;
        /**
            * Returns number of records in the store. The value is returned in the acknowledgement to an SOW query.
            * @returns {string} The recodsReturned value.
            */
        recordsReturned(): number;
        /**
            * Returns the number of records updated in the SOW. Used in conjunction with the stats acknowledgement.
            * @returns {string} The recodsUpdated value.
            */
        recordsUpdated(): number;
        /**
            * For messages from a queue, returns the time at which the lease expires.
            */
        leasePeriod(): string;
        /**
            * Returns the transmission time value.
            * @returns {string} The transmission time value.
            */
        transmissionTime(): string;
        /**
            * As a part of the acknowledgement to a SOW query, returns the number of matches.
            */
        matches(): number;
        /**
            * Sent with XML formatted message data to indicate the number of bytes used by the message body.
            */
        messageLength(): number;
        /**
            * Returns the Group Sequence Number for each batch message of a SOW response.
            */
        groupSequenceNumber(): number;
        /**
            * Returns the client status when client is monitored for heartbeats.
            * @returns {string} The client status value.
            */
        status(): string;
}
/**
    * This is the AMPS Message representation class. Any Message received from AMPS is a [[Message]] object.
    *
    * Message have two main fields: `header` and `data`. The `header` property is used to access message header fields,
    * such as command type, message length, sow key, etc. The `data` fields contains the message payload.
    *
    * ```javascript
    * function messageHandler(message) {
    *     // print out the command type
    *     console.log(message.header.command());
    *
    *     // get the subscription id of the message
    *     console.log(message.header.subId());
    *
    *     // print out message data
    *     console.log(message.data);
    *
    * }
    * ```
    *
    * @see [[MessageHeader]] for the list of available header methods.
    */
export class Message extends Header {
        /**
            * Message data. Contains message payload parsed according with its message type and the [[TypeHelper]] used for
            * that type.
            */
        data: any;
        /**
            * Message header fields, such as `command()`, `subId()`, `filter()`, etc.
            */
        header: MessageHeader;
        /**
            * The constructor basically prepares the header field so that a user can have acess methods for header fields.
            * @private
            * @hidden
            */
        constructor();
        /**
            * This is the method that initializes messages that are created from simple objects
            * @hidden
            */
        static fromObject(messageObject: any): Message;
}

/**
    * This is the interface for classes that represents a publish store. The AMPS client uses publish stores for
    * recovery purposes. The store is responsible for maintaining the state of published messages and recovering that state
    * in the event of a disconnection. Optionally, the store may persist message state and recover that state if the
    * application restarts. (Node.js only)
    * */
export interface PublishStore {
        /**
            * This method stores the provided message. The sequence of the message is a key that the client can later use to
            * replay the operation or remove the operation from the store. Implementations may assume that the sequence
            * increases monotonically.
            *
            * @param {Message} The message that contains fields like command name, topic name, data, etc.
            */
        store(message: Message): void;
        /**
            * This method replays all messages in the store using the provided message sender.
            *
            * @param {function} messageSender The sender that will re-send the messages.
            */
        replay(messageSender: (header: Header, data?: any, timeout?: number) => void): void;
        /**
            * This method replays the message with the specified sequenceId.
            *
            * @param {function} sender The sender that will re-send the message.
            * @param {BigInteger} sequenceId The sequence id of the message to replay.
            */
        replaySingle(messageSender: (header: Header, data?: any, timeout?: number) => void, sequenceId: BigInteger): void;
        /**
            * This method discards all operations up to the index provided.
            *
            * @param {BigInteger} sequenceId The sequence id to keep. All previous sequence numbers will be discarded.
            */
        discardUpTo(sequenceId: BigInteger): void;
        /**
            * This method returns the number of messages in the store.
            *
            * @returns {number} The number of messages in the store.
            */
        unpersistedCount(): number;
        /**
            * This method returns the oldest sequence in the store.
            *
            * @returns {BigInteger} The oldest sequence number in the store.
            */
        lowestUnpersisted(): BigInteger;
        /**
            * This method returns the last persisted sequence id in the store.
            *
            * @returns {BigInteger} The sequence number of the last discarded message.
            */
        lastPersisted(): BigInteger;
}

/**
    * This is the interface that defines methods used by the client in order to get a URI/Authenticator required for a
    * connection attempt.
    * A simple ServerChooser implementation is provided: [[DefaultServerChooser]].
    * It keeps a list of AMPS instance URIs and Authenticators, and advances to the next one when a failure occurs.
    *
    */
export interface ServerChooser {
        /**
            * This method returns the current URI chosen. If no URI was chosen yet, returns null.
            *
            * @returns {string} The current URI chosen (if any).
            */
        getCurrentURI(): string;
        /**
            * This method returns the current authenticator chosen. If no authenticator was chosen yet or is not set, returns
            * null.
            *
            * @returns {Authenticator} The current authenticator chosen (if any).
            */
        getCurrentAuthenticator(): Authenticator;
        /**
            * This method is invoked by the [[Client]] to indicate a connection failure occurred.
            *
            * @param {Error} error An error object containing an error message.
            * @param {any} connectionInfo An object of properties associated with the failed connection.
            */
        reportFailure(error: Error, connectionInfo: any): void;
        /**
            * This method is invoked by the [[Client]] to indicate a connection attempt was successful.
            *
            * @param {any} connectionInfo An object of properties associated with the successful connection.
            */
        reportSuccess(connectionInfo: any): void;
        /**
            * This method provides additional detail to be included in an exception thrown by when the AMPS instance(s) are not
            * available. Called by the [[Client]] when creating an exception.
            *
            * @returns {string} A string with information about the connection that failed and the reason for the failure.
            * When no further information is available, returns an empty string.
            */
        getError(): string;
}

/**
    * This is the interface for classes that represent a subscription manager. [[SubscriptionManager]] objects are used by
    * the client to resubscribe and manage client subscriptions in case of a unintended disconnection.
    * The default implementation is provided: [[DefaultSubscriptionManager]].
    */
export interface SubscriptionManager {
        /**
            * This method performs the subscription to a topic.
            *
            * @param {Header} header The subscription command header with all command data.
            * @param {function} messageHandler The message handler callback function. Not required in case of 'replace' or
            * 'pause' subscriptions.
            */
        subscribe(header: Header, messageHandler?: (message: Message) => void): void;
        /**
            * This method unsubcribes from a topic using the subscription id.
            *
            * @param {string} subId The subscription id.
            */
        unsubscribe(subId: string): void;
        /**
            * This method clears all the managed subscriptions so that in case of the disconnection there will be no
            * subscriptions to restore.
            */
        clear(): void;
        /**
            * This method resubscribes to all the stored subscriptions using the [[Client]] object provided.
            *
            * @param {Client} client The AMPS client object. It must be connected.
            */
        resubscribe(client: Client): void;
        /**
            * This method sets/gets the resubscription timeout value. It should be bigger or equal to zero. If it
            * is equal to zero, it never times out.
            *
            * @param {number} timeout The timeout value (in milliseconds).
            * @returns {number} The subscription timeout.
            */
        resubscriptionTimeout(timeout?: number): number;
}

/**
    * This is the interface for custom type helpers. Any custom type helper should implement this interface in
    * order to be compatible with the TypeHelper engine.
    */
export interface ITypeHelper {
        /**
            * This method is used to serialize data in order send it to the server. All data chuncks should be converted into
            * an array of strings.
            *
            * @param data The data to serialize.
            * @returns Serialized data as an array of strings.
            */
        serialize(data: any): string[];
        /**
            * This method deserializes data from the Server into a format that will be consumed by the message handler.
            * It can be any format as long as the consumer of the data is aware of it.
            *
            * @param data The data to deserialize.
            * @returns Deserialized data.
            */
        deserialize(data: any): any;
        /**
            * For composite helper only.
            * @hidden
            */
        helpers?: ITypeHelper[];
}
/**
    * This is a default implementation of the FIX/NVFIX type helper. Messages are converted into JavaScript objects.
    * Repeating groups will take on their last value and ordering of fields isn’t preserved. It is possible to set a
    * custom delimiter for messages, hy default it is `\x01`.
    *
    * [[TypeHelper]] class already provides instances of this class for types `fix` and `nvfix`.
    */
export class FixTypeHelper implements ITypeHelper {
        /**
            * This is the constructor of the FixNvfixTypeHelper class.
            * @param delimiter Optional delimiter value.
            */
        constructor(delimiter?: string);
        /**
            * @hidden
            */
        serialize(data: any): string[];
        /**
            * @hidden
            */
        deserialize(data: any): any;
        /**
            * This method sets the delimiter value for the helper.
            *
            * ```javascript
            * // set a custom delimiter
            * amps.TypeHelper.helper('nvfix').delimiter('%01');
            * ```
            *
            * @param delimiter The new delimiter value.
            * @returns The helper object.
            */
        delimiter(delimiter: string): FixTypeHelper;
        /**
            * ------
            * This method returns the delimiter value of the helper.
            *
            * ```javascript
            * // get the current delimiter value
            * var delimiter = amps.TypeHelper.helper('fix').delimiter();
            * ```
            *
            * @returns The delimiter value.
            */
        delimiter(): string;
}
/**
    * This is a helper class that is used to register custom message types in order for the client to support them.
    * By default, the [[Client]] supports the following message types:
    * * __JSON__
    * * __FIX__  / __NVFIX__ - via [[FixTypeHelper]] class.
    * * __Binary__
    *
    * __Composite__ message types can be created using [[TypeHelper.compositeHelper]] method.
    *
    * See [[TypeHelper.helper]] for examples on how to implement support for new types or custom type helpers for existing
    * message types.
    */
export class TypeHelper {
        /**
            * @hidden
            */
        static littleEndianSizeBuffer(size: number): Uint32Array;
        /**
            * @hidden
            */
        static bigEndianSizeBuffer(size: number): Uint32Array;
        /**
            * @hidden
            */
        static Uint8ToString(uint8Array: Uint8Array): string;
        /**
            * This method provides a helper for parsing messages of different types. If a helper was provided by a user,
            * registers it for future use.
            *
            * #### Create a custom helper for XML messages:
            * ```javascript
            * var xmlTypeHelper = {
            *     serialize: function(data) {
            *         return [new XMLSerializer().serializeToString(data)];
            *     },
            *     deserialize: function(data) {
            *         if (data.constructor === String) {
            *             return new DOMParser().parseFromString(data);
            *         }
            *         else {
            *             // Binary buffer, need to decode utf8
            *             return new DOMParser().parseFromString(
            *                 decodeURIComponent(escape(Uint8ToString(data)))
            *             );
            *         }
            *     }
            * };
            *
            * // Register the above XML custom helper for parsing all XML messages automatically
            * amps.TypeHelper.helper('xml', xmlTypeHelper);
            * ```
            *
            * #### In case the custom parsing behavior is expected, it is possible to override the default type helper:
            * ```javascript
            * // create a JSON type helper that does not parse JSON data into native JS objects keeping it as a string
            * var jsonHelper = {
            *     serialize: function(data) {
            *         return [data];
            *     },
            *     deserialize: function(data) {
            *         return JSON.stringify(data);
            *     }
            * };
            *
            * // override the default type helper
            * amps.TypeHelper.helper('json', jsonHelper);
            * ```
            *
            * #### Register the json-json-json-binary composite message type with the type helper:
            * ```javascript
            * amps.TypeHelper.helper(
            *     'compositejjjbl',
            *     amps.TypeHelper.compositeHelper('json', 'json', 'json', 'binary')
            * );
            * ```
            *
            * #### Set the custom delimiter for NVFIX format:
            * ```javascript
            * amps.TypeHelper.helper('nvfix').delimiter('%01');
            * ```
            *
            * #### Register the custom helper for NVFIX format:
            * ```javascript
            * var nvfixTypeHelper = {
            *     serialize: function(data) {
            *         // already formatted fix/nvfix string
            *         if (typeof data === 'string') {
            *             return [data];
            *         }
            *
            *         // otherwise, we assume it's an object with keys and values
            *         return [
            *             Object.keys(data).map(function(key) {
            *                 return key + '=' + data[key];
            *             }).join('\x01') + '\x01'
            *         ];
            *     },
            *     deserialize: function(data) {
            *         var parsedData = {};
            *         String.fromCharCode.apply(null, new Int8Array(data))
            *             .split('\x01')
            *             .slice(0, -1)
            *             .map(function(keyValue) {
            *                  var keyValueTuple = keyValue.split('=');
            *                  var key = keyValueTuple[0];
            *
            *                  // no '=' inside of the value
            *                  if (keyValueTuple.length === 2) {
            *                      parsedData[key] = keyValueTuple[1];
            *                  }
            *                  else {
            *                      parsedData[key] = keyValue.slice(key.length + 1);
            *                  }
            *             });
            *
            *         return parsedData;
            *     }
            * };
            *
            * // Register the above NVFIX custom helper for parsing all NVFIX messages automatically
            * amps.TypeHelper.helper('nvfix', nvfixTypeHelper);
            * ```
            *
            * @param {string} messageType The type of message to handle.
            * @param {ITypeHelper} newHelper A helper object with predefined functions that can be provided for custom
            * parsing/handling of a message type.
            * @returns {ITypeHelper} The helper object assigned/registered.
            */
        static helper(messageType: string, newHelper?: ITypeHelper): ITypeHelper;
        /**
            * This method is used to create composite message types from other types, such as JSON, XML, etc.
            *
            * ```javascript
            * // Register the json-xml-json-binary composite message type with the type helper
            * amps.TypeHelper.helper(
            *     'compositejxjb',
            *     amps.TypeHelper.compositeHelper('json', 'xml', 'json', 'binary')
            * );
            * ```
            *
            * @param {...string} messageType Previously registered types of messages.
            * @returns {ITypeHelper} A created [[ITypeHelper]]-compatible object.
            */
        static compositeHelper(...messageTypes: string[]): ITypeHelper;
}

