{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///../bundle/amps.min.js","webpack:///webpack/bootstrap a14d4b6bf1cfe30b8eb4?cd57","webpack:///../~/big-integer/BigInteger.js?cc03","webpack:///../src/header.ts?c628","webpack:///../src/client.ts?9f31","webpack:///../src/command.ts?ebbe","webpack:///../src/default-server-chooser.ts?367c","webpack:///../src/default-subscription-manager.ts?2787","webpack:///../src/exponential-delay-strategy.ts?b946","webpack:///../src/fixed-delay-strategy.ts?00b8","webpack:///../src/memory-bookmark-store.ts?e017","webpack:///../src/memory-publish-store.ts?e43f","webpack:///../src/message.ts?1634","webpack:///../src/type-helper.ts?eb1c","webpack:///../src/amps.ts?dc4f","webpack:///../src/default-authenticator.ts?e90b","webpack:///../src/helpers.ts?0424","webpack:///../~/webpack/buildin/module.js?17a8"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","bigInt","undefined","Integer","v","radix","parseValue","parseBase","BigInteger","sign","isSmall","SmallInteger","isPrecise","MAX_INT","smallToArray","Math","floor","arrayToSmall","arr","trim","length","compareAbs","MAX_INT_ARR","BASE","createArray","x","Array","truncate","ceil","add","a","b","sum","l_a","l_b","r","carry","base","push","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractAny","subtractSmall","multiplyLong","product","a_i","b_j","j","multiplySmall","shiftLeft","concat","multiplyKaratsuba","y","max","slice","ac","bd","abcd","useKaratsuba","l1","l2","multiplySmallAndArray","square","a_j","divMod1","quotientDigit","shift","q","result","divisorMostSignificantDigit","lambda","remainder","divisor","divModSmall","divMod2","guess","xlen","highx","highy","check","part","unshift","reverse","quotient","divModAny","self","Error","negate","abs","comparison","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","shift_isSmall","bitwise","fn","xSign","isNegative","ySign","xRem","not","yRem","xBits","yBits","xStop","yStop","isZero","over","pop","times","pow","roughLOB","LOBMASK_I","LOBMASK_BI","greater","min","gcd","t","divide","multiply","lcm","randBetween","low","high","range","round","random","restricted","top","digit","parseBaseFromArray","digits","val","stringify","charAt","toBase","join","minusSign","isPositive","divmod","out","left","minus","next","parseStringValue","split","exp","text","decimalPlace","indexOf","test","LOG_BASE","parseNumberValue","toString","LOG_MAX_INT","log","create","plus","small","_multiplyBySmall","modPow","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","nPrev","prev","isProbablePrime","iterations","modInv","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","String","shiftRight","remQuo","and","or","xor","parseInt","toLowerCase","charCode","charCodeAt","start","str","zeros","valueOf","toJSNumber","minusOne","isInstance","fromArray","map","Header","__assign","assign","arguments","helpers_1","command_1","message_1","type_helper_1","memory_publish_store_1","memory_bookmark_store_1","default_subscription_manager_1","default_authenticator_1","default_server_chooser_1","exponential_delay_strategy_1","fixed_delay_strategy_1","W3WebSocket","IS_NODE","IS_ELECTRON","eval","w3cwebsocket","WebSocket","IS_BROWSER","Promise","Client","_this","_name","_logonCorrelationId","_serverVersion","_serverIntVersion","_nextSubId","subscriptions","connection","_isConnected","typeHelper","_disconnectHandler","_transportFilter","_stateListenerId","_connectionStateListeners","_serverChooser","_delayStrategy","_publishStore","_bookmarkStore","_subscriptionManager","timeouts","_autoAck","_ackBatch","toAck","ackTimeout","ackBatchSize","_heartbeat","messageState","inGroup","currentSow","mergedHeader","recordsRemaining","publishHeader","_errorHandler","error","prefix","Date","toISOString","message","console","_ack","topic","bookmarks","execute","Command","bookmark","_onAckTimer","keys","ackTimeoutTimerId","setTimeout","bind","makeCommandHandler","messageHandler","resolve","reject","systemAcks","userAcks","commandName","subscriptionId","response","commandId","status","parsedUserAcks","parseAcks","parsedSystemAcks","resolveCalled","isSubscribe","clearTimeout","cid","reason","close","opts","maxBacklogValue","maxBacklogRegex","exec","userAckIndex","ackIndex","Message","fromObject","splice","isQueue","lp","bm","isDiscarded","ack","err","onError","invokeHandler","id","handler","persistedAckReceived","e","sequenceId","discardUpTo","lastPersisted","replaySingle","send","sub_id","persisted","checkAndSendHeartbeat","force","timestamp","getTime","interval","timeoutId","onHeartbeatAbsence","timeout","options","onMessage","event","state","data","deserialize","query_id","JSON","parse","k","ts","subIds","sids","_i","subIds_1","subId","seqRegex","bs","timedelta","stack","_broadcastStateChange","connectionState","listenerId","_publishInternal","pubType","params","addParams","header","store","serializedHeader","sizeBuffer","serialize","TypeHelper","littleEndianSizeBuffer","data_1","item","createMemoryBacked","subscriptionManager","DefaultSubscriptionManager","bookmarkStore","MemoryBookmarkStore","publishStore","MemoryPublishStore","ackString","acksInfo","received","processed","completed","stats","filter","serverVersion","serverVersionAsInt","version","onTimeout","data_2","isConnected","nextSubId","setMessageHandler","command","systemAckType","notSow","isPublish","bmSubId","Bookmarks","MOST_RECENT","mostRecent","NOW","EPOCH","_message","toMessage","discard","queryId","batchSize","ackType","clear","unsubscribe","correlationId","rawHeader","_logonOptions","clientName","username","user_id","password","pw","subscribe","connect","uri","authenticator","logonOptions","currentAuthenticator","noChooser","chooser","DefaultServerChooser","DefaultAuthenticator","ExponentialDelayStrategy","onDelayTick","currentUri","getCurrentURI","getCurrentAuthenticator","messageType","parsedURI","Helpers","parseUri","pathComponents","path","protocol","queryKey","pretty","connectionUri","source","headers","user","Authorization","Buffer","maxReceivedFrameSize","assembleFragments","binaryType","helper","onopen","ConnectionStateListener","Connected","reportSuccess","reset","onclose","code","onConnectionError","onerror","onmessage","wasConnected","reportFailure","Disconnected","onTimeoutInternal","openConnection","then","beforeLogon","logon","afterLogon","catch","getConnectWaitDuration","disconnect","getError","authenticate","passwordHeader","uponLogonAttempt","versionParts","retry","LoggedOn","establishHeartbeat","resubscribe","Resubscribed","self_1","replayTry","replay","PublishReplayed","HeartbeatInitiated","errorHandler","addConnectionStateListener","connectionStateListener","removeConnectionStateListener","connectionStateListenerId","disconnectHandler","transportFilter","heartbeat","serverChooser","delayStrategy","reconnectDelay","delay","FixedDelayStrategy","logonCorrelationId","autoAck","currentBookmarks","Shutdown","destroyConnection","ackTopics","ackCommandsSent","ackTopics_1","flush","publish","deltaPublish","sow","sowAndSubscribe","deltaSubscribe","sowAndDeltaSubscribe","topicOrMessage","sowDelete","sowDeleteByData","sowDeleteByKeys","sowKeys","UNKNOWN","header_1","_data","commandTypes","topN","top_n","orderBy","orderby","sowKey","sow_keys","expiration","client_name","paramKeys","param","headerCopy","key","servers","index","addAll","_a","options_1","option","connectionInfo","_resubscriptionTimeout","resubscribeInternal","client","subscription","hasOptions","replace","activeSubs","resumedSubs","resubscribing","copyHeader","subIds_2","currentSubOptions","existingSubscription","resubscriptionTimeout","obj","copiedObj","initialDelayOrParams","maximumDelay","backoffExponent","maximumRetryTime","jitter","firstUri","recentUri","currentDelay","initialDelay","_initialDelay","_maximumDelay","_backoffExponent","_maximumRetryTime","_jitter","NEGATIVE_VALUE_ERROR","currentTime","startTime","finalValue","delayOrParams","client_1","Bookmark","rawBookmark","pubId","sequenceNumber","discarded","raw","parts","Subscription","noPersAcks","publishers","_bookmarks","bookmarkMap","lastDiscarded","_noPersistedAcks","bmIndex","messageBookmark","publisherSeqNo","currentBookmark","updateBookmarkMap","useLastDiscarded","useLastPersisted","recentList","publisherKeys","publisherBookmarksList","cutUpto","noPersistedAcks","subscriptionsInfo","findSubscription","messageOrSubId","purge","oldestBookmarkSeq","messageQueue","_lastPersisted","_lowestUnpersisted","sequence","messageSender","messageItem","findQueueIndex","cutBefore","unpersistedCount","lowestUnpersisted","end","last","found","mid","__extends","extendStatics","setPrototypeOf","__proto__","__","constructor","MessageHeader","_header","f","topicMatches","topic_matches","userId","recordsDeleted","records_deleted","recordsInserted","records_inserted","recordsReturned","records_returned","recordsUpdated","records_updated","leasePeriod","transmissionTime","transmission_time","matches","messageLength","groupSequenceNumber","gseq","_super","messageObject","FixTypeHelper","delimiter","_delimiter","parsedData","decodeURIComponent","escape","Uint8ToString","Uint8Array","keyValue","keyValueTuple","getInstance","instance","createInstance","json","fromCharCode","apply","binary","fix","nvfix","size","Uint32Array","bigEndianSizeBuffer","uint8Array","chars","subarray","convertToArrayBuffers","encoded","unescape","encodeURIComponent","arrayified","newHelper","compositeHelper","messageTypes","helpers","position","byteLength","bytes","login","parser","strictMode","$0","$1","$2","strict","loose","isBrowser","isFin","window","fin","desktop","isNode","global","process","isElectron","versions","electron","isWebWorker","IS_OPENFIN","IS_WEBWORKER","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"./../bundle/amps.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"amps\"] = factory();\n\telse\n\t\troot[\"amps\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"amps\"] = factory();\n\telse\n\t\troot[\"amps\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 12);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        LOG_MAX_INT = Math.log(MAX_INT);\r\n\r\n    function Integer(v, radix) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 ? parseValue(v) : parseBase(v, radix);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a,b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n            if (isPrecise(a.value * this.value)) {\r\n                return new SmallInteger(a.value * this.value);\r\n            }\r\n            return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n            if (a.value === 0) return Integer[0];\r\n            if (a.value === 1) return this;\r\n            if (a.value === -1) return this.negate();\r\n            return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    function square(a) {\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < l; j++) {\r\n                a_j = a[j];\r\n                product = a_i * a_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n              quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        var value = n.value;\r\n        if (value === 0) return false;\r\n        if (value === 1) return true;\r\n        if (value === 2) return this.isEven();\r\n        return this.mod(n).equals(Integer[0]);\r\n    };\r\n    SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(25)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    BigInteger.prototype.isPrime = function () {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs(),\r\n            nPrev = n.prev();\r\n        var a = [2, 3, 5, 7, 11, 13, 17, 19],\r\n            b = nPrev,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2);\r\n        for (i = 0; i < a.length; i++) {\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.equals(Integer[1]) || x.equals(nPrev)) continue;\r\n            for (t = true, d = b; t && d.lesser(nPrev) ; d = d.multiply(2)) {\r\n                x = x.square().mod(n);\r\n                if (x.equals(nPrev)) t = false;\r\n            }\r\n            if (t) return false;\r\n        }\r\n        return true;\r\n    };\r\n    SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        // use the Fermat primality test\r\n        for (var i = 0; i < t; i++) {\r\n            var a = bigInt.randBetween(2, n.minus(2));\r\n            if (!a.modPow(n.prev(), n).isUnit()) return false; // definitely composite\r\n        }\r\n        return true; // large chance of being prime\r\n    };\r\n    SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.equals(bigInt.zero)) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.equals(1)) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n\r\n    var powersOfTwo = [1];\r\n    while (powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return ((typeof n === \"number\" || typeof n === \"string\") && +Math.abs(n) <= BASE) ||\r\n            (n instanceof BigInteger && n.value.length <= 1);\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (n) {\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (n) {\r\n        var remQuo;\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero()) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xBits = [], yBits = [];\r\n        var xStop = false, yStop = false;\r\n        while (!xStop || !yStop) {\r\n            if (xRem.isZero()) { // virtual sign extension for simulating two's complement\r\n                xStop = true;\r\n                xBits.push(xSign ? 1 : 0);\r\n            }\r\n            else if (xSign) xBits.push(xRem.isEven() ? 1 : 0); // two's complement for negative numbers\r\n            else xBits.push(xRem.isEven() ? 0 : 1);\r\n\r\n            if (yRem.isZero()) {\r\n                yStop = true;\r\n                yBits.push(ySign ? 1 : 0);\r\n            }\r\n            else if (ySign) yBits.push(yRem.isEven() ? 1 : 0);\r\n            else yBits.push(yRem.isEven() ? 0 : 1);\r\n\r\n            xRem = xRem.over(2);\r\n            yRem = yRem.over(2);\r\n        }\r\n        var result = [];\r\n        for (var i = 0; i < xBits.length; i++) result.push(fn(xBits[i], yBits[i]));\r\n        var sum = bigInt(result.pop()).negate().times(bigInt(2).pow(result.length));\r\n        while (result.length) {\r\n            sum = sum.add(bigInt(result.pop()).times(bigInt(2).pow(result.length)));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value, x = typeof v === \"number\" ? v | LOBMASK_I : v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = Math.min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low);\r\n        if (range.isSmall) return low.add(Math.round(Math.random() * range));\r\n        var length = range.value.length - 1;\r\n        var result = [], restricted = true;\r\n        for (var i = length; i >= 0; i--) {\r\n            var top = restricted ? range.value[i] : BASE;\r\n            var digit = truncate(Math.random() * top);\r\n            result.unshift(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        result = arrayToSmall(result);\r\n        return low.add(typeof result === \"number\" ? new SmallInteger(result) : new BigInteger(result, false));\r\n    }\r\n    var parseBase = function (text, base) {\r\n        var length = text.length;\r\n        if (2 <= base && base <= 36) {\r\n            if (length <= LOG_MAX_INT / Math.log(base)) {\r\n                return new SmallInteger(parseInt(text, base));\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var i;\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i].toLowerCase(),\r\n                charCode = c.charCodeAt(0);\r\n            if (48 <= charCode && charCode <= 57) digits.push(parseValue(c));\r\n            else if (97 <= charCode && charCode <= 122) digits.push(parseValue(c.charCodeAt(0) - 87));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\");\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit) {\r\n        var v = digit.value;\r\n        if (typeof v === \"number\") v = [v];\r\n        if (v.length === 1 && v[0] <= 35) {\r\n            return \"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(v[0]);\r\n        }\r\n        return \"<\" + v + \">\";\r\n    }\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return \"0\";\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return \"0\";\r\n            if (n.isNegative()) return new Array(1 - n).join(\"10\");\r\n            return \"1\" + new Array(+n).join(\"01\");\r\n        }\r\n        var minusSign = \"\";\r\n        if (n.isNegative() && base.isPositive()) {\r\n            minusSign = \"-\";\r\n            n = n.abs();\r\n        }\r\n        if (base.equals(1)) {\r\n            if (n.isZero()) return \"0\";\r\n            return minusSign + new Array(+n + 1).join(1);\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(stringify(digit));\r\n        }\r\n        out.push(stringify(left));\r\n        return minusSign + out.reverse().join(\"\");\r\n    }\r\n\r\n    BigInteger.prototype.toString = function (radix) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBase(this, radix);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n    SmallInteger.prototype.toString = function (radix) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBase(this, radix);\r\n        return String(this.value);\r\n    };\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return +this.toString();\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n\r\n    function parseStringValue(v) {\r\n            if (isPrecise(+v)) {\r\n                var x = +v;\r\n                if (x === truncate(x))\r\n                    return new SmallInteger(x);\r\n                throw \"Invalid integer: \" + v;\r\n            }\r\n            var sign = v[0] === \"-\";\r\n            if (sign) v = v.slice(1);\r\n            var split = v.split(/e/i);\r\n            if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n            if (split.length === 2) {\r\n                var exp = split[1];\r\n                if (exp[0] === \"+\") exp = exp.slice(1);\r\n                exp = +exp;\r\n                if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n                var text = split[0];\r\n                var decimalPlace = text.indexOf(\".\");\r\n                if (decimalPlace >= 0) {\r\n                    exp -= text.length - decimalPlace - 1;\r\n                    text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n                }\r\n                if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n                text += (new Array(exp + 1)).join(\"0\");\r\n                v = text;\r\n            }\r\n            var isValid = /^([0-9][0-9]*)$/.test(v);\r\n            if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n            var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n            while (max > 0) {\r\n                r.push(+v.slice(min, max));\r\n                min -= l;\r\n                if (min < 0) min = 0;\r\n                max -= l;\r\n            }\r\n            trim(r);\r\n            return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = new SmallInteger(i);\r\n        if (i > 0) Integer[-i] = new SmallInteger(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)(module)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is the underlying class for [[Message]] / [[Command]] headers. It represents raw parameter names as they are\n * sent to / received from the server.\n * @hidden\n */\nvar Header = /** @class */ (function () {\n    function Header() {\n    }\n    return Header;\n}());\nexports.Header = Header;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BigInteger = __webpack_require__(0);\nvar helpers_1 = __webpack_require__(14);\nvar command_1 = __webpack_require__(3);\nvar message_1 = __webpack_require__(10);\nvar type_helper_1 = __webpack_require__(11);\nvar memory_publish_store_1 = __webpack_require__(9);\nvar memory_bookmark_store_1 = __webpack_require__(8);\nvar default_subscription_manager_1 = __webpack_require__(5);\nvar default_authenticator_1 = __webpack_require__(13);\nvar default_server_chooser_1 = __webpack_require__(4);\nvar exponential_delay_strategy_1 = __webpack_require__(6);\nvar fixed_delay_strategy_1 = __webpack_require__(7);\n// Conditional imports: Node.js-like environment requires WebSocket and (optionally) Promise\nvar W3WebSocket = (helpers_1.IS_NODE || helpers_1.IS_ELECTRON) ? (eval('require')('websocket')).w3cwebsocket : WebSocket;\nif (helpers_1.IS_BROWSER && (typeof Promise === 'undefined')) {\n    throw new Error('Promise support is required. Please include es6-promise library');\n}\nvar Client = /** @class */ (function () {\n    /**\n     * @param {string} name Unique name for the client (important for queues and sow). It is strongly recommended to\n     * set a client name, but if it's not set, it'll be assigned automatically.\n     */\n    function Client(name) {\n        var _this = this;\n        // Private data\n        this._name = null;\n        this._logonCorrelationId = null;\n        this._serverVersion = null;\n        this._serverIntVersion = 0;\n        this._nextSubId = 1;\n        this.subscriptions = {};\n        this.connection = null;\n        this._isConnected = false;\n        this.typeHelper = null;\n        this._disconnectHandler = null;\n        this._transportFilter = null;\n        this._stateListenerId = 1;\n        this._connectionStateListeners = {};\n        this._serverChooser = null;\n        this._delayStrategy = null;\n        this._publishStore = null;\n        this._bookmarkStore = null;\n        this._subscriptionManager = null;\n        this.timeouts = {};\n        this._autoAck = false;\n        this._ackBatch = { toAck: {}, ackTimeout: undefined, ackBatchSize: 0 };\n        this._heartbeat = null;\n        this.messageState = { inGroup: false, currentSow: null, mergedHeader: false, recordsRemaining: 0, publishHeader: null };\n        // Assigning the default error handler\n        this._errorHandler = function (error) {\n            var prefix = new Date().toISOString() + ' [' + (_this._name ? 'client: ' + _this._name : 'ERROR') + '] >>>';\n            if (error.name && error.message) {\n                console.error(prefix, error.name + ':', error.message);\n            }\n            else {\n                console.error(prefix, error);\n            }\n        };\n        /**\n         * This is a private internal method that sends a batch ack message.\n         * @param {string} topic The topic value.\n         * @returns 0 if no actual ack command were sent, 1 otherwise.\n         * @private\n         * @hidden\n         */\n        this._ack = function (topic) {\n            var bookmarks = _this._ackBatch.toAck[topic];\n            if (bookmarks !== undefined && bookmarks.length > 0) {\n                _this.execute(new command_1.Command('sow_delete').topic(topic).bookmark(bookmarks.join(',')));\n                _this._ackBatch.toAck[topic] = [];\n                return 1;\n            }\n            return 0;\n        };\n        /**\n         * This is a private internal method that is invoked upon ackTimeout timer event.\n         * @private\n         * @hidden\n         */\n        this._onAckTimer = function () {\n            // if auto ack is off, short circuit\n            if (!_this._autoAck || !_this._isConnected) {\n                return;\n            }\n            // Acknowledge messages\n            Object.keys(_this._ackBatch.toAck).map(function (topic) { return _this._ack(topic); });\n            // reset the timer (if it's non-zero)\n            if (_this._ackBatch.ackTimeout) {\n                _this._ackBatch.ackTimeoutTimerId = setTimeout(_this._onAckTimer.bind(_this), _this._ackBatch.ackTimeout);\n            }\n        };\n        /**\n         * This is a helper method that creates a command handler for the client.\n         * @param {function} messageHandler A callback for a message/requested ack message\n         * @param {function} resolve a callback for execution report (success)\n         * @param {function} reject a callback for execution report (failure)\n         * @param {string} acks command-required ackType(s).\n         * @param {string} userAcks ackTypes requested by a user.\n         * @param {string} commandName the name of the command.\n         * @param {string} subscriptionId the id of the subscription (can be either a command id or a subscription id).\n         * @private\n         * @hidden\n         */\n        this.makeCommandHandler = function (messageHandler, resolve, reject, systemAcks, userAcks, commandName, subscriptionId) {\n            if (commandName === 'logon') {\n                _this.subscriptions[subscriptionId] = function (message) {\n                    if (message.c === 'ack') {\n                        if (message.a === 'processed') {\n                            // Detect error/success\n                            var response = { commandId: subscriptionId, message: message };\n                            if (message.status === 'failure') {\n                                reject(response);\n                            }\n                            else {\n                                resolve(response);\n                                delete _this.subscriptions[subscriptionId];\n                            }\n                        }\n                    }\n                };\n                return;\n            }\n            // Parse the acks into lists of unique values\n            var parsedUserAcks = Client.parseAcks(userAcks);\n            var parsedSystemAcks = Client.parseAcks(systemAcks);\n            var resolveCalled = false;\n            // If the command is a subscribe type\n            var isSubscribe = [\n                'subscribe', 'sow_and_subscribe', 'delta_subscribe', 'sow_and_delta_subscribe'\n            ].indexOf(commandName) >= 0;\n            // non-logon command\n            _this.subscriptions[subscriptionId] = function (message) {\n                // cancel the timeout (if any)\n                clearTimeout(_this.timeouts[message.cid]);\n                delete _this.timeouts[message.cid];\n                // Detect an Ack message\n                if (message.c === 'ack') {\n                    if (message.a === 'processed') {\n                        // Detect failure/retry/success\n                        if (message.status === 'failure') {\n                            if (reject) {\n                                reject(new Error(message.reason));\n                            }\n                        }\n                        // retry case - perhaps need to update the token\n                        else if (message.status === 'retry') {\n                            _this.connection.close(4000, 'Authentication token/password must be updated/renewed');\n                            return;\n                        }\n                        else {\n                            if (message.opts !== undefined) {\n                                // try to find max_backlog option, and if found, adjust the batchSize accordingly\n                                var maxBacklogValue = Client.maxBacklogRegex.exec(message.opts)[1];\n                                // if we have a max backlog value, we ignore still in favor of timeout (if set)\n                                if (maxBacklogValue !== undefined && !_this._ackBatch.ackTimeout) {\n                                    if (_this._ackBatch.ackBatchSize > +maxBacklogValue) {\n                                        _this._ackBatch.ackBatchSize = +maxBacklogValue;\n                                    }\n                                }\n                            }\n                            if (resolve) {\n                                resolve(subscriptionId);\n                            }\n                        }\n                    }\n                    var userAckIndex = parsedUserAcks.indexOf(message.a);\n                    var ackIndex = parsedSystemAcks.indexOf(message.a);\n                    // Detect if the message should be reported to the message handler\n                    if (userAckIndex >= 0 && messageHandler) {\n                        // Deliver the message\n                        message = message_1.Message.fromObject(message);\n                        messageHandler(message);\n                    }\n                    // Delete acks from the delivery lists\n                    if (ackIndex >= 0) {\n                        parsedSystemAcks.splice(ackIndex, 1);\n                    }\n                    if (userAckIndex >= 0) {\n                        parsedUserAcks.splice(userAckIndex, 1);\n                    }\n                    // Delete the handler after getting all the acknowledgment messages in order to not overflow the heap\n                    if (parsedUserAcks.length === 0 && parsedSystemAcks.length === 0) {\n                        if (!isSubscribe) {\n                            delete _this.subscriptions[subscriptionId];\n                        }\n                    }\n                }\n                // Timeout error\n                else if (message.c === 'timeout') {\n                    reject({ commandId: subscriptionId, message: message });\n                }\n                else if (messageHandler) {\n                    // assign a header wrapper\n                    message = message_1.Message.fromObject(message);\n                    // a message for a bookmark subscription\n                    // detect queue messages\n                    var isQueue = message.lp !== undefined;\n                    if (message.bm && _this._bookmarkStore && !isQueue) {\n                        if (!_this._bookmarkStore.isDiscarded(message)) {\n                            // log the bookmark\n                            _this._bookmarkStore.log(message);\n                            messageHandler(message);\n                        }\n                    }\n                    // if this is a queue and auto-ack is enabled\n                    else if (isQueue && _this._autoAck) {\n                        // if the message handler does not throw an exception, ack the message\n                        try {\n                            messageHandler(message);\n                            _this.ack(message);\n                        }\n                        catch (err) {\n                            _this.onError(err);\n                        }\n                    }\n                    else {\n                        // simply deliver the message\n                        messageHandler(message);\n                    }\n                    // if no acks were expected and the first message is an actual message, resolve the command\n                    if (resolve && !resolveCalled) {\n                        resolve(subscriptionId);\n                        resolveCalled = true;\n                    }\n                }\n            };\n        };\n        /**\n         * This internal method invokes the corresponding callback handler (if any), based on id.\n         * @param {string} id the id of the message to handle.\n         * @param {any} message message to handle.\n         * @private\n         * @hidden\n         */\n        this.invokeHandler = function (id, message) {\n            var handler = _this.subscriptions[id];\n            // process persisted ack first\n            if (message.c === 'ack' && message.a === 'persisted') {\n                _this.persistedAckReceived(message);\n            }\n            // deliver the message\n            if (handler) {\n                try {\n                    handler(message);\n                }\n                catch (e) {\n                    if (_this._errorHandler) {\n                        _this._errorHandler(e);\n                    }\n                }\n            }\n        };\n        /**\n         * This internal method reacts to a peristed ack message received in order to update publish and bookmark stores.\n         *\n         * @param {Message} message The persisted ack message.\n         * @private\n         * @hidden\n         */\n        this.persistedAckReceived = function (message) {\n            var sequenceId = BigInteger(message.s);\n            // publish store\n            if (_this._publishStore && message.s !== undefined) {\n                if (message.status === 'success') {\n                    // there is persisted record update for this client, let's discard persisted messages\n                    _this._publishStore.discardUpTo(sequenceId);\n                    var lastPersisted = _this._publishStore.lastPersisted();\n                    if (lastPersisted !== null && _this.sequenceId.compare(lastPersisted) <= 0) {\n                        _this.sequenceId = lastPersisted;\n                    }\n                }\n                // Failure occured, let's replay this single message\n                else {\n                    if (sequenceId.compare(0) > 0) {\n                        try {\n                            _this._publishStore.replaySingle(_this.send, sequenceId);\n                        }\n                        catch (err) {\n                            console.error('Replay error: ', err);\n                        }\n                    }\n                }\n            }\n            // bookmark store\n            var isQueue = message.lp !== undefined;\n            if (_this._bookmarkStore && message.sub_id !== undefined && message.bm !== undefined && !isQueue) {\n                if (message.status === 'success' && _this.subscriptions[message.sub_id] !== undefined) {\n                    if (message.bm.length > 1) {\n                        // report that all other messages have been persisted\n                        _this._bookmarkStore.persisted(message.sub_id, message.bm);\n                    }\n                }\n            }\n        };\n        /**\n         * This internal method is called upon receiving a heartbeat message from the server. It verifies if it's time to\n         * send a heartbeat message by verifiying that the timedelta between current time and last timestamp is > pulse\n         * interval. If the method is forced to do so, the timestamp value is ignored.\n         *\n         * @param {boolean} force If the heartbeat message MUST be sent.\n         * @private\n         * @hidden\n         */\n        this.checkAndSendHeartbeat = function (force) {\n            if (!_this._heartbeat || (_this._heartbeat && !_this._heartbeat.timestamp)) {\n                return;\n            }\n            // timer expired, let's send the HB message (or maybe we just do it)\n            if (force || (new Date().getTime() - _this._heartbeat.timestamp.getTime()) > _this._heartbeat.interval * 1000) {\n                // assign the new timestamp\n                _this._heartbeat.timestamp = new Date();\n                // reset the heartbeat timeout timer\n                clearTimeout(_this._heartbeat.timeoutId);\n                _this._heartbeat.timeoutId = setTimeout(_this._heartbeat.onHeartbeatAbsence.bind(_this), _this._heartbeat.timeout * 1000);\n                // Do the beat\n                _this.execute(new command_1.Command('heartbeat').options('beat'));\n            }\n        };\n        /**\n         * This internal method is being invoked by the WebSocket connection's onmessage event handler.\n         *\n         * State Machine:\n         *    SOW command\n         *    |- 'ack' failure\n         *    |     |- done\n         *    |- 'ack' success\n         *    |- 'group_begin'\n         *    |- 0 or more of 'sow' batch  (bs contains number of records following)\n         *    |     |- record header\n         *    |     |- record data\n         *    |- 'group_end'\n         *    |- done\n         *\n         * @param event message event from the WebSocket connection.\n         * @private\n         * @hidden\n         */\n        this.onMessage = function (event) {\n            var state = _this.messageState;\n            try {\n                var message = void 0;\n                if (!state.recordsRemaining) {\n                    // Message body\n                    if (state.publishHeader) {\n                        // This event contains data for our last publish.\n                        try {\n                            state.publishHeader.data = _this.typeHelper.deserialize(event.data);\n                        }\n                        catch (err) {\n                            // if there was a parsing error, we still need to expect new message after, thus the header = 0\n                            state.publishHeader = null;\n                            throw err;\n                        }\n                        var subIds = state.publishHeader.sids.split(',');\n                        for (var _i = 0, subIds_1 = subIds; _i < subIds_1.length; _i++) {\n                            var subId = subIds_1[_i];\n                            _this.invokeHandler(subId, state.publishHeader);\n                        }\n                        state.publishHeader = null;\n                        return;\n                    }\n                    // Otherwise, this is the message header.\n                    message = JSON.parse(event.data);\n                    if (message.s !== undefined) {\n                        message.s = Client.seqRegex.exec(event.data)[1];\n                    }\n                    switch (message.c) {\n                        case 'p':\n                        case 'publish':\n                        case 'oof':\n                            state.publishHeader = message;\n                            _this.invokeHandler(message.query_id ? message.query_id : message.cid, message);\n                            break;\n                        case 'sow':\n                            state.currentSow = message;\n                            state.mergedHeader = false;\n                            state.recordsRemaining = message.bs; // batch size\n                            break;\n                        case 'group_begin':\n                            state.inGroup = true;\n                            _this.invokeHandler(message.query_id, message);\n                            break;\n                        case 'group_end':\n                            state.inGroup = false;\n                            _this.invokeHandler(message.query_id, message);\n                            break;\n                        case 'ack':\n                            _this.invokeHandler(message.query_id ? message.query_id : message.cid, message);\n                            break;\n                        case 'heartbeat':\n                            if (_this._heartbeat && _this._heartbeat.timestamp) {\n                                var timedelta = new Date().getTime() - _this._heartbeat.timestamp.getTime();\n                                // if the interval is > than the timeout, let's send HB immediately\n                                if (_this._heartbeat && timedelta > _this._heartbeat.interval * 1000) {\n                                    _this.checkAndSendHeartbeat(true);\n                                }\n                            }\n                            return;\n                    }\n                    // just sync heartbeat info (if needed)\n                    if (_this._heartbeat) {\n                        _this.checkAndSendHeartbeat(false);\n                    }\n                }\n                else {\n                    // SOW Batch Processing Logic - Message header\n                    if (!state.mergedHeader) {\n                        message = JSON.parse(event.data);\n                        state.currentSow.k = message.k;\n                        state.currentSow.x = message.x;\n                        state.currentSow.ts = message.ts;\n                        state.mergedHeader = true;\n                    }\n                    // SOW Batch - Message body\n                    else {\n                        // Adjust these before a possible parsing failure\n                        state.mergedHeader = false;\n                        --(state.recordsRemaining);\n                        // this can fail, but we're good since we adjusted state machine\n                        state.currentSow.data = _this.typeHelper.deserialize(event.data);\n                        _this.invokeHandler(state.currentSow.query_id, state.currentSow);\n                    }\n                }\n            }\n            catch (e) {\n                _this.onError({\n                    name: '997',\n                    message: 'Error ' + e.message + ' encountered while processing message (' + event.data + ') from AMPS',\n                    stack: null\n                });\n            }\n        };\n        /**\n         * This is a private internal method that broadcasts the connection state change to the subscribers.\n         * @param {number} connectionState the new connection state.\n         * @private\n         * @hidden\n         */\n        this._broadcastStateChange = function (connectionState) {\n            for (var listenerId in _this._connectionStateListeners) {\n                if (_this._connectionStateListeners[listenerId]) {\n                    _this._connectionStateListeners[listenerId](connectionState);\n                }\n            }\n        };\n        this._publishInternal = function (pubType, topic, data, params) {\n            // if params are used - let's send it through the execute interface (full mode)\n            if (params) {\n                _this.execute(new command_1.Command(pubType).topic(topic).data(data).addParams(params));\n                return;\n            }\n            var header = { c: pubType, t: topic };\n            // if we have a publish store, persist messages\n            if (_this._publishStore) {\n                header.a = 'persisted';\n                // Increment the sequence id for the next publish\n                _this.sequenceId = _this.sequenceId.next();\n                header.s = _this.sequenceId.toString();\n                // store the message\n                _this._publishStore.store(__assign({}, header, { data: data }));\n            }\n            else if (!_this.connection || !_this._isConnected) {\n                throw new Error('Must connect before sending data');\n            }\n            if (_this.connection && _this._isConnected) {\n                var serializedHeader = JSON.stringify(header);\n                var sizeBuffer = void 0;\n                // serialize data\n                data = _this.typeHelper.serialize(data);\n                sizeBuffer = type_helper_1.TypeHelper.littleEndianSizeBuffer(data.length + 1);\n                try {\n                    // pass the size to the transport filter, if provided\n                    if (_this._transportFilter) {\n                        _this._transportFilter(sizeBuffer, true);\n                    }\n                    _this.connection.send(sizeBuffer);\n                    // pass data to the transport filter, if provided\n                    if (_this._transportFilter) {\n                        _this._transportFilter(serializedHeader, true);\n                    }\n                    _this.connection.send(serializedHeader);\n                    if (data.length === 1) {\n                        if (_this._transportFilter) {\n                            _this._transportFilter(data[0], true);\n                        }\n                        _this.connection.send(data[0]);\n                    }\n                    else {\n                        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                            var item = data_1[_i];\n                            // pass data to the transport filter, if provided\n                            if (_this._transportFilter) {\n                                _this._transportFilter(item, true);\n                            }\n                            _this.connection.send(item);\n                        }\n                    }\n                }\n                catch (err) { } // only connection error can occur ATM, and it's handled already\n            }\n        };\n        this._name = name ? name : 'AMPS-JavaScript-' + new Date().getTime();\n    }\n    /**\n     * This is a convenience static method that creates a memory-backed client that tracks\n     * bookmarks and subscriptions in memory. Subscriptions are automatically restored after a reconnection using\n     * [[DefaultSubscriptionManager]] object. [[MemoryBookmarkStore]] is enabled for bookmarks, [[MemoryPublishStore]]\n     * is enabled for publishing messages.\n     *\n     * @param {string} name Unique name for the client (important for queues and sow). It is strongly recommended to\n     * set a client name, but if it's not set, it'll be assigned automatically.\n     * @returns {Client} a highly available [[Client]] instance.\n     */\n    Client.createMemoryBacked = function (name) {\n        return new Client(name)\n            .subscriptionManager(new default_subscription_manager_1.DefaultSubscriptionManager())\n            .bookmarkStore(new memory_bookmark_store_1.MemoryBookmarkStore())\n            .publishStore(new memory_publish_store_1.MemoryPublishStore());\n    };\n    /**\n     * This is a private internal method that parses a string with acks (ex: 'processed,completed') into a list of\n     * predefined ackTypes. Clears bad types, duplicates, etc. Returns an empty list if the ack string is empty, null,\n     * or does not contain any valuable information.\n     * @param {string} ackString the string to parse.\n     * @private\n     * @hidden\n     */\n    Client.parseAcks = function (ackString) {\n        if (typeof ackString !== 'string') {\n            return [];\n        }\n        // non-string, null, undefined, etc.\n        var acksInfo = {\n            received: false,\n            processed: false,\n            completed: false,\n            persisted: false,\n            stats: false\n        };\n        ackString.split(',').map(function (ack) { if (acksInfo[ack] !== undefined) {\n            acksInfo[ack] = true;\n        } });\n        return Object.keys(acksInfo).filter(function (ack) { return acksInfo[ack]; });\n    };\n    /**\n     * This method returns the server version returned by the AMPS server in the logon acknowledgement.\n     * If logon has not been performed yet, returns null.\n     * @returns The version of the AMPS server.\n     */\n    Client.prototype.serverVersion = function () {\n        return this._serverVersion;\n    };\n    /**\n     * This method returns the server version returned by the AMPS server in the logon acknowledgement in a form\n     * of an integer XXYYZZWWW. For example, for 5.2.1.22 will be represented as `050201022`.\n     * If logon has not been performed yet, returns 0.\n     * @returns The version of the AMPS server.\n     */\n    Client.prototype.serverVersionAsInt = function () {\n        return this._serverIntVersion;\n    };\n    /**\n     * This method is a setter/getter for the client's name.\n     * If logon has not been performed yet and the name was not set, returns null.\n     * @param {string} name The name of the AMPS client instance.\n     * @returns The client object if the setter is called. The name of the AMPS\n     * client instance (if any) otherwise.\n     */\n    Client.prototype.name = function (name) {\n        if (name && name.length > 0) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the client name when connected');\n            }\n            this._name = name;\n            return this;\n        }\n        return this._name;\n    };\n    /**\n     * This static method returns a version of the AMPS client.\n     * @returns The version of this AMPS client.\n     */\n    Client.version = function () {\n        return '5.3.0.0.333340.b0dae99';\n    };\n    /**\n     * This is the private method that sends commands to an AMPS server. It's allowed to use it outside for\n     * specific purposes such as custom subscription manager implementations. Please reach our specialists if\n     * you're implementing something like that.\n     *\n     * @param {Header} header The header object to send.\n     * @param {any} data The data to send.\n     * @param {number} timeout The timeout in milliseconds to send the message and get a response.\n     * @private\n     * @hidden\n     */\n    Client.prototype.send = function (header, data, timeout) {\n        var _this = this;\n        if (!this.connection) {\n            throw new Error('Must connect before sending data');\n        }\n        // short circuit - cannot send non-logon commands before connect and logon\n        if (!this._isConnected && header.c !== 'logon') {\n            return;\n        }\n        // set the command timeout, if any\n        if (timeout !== undefined && timeout > 0) {\n            this.timeouts[header.cid] = setTimeout(function () { return _this.onTimeout(header.cid); }, timeout);\n        }\n        // serialize the header\n        var serializedHeader = JSON.stringify(header);\n        var sizeBuffer;\n        // a command without data\n        if (!data) {\n            sizeBuffer = type_helper_1.TypeHelper.littleEndianSizeBuffer(1);\n            // pass the size to the transport filter, if provided\n            if (this._transportFilter) {\n                this._transportFilter(sizeBuffer, true);\n            }\n            this.connection.send(sizeBuffer);\n            // pass data to the transport filter, if provided\n            if (this._transportFilter) {\n                this._transportFilter(serializedHeader, true);\n            }\n            this.connection.send(serializedHeader);\n        }\n        // command with data, probably publish\n        else {\n            // serialize data\n            data = this.typeHelper.serialize(data);\n            sizeBuffer = type_helper_1.TypeHelper.littleEndianSizeBuffer(data.length + 1);\n            // pass the size to the transport filter, if provided\n            if (this._transportFilter) {\n                this._transportFilter(sizeBuffer, true);\n            }\n            this.connection.send(sizeBuffer);\n            // pass data to the transport filter, if provided\n            if (this._transportFilter) {\n                this._transportFilter(serializedHeader, true);\n            }\n            this.connection.send(serializedHeader);\n            for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {\n                var item = data_2[_i];\n                // pass data to the transport filter, if provided\n                if (this._transportFilter) {\n                    this._transportFilter(item, true);\n                }\n                this.connection.send(item);\n            }\n        }\n    };\n    /**\n     * This is the private event that handles the execution of a command that has been timed out.\n     * @param {string} commandId the id of a command to time out.\n     * @private\n     * @hidden\n     */\n    Client.prototype.onTimeout = function (commandId) {\n        this.invokeHandler(commandId, { c: 'timeout', reason: 'The command has been timed out.' });\n        delete this.subscriptions[commandId];\n    };\n    /**\n     * This is a general method that is executed if an error occured. It reports the error to the client's\n     * connect() execution handler.\n     * @param {Error} err the error to report.\n     * @private\n     * @hidden\n     */\n    Client.prototype.onError = function (err) {\n        // Report the general error to the error handler (if any)\n        if (this._errorHandler) {\n            this._errorHandler(err);\n        }\n    };\n    /**\n     * This is a method that is only used with external modules like SubscribeManager. Reports the connection\n     * status of the client.\n     *\n     * @returns The connection status.\n     * @hidden\n     */\n    Client.prototype.isConnected = function () {\n        return this._isConnected;\n    };\n    /**\n     * This is a method that is only used with external modules like SubscribeManager. Provides next available id\n     * for a command/message.\n     *\n     * @returns The sub/command id.\n     * @hidden\n     */\n    Client.prototype.nextSubId = function () {\n        return (this._nextSubId++).toString();\n    };\n    /**\n     * This method replaces a message handler for a subscription. It is only used by a SubscribeManager object.\n     * It is not intended to be used otherwise.\n     *\n     * @param {string} subId The subscription id.\n     * @param {function} messageHandler The message handler function.\n     * @hidden\n     */\n    Client.prototype.setMessageHandler = function (subId, messageHandler) {\n        if (this.subscriptions) {\n            this.subscriptions[subId] = messageHandler;\n        }\n    };\n    /**\n     * This is the command execution interface method that allows to send commands that don't have a convenience\n     * method or require\n     * additional settings that are not provided by the convenience methods.\n     * The purpose of the method is to execute Command objects.\n     *\n     * ```javascript\n     * var subscribeCommand = new amps.Command('subscribe')\n     *   .topic('messages')\n     *   .filter('/id > 20');\n     *\n     * client.execute(subscribeCommand, function(message) {\n     *     console.log('message: ', message.data);\n     * }).then(function(commandId) {\n     *     console.log('commandId: ', commandId);\n     * });\n     * ```\n     * @param {Command} command a Command object.\n     * @param {function} handler a callback to report the messages (including ack messages if they were requested).\n     * @param {number} timeout a timeout value for the command execution in milliseconds.\n     * @returns The promise object fullfilled with the command id created.\n     */\n    Client.prototype.execute = function (command, handler, timeout) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // set the command id and the initial (empty) ack type\n            command.commandId(_this.nextSubId());\n            var systemAckType = '';\n            var notSow = false;\n            var isSubscribe = false;\n            var isPublish = false;\n            switch (command.command()) {\n                case 'subscribe':\n                case 'delta_subscribe':\n                    // bookmarked subscription\n                    if (command.bookmark()) {\n                        // bookmark store\n                        if (_this._bookmarkStore) {\n                            // request persisted ack\n                            systemAckType = 'persisted,';\n                            var bookmark = command.bookmark();\n                            var bmSubId = command.subId() ? command.subId() : command.commandId();\n                            if (bookmark === Client.Bookmarks.MOST_RECENT) {\n                                command.bookmark(_this._bookmarkStore.mostRecent(bmSubId));\n                            }\n                            else if (bookmark !== Client.Bookmarks.NOW && bookmark !== Client.Bookmarks.EPOCH) {\n                                var _message = command.toMessage();\n                                _this._bookmarkStore.log(_message);\n                                _this._bookmarkStore.discard(_message);\n                                _this._bookmarkStore.persisted(bmSubId, _message.bm);\n                            }\n                        }\n                        else if (Client.Bookmarks.MOST_RECENT === command.bookmark()) {\n                            command.bookmark(Client.Bookmarks.EPOCH);\n                        }\n                    }\n                    // This is a non-sow command\n                    notSow = true;\n                /* falls through */\n                case 'sow_and_subscribe':\n                case 'sow_and_delta_subscribe':\n                    if (!command.subId()) {\n                        command.subId(command.commandId());\n                    }\n                    isSubscribe = true;\n                /* falls through */\n                case 'sow':\n                    if (!notSow && !command.queryId()) {\n                        command.queryId(command.subId() ? command.subId() : command.commandId());\n                    }\n                    systemAckType += 'processed';\n                    // for SOW only, we get a completed ack so we know when to remove the handler\n                    if (isSubscribe === false) {\n                        systemAckType += ',completed';\n                    }\n                    // if a custom batchSize value is not set, it is 10 by default for SOW queries\n                    if (!notSow && command.batchSize() === undefined) {\n                        command.batchSize(10);\n                    }\n                    // Assign the handler\n                    _this.makeCommandHandler(handler, resolve, reject, systemAckType, command.ackType(), command.command(), isSubscribe ? (command.queryId() ? command.queryId() : command.subId()) : command.commandId());\n                    break;\n                case 'unsubscribe':\n                    if (!command.subId()) {\n                        command.subId('all');\n                    }\n                    // delete all subscriptions\n                    if (command.subId() === 'all') {\n                        if (_this._subscriptionManager) {\n                            _this._subscriptionManager.clear();\n                        }\n                        _this.subscriptions = {};\n                    }\n                    else {\n                        if (_this._subscriptionManager) {\n                            _this._subscriptionManager.unsubscribe(command.subId());\n                        }\n                        delete _this.subscriptions[command.subId()];\n                    }\n                /* falls through */\n                // The below commands can have ack messages received, even though it can only be in the message handler\n                case 'flush':\n                case 'heartbeat':\n                case 'stop_timer':\n                    systemAckType = 'processed';\n                    /* falls through */\n                    // Assign the handler\n                    _this.makeCommandHandler(handler, resolve, reject, systemAckType, command.ackType(), command.command(), isSubscribe ? command.subId() : command.commandId());\n                    break;\n                case 'sow_delete':\n                case 'delta_publish':\n                case 'publish':\n                    isPublish = true;\n                    // if we have a publish store, persist messages\n                    if (_this._publishStore) {\n                        systemAckType = 'persisted';\n                        // Increment the sequence id for the next publish\n                        _this.sequenceId = _this.sequenceId.next();\n                        command.sequenceId(_this.sequenceId);\n                    }\n                    else {\n                        systemAckType = '';\n                    }\n                    // Assign the handler (fall through) but only if a user requested an acknowledgment\n                    if (command.ackType() !== undefined) {\n                        _this.makeCommandHandler(handler, null, null, '', // never expect any acks for publish/delta publish in the command handler -\n                        // catch only user-requested acks in onMessage\n                        command.ackType(), command.command(), command.commandId());\n                    }\n                    // Resolve right away\n                    resolve(command.commandId());\n                    break;\n                default: break;\n            }\n            // Add user-requested acks (those will be delivered in the message handler as well)\n            if (command.ackType() !== undefined) {\n                command.ackType(systemAckType + ',' + command.ackType());\n            }\n            else if (command.command() !== 'heartbeat') {\n                command.ackType(systemAckType);\n            }\n            // Add credentials in case of the logon command\n            if (command.command() === 'logon') {\n                command.ackType('processed');\n                if (_this._logonCorrelationId) {\n                    command.correlationId(_this._logonCorrelationId);\n                }\n                command.rawHeader().version = Client.version();\n                if (_this._logonOptions) {\n                    command.options(_this._logonOptions);\n                }\n                command.clientName(_this._name);\n                if (_this.username !== undefined) {\n                    command.rawHeader().user_id = _this.username;\n                    if (_this.password !== undefined && _this.password.length) {\n                        command.rawHeader().pw = _this.password;\n                    }\n                }\n                _this.makeCommandHandler(handler, resolve, reject, command.ackType(), '', command.command(), command.commandId());\n            }\n            // store the subscription if we have a subscription manager set\n            if (isSubscribe && _this._subscriptionManager) {\n                _this._subscriptionManager.subscribe(command.rawHeader(), _this.subscriptions[command.commandId()]);\n            }\n            // Send the command\n            try {\n                if (isPublish && _this._publishStore) {\n                    _this._publishStore.store(command.toMessage());\n                }\n                if (_this.connection) {\n                    _this.send(command.rawHeader(), command.data(), timeout);\n                }\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    };\n    /**\n     * This method connects the AMPS client to the server. It automatically calls logon() upon successful connection.\n     * If the [[ServerChooser]] is set, arguments are ignored.\n     *\n     * ```javascript\n     * var client = new amps.Client('my-application');\n     *\n     * client.connect('ws://localhost:9100/amps/json')\n     *     .then(function() {\n     *         // now the client is ready to send and receive any commands\n     *         // ...\n     *     })\n     *     .catch(function(err) {\n     *         console.error('Connection error: ', err);\n     *     });\n     * ```\n     *\n     * @param {string} uri The URI containing all required credentials/addresses/types.\n     * @param {Authenticator} authenticator The authenticator object for custom authentication scenarios.\n     * See [[Authenticator]] for details.\n     * @param {string} logonOptions The logon options, such as `pretty``.\n     * @returns The promise object with the result of fullfilling/failing the connection promise.\n     */\n    Client.prototype.connect = function (uri, authenticator, logonOptions) {\n        var _this = this;\n        var currentAuthenticator;\n        // if there's no server chooser yet, create a default one\n        var noChooser = this._serverChooser === null || this._serverChooser === undefined;\n        if (noChooser) {\n            if (uri) {\n                var chooser = new default_server_chooser_1.DefaultServerChooser();\n                chooser.add(uri, authenticator ? authenticator : new default_authenticator_1.DefaultAuthenticator());\n                this._serverChooser = chooser;\n            }\n            else {\n                throw new Error('No Server Chooser or URI Provided');\n            }\n        }\n        // if there's no delay strategy set\n        if (!this._delayStrategy) {\n            // HAClient mode: if there's no delay strategy assigned, we're gonna use Exponential Delay with defaults\n            if (!noChooser) {\n                this._delayStrategy = new exponential_delay_strategy_1.ExponentialDelayStrategy();\n            }\n            // Else: Classic mode: if there's no chooser and no delay strategy, have classic behavior (don't reconnect)\n        }\n        // set the sequence id\n        this.sequenceId = BigInteger(new Date().getTime().toString() + '000000');\n        /**\n         * This method is called when the delay timer is fired (i.e. it's time to attempt to create a connection).\n         * @ignore\n         */\n        var onDelayTick = function (resolve, reject) {\n            var currentUri = _this._serverChooser.getCurrentURI();\n            currentAuthenticator = _this._serverChooser.getCurrentAuthenticator();\n            if (!currentAuthenticator) {\n                currentAuthenticator = new default_authenticator_1.DefaultAuthenticator();\n            }\n            var parsedURI = helpers_1.Helpers.parseUri(currentUri);\n            // validate the URI\n            var pathComponents = parsedURI.path.split('/');\n            var protocol = pathComponents[1].toLowerCase();\n            var messageType;\n            if (pathComponents.length > 2) {\n                messageType = pathComponents[2];\n            }\n            else {\n                messageType = '';\n            }\n            if (protocol !== 'amps') {\n                throw new Error('Specification of message type requires amps protocol');\n            }\n            // if logon options were supplied\n            if (logonOptions) {\n                _this._logonOptions = logonOptions;\n            }\n            if (!_this._logonOptions) {\n                _this._logonOptions = '';\n            }\n            // parse 'pretty' option (the only one supported ATM)\n            if (parsedURI.queryKey.pretty === 'true' && _this._logonOptions.indexOf('pretty') < 0) {\n                if (_this._logonOptions.length > 0) {\n                    _this._logonOptions += ',pretty';\n                }\n                else {\n                    _this._logonOptions = 'pretty';\n                }\n            }\n            var connectionUri = parsedURI.source.split('?')[0];\n            // Node.js\n            if (helpers_1.IS_NODE || helpers_1.IS_ELECTRON) {\n                var headers = {};\n                if (parsedURI.user.length > 0 || parsedURI.password.length > 0) {\n                    headers.Authorization = 'Basic ' +\n                        new Buffer(parsedURI.user + ':' + parsedURI.password).toString('base64');\n                }\n                _this.connection = new W3WebSocket(connectionUri, null, null, headers, null, {\n                    maxReceivedFrameSize: 0x10000000000,\n                    assembleFragments: true\n                });\n            }\n            // everything else\n            else {\n                _this.connection = new W3WebSocket(connectionUri);\n            }\n            _this.connection.binaryType = 'arraybuffer';\n            _this.typeHelper = type_helper_1.TypeHelper.helper(messageType);\n            _this._isConnected = false;\n            _this.connection.onopen = function () {\n                _this._broadcastStateChange(Client.ConnectionStateListener.Connected);\n                _this.username = parsedURI.user;\n                _this.password = parsedURI.password;\n                try {\n                    _this.connection.send(messageType === 'json' ? 'text' : 'binary');\n                }\n                // at this point onDelayTick has failed, the connection attempt has failed:\n                // there's no need to handle it in any special way since the onclose method\n                // will be called shortly after\n                catch (err) {\n                    return;\n                }\n                // Mark as connected and report success to the chooser, and reset the strategy\n                _this._serverChooser.reportSuccess(_this.connection);\n                if (_this._delayStrategy) {\n                    _this._delayStrategy.reset();\n                }\n                // We're done here\n                resolve();\n            };\n            _this.connection.onclose = function (event) {\n                // onclose can only be called in case of a connection error, otherwise we null it first\n                var reason = event.reason;\n                if (reason.length === 0) {\n                    switch (event.code) {\n                        case 1002:\n                            reason = 'The endpoint is terminating the connection due to a protocol error.';\n                            break;\n                        case 1003:\n                            reason = 'Connection terminated: AMPS received data of a type it cannot accept';\n                            break;\n                        case 1006:\n                            reason = 'Connection Failed';\n                            break;\n                        case 1007:\n                            reason = \"The endpoint is terminating the connection because a message was received that\\n                            contained inconsistent data \";\n                            break;\n                        case 1009:\n                            reason = 'Connection terminated: a data frame was received that is too large.';\n                            break;\n                        case 1011:\n                            reason = \"The server is terminating the connection because it encountered an unexpected\\n                            condition that prevented it from fulfilling the request.\";\n                            break;\n                        default:\n                            reason = 'Unknown error';\n                    }\n                }\n                onConnectionError({ name: event.code.toString(), message: reason }, resolve, reject);\n            };\n            _this.connection.onerror = function (event) { };\n            _this.connection.onmessage = function (message) {\n                // pass the incoming message if the transport filter is set\n                if (_this._transportFilter) {\n                    _this._transportFilter(message, false);\n                }\n                _this.onMessage(message);\n            };\n        };\n        /**\n         * This internal method is called upon a connection error.\n         *\n         * @param {Error} err An error object.\n         * @param {function} resolve Promise-resolving function that needs to be binded to the onDelayTick method.\n         * @param {function} reject Promise-rejecting function that needs to be binded to the onDelayTick method.\n         */\n        var onConnectionError = function (err, resolve, reject) {\n            var wasConnected = _this._isConnected;\n            _this._isConnected = false;\n            // report failure to the chooser\n            _this._serverChooser.reportFailure(err, _this.connection);\n            _this._broadcastStateChange(Client.ConnectionStateListener.Disconnected);\n            // wipe the previous connection object\n            if (_this.connection) {\n                _this.connection.onopen = null;\n                _this.connection.onmessage = null;\n                _this.connection.onerror = null;\n                _this.connection.onclose = null;\n                _this.connection.close();\n            }\n            _this.connection = null;\n            // wipe previous subscriptions\n            _this.subscriptions = {};\n            // reset the state machine\n            _this.messageState = {\n                inGroup: false,\n                currentSow: null,\n                mergedHeader: false,\n                recordsRemaining: 0,\n                publishHeader: null\n            };\n            var onTimeoutInternal;\n            // report disconnection to the disconnect handler instead of reconnecting ourselves\n            if (_this._disconnectHandler) {\n                reject(err);\n                // report to the error handler as well if the connection error occurs after successful connection\n                if (wasConnected) {\n                    _this.onError(err);\n                }\n                return _this._disconnectHandler(_this, err);\n            }\n            // if we were connected before\n            if (wasConnected) {\n                // reconnect\n                onTimeoutInternal = function () { return openConnection().then(beforeLogon).then(logon).then(afterLogon).catch(reject); };\n            }\n            // connecting for the first time or attempting to reconnect\n            else {\n                onTimeoutInternal = onDelayTick.bind(null, resolve, reject);\n            }\n            // attempting to reconnect/connect after a delay\n            try {\n                if (_this._delayStrategy) {\n                    setTimeout(onTimeoutInternal, _this._delayStrategy.getConnectWaitDuration(_this._serverChooser.getCurrentURI()));\n                }\n                else {\n                    throw err;\n                }\n            }\n            // if we're here, that's the RetryTimeExceeded error - that means we're giving up on connecting\n            catch (err) {\n                if (_this._delayStrategy) {\n                    _this._delayStrategy.reset();\n                }\n                // report errors only after successfully connecting at least once\n                if (wasConnected || _this._nextSubId > 2) {\n                    _this.onError(err);\n                }\n                _this.disconnect();\n                reject(err);\n            }\n        };\n        /**\n         * This internal method initiates a new connection.\n         * @ignore\n         */\n        var openConnection = function () {\n            return new Promise(function (resolve, reject) {\n                // classic mode - no autoreconnect\n                if (!_this._delayStrategy) {\n                    onDelayTick(resolve, reject);\n                }\n                else {\n                    setTimeout(function () {\n                        try {\n                            onDelayTick(resolve, reject);\n                        }\n                        // if we're here, that's the critical error - that means we're giving up on connecting\n                        catch (err) {\n                            var error = new Error(err.message + '\\n' + _this._serverChooser.getError());\n                            error.name = err.name;\n                            _this.onError(error);\n                            _this._delayStrategy.reset();\n                            _this.disconnect();\n                            reject(error);\n                        }\n                    }, _this._delayStrategy.getConnectWaitDuration(_this._serverChooser.getCurrentURI()));\n                }\n            });\n        };\n        /**\n         * This internal method is being called right before the logon (mainly in order to use authenticator methods).\n         * @ignore\n         */\n        var beforeLogon = function () {\n            return currentAuthenticator\n                .authenticate(_this.username, _this.password)\n                .then(function (passwordHeader) { return _this.password = passwordHeader; })\n                // if the authentication wasn't successful\n                .catch(function (err) {\n                _this.disconnect();\n                throw err;\n            });\n        };\n        /**\n         * This internal method performs the logon command. Upon result, the promise object will be fullfilled.\n         * of failure.\n         * @ignore\n         */\n        var logon = function () {\n            /**\n             * This internal function is called once the ack for the logon command has been received. It's used for\n             * setting up the serverVersion variable and proceed with the authenticator methods.\n             *\n             * @param {object} message The ack message from the server.\n             * @returns The promise object.\n             * @ignore\n             */\n            var uponLogonAttempt = function (result) {\n                var message = result.message;\n                return new Promise(function (resolve, reject) {\n                    if (message.c === 'ack' && message.a === 'processed') {\n                        switch (message.status) {\n                            case 'success':\n                                if (message.version.indexOf('develop') >= 0) {\n                                    message.version = '5.3.0.0';\n                                }\n                                _this._serverVersion = message.version;\n                                var versionParts = message.version.split('.');\n                                _this._serverIntVersion =\n                                    +(versionParts[0]) * Math.pow(10, 7)\n                                        + +(versionParts[1]) * Math.pow(10, 5)\n                                        + +(versionParts[2]) * Math.pow(10, 3)\n                                        + +(versionParts[3]);\n                                currentAuthenticator.completed(_this.username, _this.password, message.reason ? message.reason : '');\n                                resolve(message);\n                                break;\n                            case 'retry':\n                                currentAuthenticator.retry(message.user_id, message.pw)\n                                    // if the authentication wasn't successful\n                                    .catch(function (err) {\n                                    _this.disconnect();\n                                    throw err;\n                                })\n                                    .then(function (passwordHeader) {\n                                    _this.password = passwordHeader;\n                                    logon().then(resolve).catch(reject);\n                                });\n                                break;\n                            // Failure case\n                            default:\n                                reject(Error(message.reason));\n                        }\n                    }\n                });\n            };\n            return _this.execute(new command_1.Command('logon')).then(uponLogonAttempt);\n        };\n        /**\n         * This internal method is being called upon successful logon. In case of the heartbeat option enabled, it\n         * sets up and intiates the heartbeat protocol.\n         * @ignore\n         */\n        var afterLogon = function (message) {\n            _this._broadcastStateChange(Client.ConnectionStateListener.LoggedOn);\n            // add header methods\n            if (message !== undefined) {\n                message = message_1.Message.fromObject(message);\n            }\n            return new Promise(function (resolve, reject) {\n                _this._isConnected = true;\n                // enable heartbeat mode\n                if (_this._heartbeat) {\n                    establishHeartbeat();\n                }\n                // if we have a subscription manager restore subscriptions\n                if (_this._subscriptionManager) {\n                    _this._subscriptionManager.resubscribe(_this);\n                    _this._broadcastStateChange(Client.ConnectionStateListener.Resubscribed);\n                }\n                // if we have a publish store, it's about time to republish not-persisted-yet messages\n                if (_this._publishStore) {\n                    // there is persistence record for this client, let's catch up\n                    _this._publishStore.discardUpTo(message.header.sequenceId());\n                    // after catching up, here's the new sequence id\n                    var lastPersisted = _this._publishStore.lastPersisted();\n                    if (lastPersisted !== null && _this.sequenceId.compare(lastPersisted) <= 0) {\n                        _this.sequenceId = lastPersisted;\n                    }\n                    var self_1 = _this;\n                    (function replayTry() {\n                        try {\n                            self_1._publishStore.replay(self_1.send.bind(self_1));\n                            self_1._broadcastStateChange(Client.ConnectionStateListener.PublishReplayed);\n                            // reset the ack timeout timer (if set)\n                            if (self_1._ackBatch.ackTimeout) {\n                                clearTimeout(self_1._ackBatch.ackTimeoutTimerId);\n                                self_1._ackBatch.ackTimeoutTimerId = setTimeout(self_1._onAckTimer.bind(self_1), self_1._ackBatch.ackTimeout);\n                            }\n                            // finally resolve\n                            resolve(message);\n                        }\n                        catch (err) {\n                            if (self_1.connection && self_1._isConnected) {\n                                setTimeout(replayTry, 500);\n                            }\n                            // disconnected while replaying (retry again)\n                            else {\n                                onConnectionError(err, resolve, reject);\n                            }\n                        }\n                    })();\n                }\n                else {\n                    // reset the ack timeout timer (if set)\n                    if (_this._ackBatch.ackTimeout) {\n                        clearTimeout(_this._ackBatch.ackTimeoutTimerId);\n                        _this._ackBatch.ackTimeoutTimerId = setTimeout(_this._onAckTimer.bind(_this), _this._ackBatch.ackTimeout);\n                    }\n                    // no publish store set, can just proceed\n                    resolve(message);\n                }\n            });\n        };\n        /**\n         * This function istablishes the heartbeat mode after a successful logon.\n         * @ignore\n         */\n        var establishHeartbeat = function () {\n            _this._heartbeat.onHeartbeatAbsence = function () {\n                if ((new Date().getTime() - _this._heartbeat.timestamp.getTime()) > _this._heartbeat.timeout * 1000) {\n                    // clear all timeouts\n                    clearTimeout(_this._heartbeat.timeoutId);\n                    _this._heartbeat.timestamp = null;\n                    _this._heartbeat.onHeartbeatAbsence = null;\n                    onConnectionError({\n                        name: '4000',\n                        message: 'Heartbeat absence error'\n                    }, function () { }, function () { });\n                }\n            };\n            // Starting from here, we have a heartbeat mode with the server enabled\n            _this._heartbeat.timestamp = new Date();\n            // Initiate the heartbeat procedure\n            _this.execute(new command_1.Command('heartbeat').ackType('received').options('start,' + _this._heartbeat.interval), function (message) {\n                if (message.c === 'ack' && message.a === 'received' && message.status === 'success') {\n                    _this._broadcastStateChange(Client.ConnectionStateListener.HeartbeatInitiated);\n                    // Set heartbeat timeout\n                    if (_this._isConnected && _this._heartbeat) {\n                        _this._heartbeat.timeoutId = setTimeout(_this._heartbeat.onHeartbeatAbsence.bind(_this), _this._heartbeat.timeout * 1000);\n                    }\n                }\n            }).catch(function (err) {\n                _this.onError({\n                    name: '4000',\n                    message: 'Heartbeat connection error'\n                });\n            });\n        };\n        return openConnection().then(beforeLogon).then(logon).then(afterLogon);\n    };\n    Client.prototype.errorHandler = function (errorHandler) {\n        if (typeof errorHandler === 'function') {\n            this._errorHandler = errorHandler;\n            return this;\n        }\n        return this._errorHandler;\n    };\n    /**\n     * This method adds a connection state listener that will be called every time a connection state has been changed.\n     *\n     * ```javascript\n     * var client = new amps.Client();\n     * var listenerId = client.addConnectionStateListener(function(state) {\n     *     console.log('state: ', state);\n     * });\n     *\n     * // ... later\n     * client.removeConnectionStateListener(listenerId);\n     * ```\n     *\n     * @param {function} connectionStateListener The callback function that will be invoked in case of a connection\n     * state change.\n     * @returns The unique monotonically increasing listener id that can be used to remove the listener later.\n     */\n    Client.prototype.addConnectionStateListener = function (connectionStateListener) {\n        if (typeof connectionStateListener === 'function') {\n            this._connectionStateListeners[this._stateListenerId] = connectionStateListener;\n            return this._stateListenerId++;\n        }\n        throw new Error('Invalid connection state listener object was provided');\n    };\n    /**\n     * This method removes a connection state listener with the id provided.\n     *\n     * ```javascript\n     * var client = new amps.Client();\n     * var listenerId = client.addConnectionStateListener(function(state) {\n     *     console.log('state: ', state);\n     * });\n     *\n     * // ... later\n     * client.removeConnectionStateListener(listenerId);\n     * ```\n     *\n     * @param {number} connectionStateListener The callback function that will be invoked in case of a connection\n     * state change.\n     */\n    Client.prototype.removeConnectionStateListener = function (connectionStateListenerId) {\n        if (connectionStateListenerId) {\n            try {\n                delete this._connectionStateListeners[connectionStateListenerId];\n                return;\n            }\n            catch (err) { }\n        }\n        throw new Error('The connection state listener was not found');\n    };\n    Client.prototype.disconnectHandler = function (disconnectHandler) {\n        if (disconnectHandler !== undefined && typeof disconnectHandler === 'function') {\n            this._disconnectHandler = disconnectHandler;\n            return this;\n        }\n        return this._disconnectHandler;\n    };\n    Client.prototype.transportFilter = function (transportFilter) {\n        if (transportFilter !== undefined && typeof transportFilter === 'function') {\n            this._transportFilter = transportFilter;\n            return this;\n        }\n        return this._transportFilter;\n    };\n    /**\n     * This method sets up the heartbeat mode with the server. It sends a command to AMPS that starts or refreshes\n     * a heartbeat timer. When a heartbeat timer is active, AMPS publishes periodic heartbeat messages to AMPS and\n     * expects the client to respond with a heartbeat message. If the client does not provide a heartbeat within the\n     * time specified, AMPS logs an error and disconnects the connection.\n     *\n     * ```javascript\n     * // Initialize a client with the heartbeat of 5 seconds\n     * var client = new amps.Client().heartbeat(5);\n     * ```\n     *\n     * @param {number} interval the heartbeat value in seconds.\n     * @param {number} timeout the timeout value in seconds. By default it is the heartbeat interval value times 2.\n     * @returns The Client object.\n     */\n    Client.prototype.heartbeat = function (interval, timeout) {\n        // Set up the default timeout value\n        if (timeout === undefined) {\n            timeout = interval * 2;\n        }\n        this._heartbeat = {\n            interval: interval,\n            timeout: timeout\n        };\n        return this;\n    };\n    Client.prototype.logonOptions = function (logonOptions) {\n        // setter mode\n        if (logonOptions !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the logon options when connected');\n            }\n            this._logonOptions = logonOptions;\n            return this;\n        }\n        return this._logonOptions;\n    };\n    Client.prototype.serverChooser = function (serverChooser) {\n        // setter mode\n        if (serverChooser !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the server chooser when connected');\n            }\n            this._serverChooser = serverChooser;\n            return this;\n        }\n        return this._serverChooser;\n    };\n    Client.prototype.delayStrategy = function (delayStrategy) {\n        // setter mode\n        if (delayStrategy !== undefined) {\n            this._delayStrategy = delayStrategy;\n            return this;\n        }\n        return this._delayStrategy;\n    };\n    /**\n     * This method sets a reconnection delay for the client. This is a convenience method that sets up a\n     * [[FixedDelayStrategy]] with a requested delay value.\n     *\n     * ```javascript\n     * // create a client and set a reconnect delay\n     * var client = new amps.Client().reconnectDelay(5000);\n     * ```\n\n     * @param {number} delay=200 The delay between reconnection attempts in milliseconds.\n     * @returns The client object.\n     * @see [[Client.delayStrategy]] for more flexible controls over reconnection logic.\n     */\n    Client.prototype.reconnectDelay = function (delay) {\n        if (delay === void 0) { delay = 200; }\n        this._delayStrategy = new fixed_delay_strategy_1.FixedDelayStrategy((delay >= 0) ? delay : 200);\n        return this;\n    };\n    Client.prototype.subscriptionManager = function (subscriptionManager) {\n        if (subscriptionManager !== undefined) {\n            this._subscriptionManager = subscriptionManager;\n            return this;\n        }\n        return this._subscriptionManager;\n    };\n    Client.prototype.logonCorrelationId = function (logonCorrelationId) {\n        if (logonCorrelationId !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the logon correlation id when connected');\n            }\n            this._logonCorrelationId = logonCorrelationId;\n            return this;\n        }\n        return this._logonCorrelationId;\n    };\n    Client.prototype.publishStore = function (publishStore) {\n        if (publishStore !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the publish store when connected');\n            }\n            this._publishStore = publishStore;\n            return this;\n        }\n        return this._publishStore;\n    };\n    Client.prototype.bookmarkStore = function (bookmarkStore) {\n        if (bookmarkStore !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the bookmark store when connected');\n            }\n            this._bookmarkStore = bookmarkStore;\n            return this;\n        }\n        return this._bookmarkStore;\n    };\n    Client.prototype.autoAck = function (autoAck) {\n        if (autoAck !== undefined) {\n            this._autoAck = autoAck;\n            // Kill the ack timer (if any)\n            clearTimeout(this._ackBatch.ackTimeoutTimerId);\n            // connected and just enabled auto acking\n            if (this._isConnected && this._autoAck && this._ackBatch.ackTimeout) {\n                this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), this._ackBatch.ackTimeout);\n            }\n            return this;\n        }\n        return this._autoAck;\n    };\n    Client.prototype.ackBatchSize = function (ackBatchSize) {\n        var _this = this;\n        if (typeof ackBatchSize === 'number') {\n            if (ackBatchSize < 0) {\n                throw new Error('Invalid acknowledgement batch size value');\n            }\n            this._ackBatch.ackBatchSize = ackBatchSize;\n            // if auto ack is enabled\n            if (this._autoAck) {\n                // if we're connected\n                if (this._isConnected) {\n                    // if the size of batch is full enough, let's ack the batches\n                    Object.keys(this._ackBatch.toAck).map(function (topic) {\n                        var currentBookmarks = _this._ackBatch.toAck[topic] || [];\n                        if (_this._ackBatch.ackBatchSize <= currentBookmarks.length) {\n                            _this._ack(topic);\n                        }\n                    });\n                }\n                // If no ackTimeout set, and the batch size > 1, establish the default timeout value (1000)\n                if (ackBatchSize > 1 && this._ackBatch.ackTimeout === undefined) {\n                    this._ackBatch.ackTimeout = 1000;\n                    if (this._isConnected) {\n                        // since we're connected and just established a new timeout value, start timer as well\n                        clearTimeout(this._ackBatch.ackTimeoutTimerId);\n                        this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), 1000);\n                    }\n                }\n            }\n            return this;\n        }\n        return this._ackBatch.ackBatchSize;\n    };\n    Client.prototype.ackTimeout = function (ackTimeout) {\n        if (typeof ackTimeout === 'number') {\n            if (ackTimeout < 0) {\n                throw new Error('Invalid acknowledgment batch timeout value');\n            }\n            this._ackBatch.ackTimeout = ackTimeout;\n            // kill the previous timer (if any)\n            clearTimeout(this._ackBatch.ackTimeoutTimerId);\n            // start calling the onAckTick method with the new timeout value\n            if (this._autoAck && this._isConnected && ackTimeout > 0) {\n                this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), ackTimeout);\n            }\n            return this;\n        }\n        return this._ackBatch.ackTimeout;\n    };\n    /**\n     * This method disconnects the client from an AMPS server (if the connection existed).\n     * @returns The promise object.\n     */\n    Client.prototype.disconnect = function () {\n        var _this = this;\n        this._broadcastStateChange(Client.ConnectionStateListener.Shutdown);\n        return new Promise(function (resolve, reject) {\n            var destroyConnection = function () {\n                _this._isConnected = false;\n                // take care of heartbeat\n                if (_this._heartbeat) {\n                    clearTimeout(_this._heartbeat.timeoutId);\n                    _this._heartbeat.timestamp = null;\n                    delete _this._heartbeat.onHeartbeatAbsence;\n                    _this._heartbeat = null;\n                }\n                // delete all timeouts\n                for (var timeoutId in _this.timeouts) {\n                    clearTimeout(_this.timeouts[timeoutId]);\n                    delete _this.timeouts[timeoutId];\n                }\n                // delete all subscriptions\n                for (var subId in _this.subscriptions) {\n                    delete _this.subscriptions[subId];\n                }\n                // reset message state machine\n                _this.messageState = {\n                    inGroup: false,\n                    currentSow: null,\n                    mergedHeader: false,\n                    recordsRemaining: 0,\n                    publishHeader: null\n                };\n                // reset next id\n                _this._nextSubId = 1;\n                // reset the to ack map\n                _this._ackBatch.toAck = {};\n                // if still connected\n                if (_this.connection) {\n                    // null connection-related stuff\n                    _this.username = null;\n                    _this.password = null;\n                    _this.connection.onclose = null;\n                    _this.connection.onopen = null;\n                    _this.connection.onerror = null;\n                    // close the connection\n                    _this.connection.close(1000, 'Disconnect from the client');\n                    _this.connection = null;\n                }\n                _this.sequenceId = null;\n                _this._serverChooser = null;\n                _this._delayStrategy = null;\n                _this.subscriptionManager = null;\n                // resolve the promise\n                resolve();\n            };\n            // reset ack batch settings\n            _this._autoAck = false;\n            _this._ackBatch.ackBatchSize = 0;\n            clearTimeout(_this._ackBatch.ackTimeoutTimerId);\n            _this._ackBatch.ackTimeout = undefined;\n            // send the acks that are not sent yet\n            var ackTopics = Object.keys(_this._ackBatch.toAck);\n            if (ackTopics.length > 0) {\n                var ackCommandsSent = 0;\n                for (var _i = 0, ackTopics_1 = ackTopics; _i < ackTopics_1.length; _i++) {\n                    var topic = ackTopics_1[_i];\n                    ackCommandsSent += _this._ack(topic);\n                }\n                if (ackCommandsSent > 0) {\n                    _this.flush().then(function () { return destroyConnection(); }).catch(reject);\n                }\n                else {\n                    destroyConnection();\n                }\n            }\n            else {\n                destroyConnection();\n            }\n        });\n    };\n    /**\n     * This method performs the publish command.\n     * The publish command is the primary way to inject messages into the AMPS processing stream. A publish command\n     * received by AMPS will be forwarded to other connected clients with matching subscriptions.\n     *\n     * ```javascript\n     * client.publish('topic', {id: 1});\n     * ```\n     *\n     * @param {string} topic the topic to publish data.\n     * @param data the data to publish to a topic.\n     * @param {object} params an object with params, like: &#123;expiration: 30, ...&#125;\n     */\n    Client.prototype.publish = function (topic, data, params) {\n        this._publishInternal('publish', topic, data, params);\n    };\n    /**\n     * This method delta publishes a message to a SOW topic.\n     *\n     * ```javascript\n     * client.deltaPublish('topic', {id: 1, text: 'Hello, World'});\n     * ```\n     *\n     * @param {string} topic the topic to publish data.\n     * @param data the data to publish to a topic.\n     * @param {object} params an object with params, like: &#123;expiration: 30, ...&#125;\n     */\n    Client.prototype.deltaPublish = function (topic, data, params) {\n        this._publishInternal('delta_publish', topic, data, params);\n    };\n    /**\n     * This method performs the __flush__ command. It sends a command to AMPS that returns an acknowledgement when all\n     * previous messages from this client have been received and processed. This command helps applications that use\n     * AMPS determine when AMPS has received all of the messages that have been sent, making it safe for the client\n     * to exit.\n     *\n     * ```javascript\n     * client.publish('topic', {id: 1});\n     * client.publish('topic', {id: 2});\n     * client.flush().then(...).catch(...);\n     * ```\n     *\n     * @param {number} timeout the flush timeout in milliseconds.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    Client.prototype.flush = function (timeout) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.execute(new command_1.Command('flush').ackType('completed').clientName(_this._name), function (message) {\n                if (message.c === 'ack' && message.a === 'completed' && message.status === 'success') {\n                    resolve();\n                }\n                else {\n                    reject(new Error(message.reason));\n                }\n            }, timeout).catch(reject);\n        });\n    };\n    /**\n     * This method performs the __subscribe__ command. The __subscribe__ command is the primary way to retrieve messages\n     * from the AMPS processing stream. A client can issue a __subscribe__ command on a topic to receive all published\n     * messages to that topic in the future. Additionally, content filtering can be used to choose which messages the\n     * client is interested in receiving.\n     *\n     * ```javascript\n     * client.subscribe(function(message) { console.log(message); }, 'topic')\n     *     .then(function(subscriptionId) { console.log(subscriptionId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in subscribe.\n     * @param {string} filter The filter argument in subscribe.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    Client.prototype.subscribe = function (onMessage, topic, filter, params) {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler argument in subscribe must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in subscribe must be a string, not a \"' + (typeof filter) + '\"';\n        }\n        return this.execute(new command_1.Command('subscribe')\n            .topic(topic)\n            .filter(filter)\n            .addParams(params), onMessage);\n    };\n    /**\n     * This method performs the __sow__ command. The __sow__ command is use to query the contents of a previously\n     * defined SOW Topic. A __sow__ command can be used to query an entire SOW Topic, or a filter can be used to further\n     * refine the results found inside a SOW Topic. For more information, see the State of the World and SOW Queries\n     * chapters in the AMPS User Guide.\n     *\n     * ```javascript\n     * client.sow(function(message) { console.log(message); }, 'sow-topic')\n     *     .then(function(subscriptionId) { console.log(subscriptionId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns  The Promise object with the results of execution of the command.\n     */\n    Client.prototype.sow = function (onMessage, topic, filter, params) {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in sow must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler argument in sow must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow must be a string, not a \"' + (typeof filter) + '\"';\n        }\n        return this.execute(new command_1.Command('sow')\n            .topic(topic)\n            .filter(filter)\n            .addParams(params), onMessage);\n    };\n    /**\n     * This method performs the __sow_and_subscribe__ command. A __sow_and_subscribe__ command is used to combine the\n     * functionality of __sow__ and a __subscribe__ command in a single command. The __sow_and_subscribe__ command is\n     * used\n     *\n     * * to query the contents of a SOW topic (this is the __sow__ command); and\n     * * to place a subscription such that any messages matching the subscribed SOW topic and query filter will\n     *      be published to the AMPS client (this is the __subscribe__ command). As with the __subscribe__ command,\n     *      publish messages representing updates to SOW records will contain only information that has changed.\n     *\n     * ```javascript\n     * client.sowAndSubscribe(function(message) { ... }, 'sow-topic')\n     *     .then(function(subId) { console.log(subId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    Client.prototype.sowAndSubscribe = function (onMessage, topic, filter, params) {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_and_subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler arg in sow_and_subscribe must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow_and_subscribe must be a string, not a \"' + (typeof filter) + '\"';\n        }\n        return this.execute(new command_1.Command('sow_and_subscribe')\n            .topic(topic)\n            .filter(filter)\n            .addParams(params), onMessage);\n    };\n    /**\n     * This method performs the __delta_subscribe__ command. The __delta_subscribe__ command is like the __subscribe__\n     * command except that subscriptions placed through __delta_subscribe__ will receive only messages that have changed\n     * between the SOW record and the new update. If __delta_subscribe__ is used on a record which does not currently\n     * exist in the SOW or if it is used on a topic which does not have a SOW-topic store defined, then\n     * __delta_subscribe__ behaves like a __subscribe__ command.\n     *\n     * ```javascript\n     * client.deltaSubscribe(function(message) { ... }, 'topic')\n     *     .then(function(subId) { console.log(subId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    Client.prototype.deltaSubscribe = function (onMessage, topic, filter, params) {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in delta_subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler arg in delta_subscribe must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in delta_subscribe be a string, not a \"' + (typeof filter) + '\"';\n        }\n        return this.execute(new command_1.Command('delta_subscribe')\n            .topic(topic)\n            .filter(filter)\n            .addParams(params), onMessage);\n    };\n    /**\n     * This method performs the __sow_and_delta_subscribe__ command.\n     * A __sow_and_delta_subscribe__ command is used to combine the functionality of commands __sow__ and a\n     * __delta_subscribe__ in a single command. The __sow_and_delta_subscribe__ command is used\n     *\n     * * to query the contents of a SOW topic (this is the __sow__ command); and\n     * * to place a subscription such that any messages matching the subscribed SOW topic and query filter\n     *   will be published to the AMPS client (this is the __delta_subscribe__ command).\n     *\n     * As with the __delta_subscribe__ command, publish messages representing updates to SOW records will contain only\n     * the information that has changed. If a __sow_and_delta_subscribe__ is issued on a record that does not currently\n     * exist in the SOW topic, or if it is used on a topic that does not have a SOW-topic store defined,\n     * then a __sow_and_delta_subscribe__ will behave like a __sow_and_subscribe__ command.\n     *\n     * ```javascript\n     * client.sowAndDeltaSubscribe(function(message) { ... }, 'sow-topic')\n     *     .then(function(subId) { console.log(subId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    Client.prototype.sowAndDeltaSubscribe = function (onMessage, topic, filter, params) {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_and_delta_subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler arg in sow_and_delta_subscribe must be a function, not a \"' +\n                (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow_and_delta_subscribe must be a string, not a \"' + (typeof filter) + '\"';\n        }\n        return this.execute(new command_1.Command('sow_and_delta_subscribe')\n            .topic(topic)\n            .filter(filter)\n            .addParams(params), onMessage);\n    };\n    /**\n     * This method performs the unsubscribe command. The unsubscribe command unsubscribes the client from the topic\n     * which messages the client is is no more interested in receiving. If not subscription id is provided, the client\n     * will unsubscribe from all subscriptions.\n     *\n     * ```javascript\n     * client.unsubscribe();  // unsubscribe from all\n     * client.unsubscribe('123');\n     * ```\n     *\n     * @param {string} subId The id of the subscription.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    Client.prototype.unsubscribe = function (subId) {\n        if (subId === undefined || subId === null) {\n            subId = 'all';\n        }\n        if (typeof subId !== 'string') {\n            throw 'The subId argument in unsubscribe must be a string, not a \"' + (typeof subId) + '\"';\n        }\n        return this.execute(new command_1.Command('unsubscribe').subId(subId).ackType('received'));\n    };\n    Client.prototype.ack = function (topicOrMessage, bookmark, options) {\n        // data required\n        var topic;\n        // message case\n        if (typeof topicOrMessage !== 'string') {\n            // if it's not a queue message, simply do nothing\n            if (topicOrMessage.lp === undefined) {\n                return;\n            }\n            topic = topicOrMessage.t;\n            // In this case, options is actually in the bookmark field\n            options = bookmark;\n            bookmark = topicOrMessage.bm;\n        }\n        // topic/bookmark case\n        else if (typeof topicOrMessage === 'string') {\n            topic = topicOrMessage;\n            if (typeof bookmark !== 'string') {\n                throw 'The bookmark argument in ack() must be a string, not a \"' + (typeof bookmark) + '\"';\n            }\n        }\n        else {\n            throw 'Either a message object or a topic and bookmark strings should be provided in ack()';\n        }\n        // if there's no topic or bookmark -- there's nothing to acknowledge\n        if (topic === undefined || topic.length === 0 || bookmark === undefined || bookmark.length === 0) {\n            return;\n        }\n        // if the batch size is 0 or 1, or it has options, then ack() the message right away\n        if (this._ackBatch.ackBatchSize <= 1 || (typeof options === 'string' && options.length > 0)) {\n            var command = new command_1.Command('sow_delete').topic(topic).bookmark(bookmark);\n            // We have options, let's append them\n            if (typeof options === 'string' && options.length > 0) {\n                command.options(options);\n            }\n            this.execute(command);\n        }\n        else {\n            // add the new bookmark to the list of bookmarks to ack for this topic\n            var bookmarks = this._ackBatch.toAck[topic];\n            if (bookmarks === undefined) {\n                bookmarks = [];\n                this._ackBatch.toAck[topic] = bookmarks;\n            }\n            bookmarks.push(bookmark);\n            // Enough messages in the batch, let's ack\n            if (bookmarks.length >= this._ackBatch.ackBatchSize) {\n                this._ack(topic);\n            }\n        }\n    };\n    /**\n     * This method executes a SOW delete with a filter.\n     *\n     * ```javascript\n     * client\n     *     .sowDelete('sow-topic', '/status = \"obsolete\"')\n     *     .then(function(message) {\n     *         console.log(message.header.ackType(), ': ',  message.header.status());\n     *     });\n     * ```\n     *\n     * @param {string} topic The topic to execute the SOW delete against.\n     * @param {string} filter The filter. To delete all records, set a filter that is always true: `1 = 1`\n     * @param {string} options A comma separated list of values indicating additional processing options.\n     * @returns {Promise<Message>} The promise object with the results of execution of the command.\n     */\n    Client.prototype.sowDelete = function (topic, filter, options) {\n        var _this = this;\n        if (topic === undefined || topic === null || topic === '') {\n            throw 'A non-null, defined, non-empty topic argument must be provided';\n        }\n        else if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_delete must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (filter === undefined || filter === null || filter === '') {\n            throw 'A non-null, defined, non-empty filter argument must be provided';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow_delete must be a string, not a \"' + (typeof filter) + '\"';\n        }\n        return new Promise(function (resolve, reject) {\n            // build the command object\n            var command = new command_1.Command('sow_delete').topic(topic).filter(filter).ackType('stats');\n            // Assign options, if any\n            if (options !== undefined && options !== null) {\n                command.options(options);\n            }\n            _this.execute(command, resolve).catch(reject);\n        });\n    };\n    /**\n     * This method deletes a message from a SOW, using data supplied to locate a SOW entry with matching keys.\n     *\n     * ```javascript\n     * var topic = sowMessage.header.topic();\n     * var data = sowMessage.data;\n     *\n     * client\n     *     .sowDeleteByData(topic, data)\n     *     .then(function(message) {\n     *         console.log(message.header.ackType(), ': ',  message.header.status());\n     *     });\n     * ```\n     *\n     * @param {string} topic The topic to execute the SOW delete against.\n     * @param {any} data The A message data whose keys match the message to be deleted in the server’s SOW.\n     * @returns {Promise<Message>} The promise object with the results of execution of the command.\n     */\n    Client.prototype.sowDeleteByData = function (topic, data) {\n        var _this = this;\n        if (topic === undefined || topic === null || topic === '') {\n            throw 'A non-null, defined, non-empty topic argument must be provided';\n        }\n        else if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_delete must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (data === undefined || data === null || data === '') {\n            throw 'A non-null, defined, non-empty data argument must be provided';\n        }\n        return new Promise(function (resolve, reject) {\n            _this.execute(new command_1.Command('sow_delete').topic(topic).data(data).ackType('stats'), resolve).catch(reject);\n        });\n    };\n    /**\n     * This method executes a SOW delete with sow keys (supplied as a comma-separated values in a string). SOW keys are\n     * provided in the header of a SOW message, and are the internal identifier AMPS uses for that SOW message.\n     *\n     * ```javascript\n     * var topic = sowMessage1.header.topic();\n     * var keys = sowMessage1.header.sowKey() + ',' + sowMessage2.header.sowKey();\n     *\n     * client\n     *     .sowDeleteByKeys(topic, keys)\n     *     .then(function(message) {\n     *         console.log(message.header.ackType(), ': ',  message.header.status());\n     *     });\n     * ```\n     *\n     * @param {string} topic The topic to execute the SOW delete against.\n     * @param {string} keys A comma separated list of SOW keys to be deleted. SOW keys are provided in the header of\n     * a SOW message, and are the internal identifier AMPS uses for that SOW message.\n     * @returns {Promise<Message>} The promise object with the results of execution of the command.\n     */\n    Client.prototype.sowDeleteByKeys = function (topic, keys) {\n        var _this = this;\n        if (topic === undefined || topic === null || topic === '') {\n            throw 'A non-null, defined, non-empty topic argument must be provided';\n        }\n        else if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_delete must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (keys === undefined || keys === null || keys === '') {\n            throw 'A non-null, defined, non-empty keys argument must be provided';\n        }\n        else if (typeof keys !== 'string') {\n            throw 'The keys argument in sow_delete must be a string, not a \"' + (typeof keys) + '\"';\n        }\n        return new Promise(function (resolve, reject) {\n            _this.execute(new command_1.Command('sow_delete').topic(topic).sowKeys(keys).ackType('stats'), resolve).catch(reject);\n        });\n    };\n    // static data\n    Client.seqRegex = /\"s\":(\\d+),/;\n    Client.maxBacklogRegex = /max_backlog=(\\d+)/;\n    Client.Bookmarks = {\n        MOST_RECENT: 'recent',\n        EPOCH: '0',\n        NOW: '0|1|'\n    };\n    Client.ConnectionStateListener = {\n        Disconnected: 0,\n        Shutdown: 1,\n        Connected: 2,\n        LoggedOn: 4,\n        PublishReplayed: 8,\n        HeartbeatInitiated: 16,\n        Resubscribed: 32,\n        UNKNOWN: 16834\n    };\n    return Client;\n}());\nexports.Client = Client;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BigInteger = __webpack_require__(0);\nvar header_1 = __webpack_require__(1);\n/**\n * The Command class encapsulates the AMPS Command entity. The JavaScript client sends [[Command]] objects to the server\n * and receives [[Message]] objects from the server.\n */\nvar Command = /** @class */ (function () {\n    /**\n     * @param {string} command The name of the command.\n     */\n    function Command(command) {\n        this._data = null;\n        if (Command.commandTypes.indexOf(command) < 0) {\n            throw new Error('Invalid command name');\n        }\n        this.header = new header_1.Header();\n        this.header.c = command;\n    }\n    /**\n     * This method returns the 'raw' header of the command as an object with key-value pairs.\n     * @hidden\n     */\n    Command.prototype.rawHeader = function () { return this.header; };\n    /**\n     * This method returns a command converted into a message.\n     * @hidden\n     */\n    Command.prototype.toMessage = function () {\n        var message = this.header;\n        if (this._data) {\n            message.data = this._data;\n        }\n        return message;\n    };\n    Command.prototype.command = function (value) {\n        if (value !== undefined) {\n            if (Command.commandTypes.indexOf(value) < 0) {\n                throw new Error('Invalid command name');\n            }\n            this.header.c = value;\n            return this;\n        }\n        return this.header.c;\n    };\n    Command.prototype.commandId = function (value) {\n        if (value !== undefined) {\n            this.header.cid = value;\n            return this;\n        }\n        return this.header.cid;\n    };\n    Command.prototype.queryId = function (value) {\n        if (value !== undefined) {\n            this.header.query_id = value;\n            return this;\n        }\n        return this.header.query_id;\n    };\n    Command.prototype.subId = function (value) {\n        if (value !== undefined) {\n            this.header.sub_id = value;\n            return this;\n        }\n        return this.header.sub_id;\n    };\n    Command.prototype.ackType = function (value) {\n        if (value !== undefined) {\n            this.header.a = value;\n            return this;\n        }\n        return this.header.a;\n    };\n    Command.prototype.data = function (value) {\n        if (value !== undefined) {\n            this._data = value;\n            return this;\n        }\n        return this._data;\n    };\n    Command.prototype.topN = function (value) {\n        if (value !== undefined) {\n            this.header.top_n = value;\n            return this;\n        }\n        return this.header.top_n;\n    };\n    Command.prototype.batchSize = function (value) {\n        if (value !== undefined) {\n            this.header.bs = value;\n            return this;\n        }\n        return this.header.bs;\n    };\n    Command.prototype.topic = function (value) {\n        if (value !== undefined) {\n            this.header.t = value;\n            return this;\n        }\n        return this.header.t;\n    };\n    Command.prototype.filter = function (value) {\n        if (value !== undefined) {\n            this.header.filter = value;\n            return this;\n        }\n        return this.header.filter;\n    };\n    Command.prototype.bookmark = function (value) {\n        if (value !== undefined) {\n            this.header.bm = value;\n            return this;\n        }\n        return this.header.bm;\n    };\n    Command.prototype.options = function (value) {\n        if (value !== undefined) {\n            this.header.o = value;\n            return this;\n        }\n        return this.header.o;\n    };\n    Command.prototype.correlationId = function (value) {\n        if (value !== undefined) {\n            this.header.x = value;\n            return this;\n        }\n        return this.header.x;\n    };\n    Command.prototype.orderBy = function (value) {\n        if (value !== undefined) {\n            this.header.orderby = value;\n            return this;\n        }\n        return this.header.orderby;\n    };\n    Command.prototype.sowKey = function (value) {\n        if (value !== undefined) {\n            this.header.k = value;\n            return this;\n        }\n        return this.header.k;\n    };\n    Command.prototype.sowKeys = function (value) {\n        if (value !== undefined) {\n            this.header.sow_keys = value;\n            return this;\n        }\n        return this.header.sow_keys;\n    };\n    Command.prototype.expiration = function (value) {\n        if (value !== undefined) {\n            this.header.e = value;\n            return this;\n        }\n        return this.header.e;\n    };\n    Command.prototype.clientName = function (value) {\n        if (value !== undefined) {\n            this.header.client_name = value;\n            return this;\n        }\n        return this.header.client_name;\n    };\n    Command.prototype.sequenceId = function (value) {\n        if (value !== undefined) {\n            this.header.s = value.toString();\n            return this;\n        }\n        return BigInteger(this.header.s);\n    };\n    Command.prototype.subIds = function (value) {\n        if (value !== undefined) {\n            this.header.sids = value;\n            return this;\n        }\n        return this.header.sids;\n    };\n    /**\n     * Parses an object with params into a set of command parameters. For example,\n     * an object &#123; expiration: 30, filter: '/age > 20' &#125; will be equivalent to make a command using\n     * new amps.Command().expiration(30).filter('/age > 20');\n     * @param {object} [params] An object with params.\n     * @returns {Command} The updated Command object.\n     * @hidden\n     */\n    Command.prototype.addParams = function (params) {\n        if (params === null || params === undefined) {\n            return this;\n        }\n        var paramKeys = Object.keys(params);\n        for (var i = 0; i < paramKeys.length; ++i) {\n            var param = paramKeys[i];\n            try {\n                this[param](params[param]);\n            }\n            catch (err) {\n                throw new Error('Parameter \"' + param + '\" not found.');\n            }\n        }\n        return this;\n    };\n    /**\n     * This method creates and returns a deep copy of the command Header data.\n     * @returns {Header} The deep copy of command header.\n     * @hidden\n     */\n    Command.prototype.headerCopy = function () {\n        var header = new header_1.Header();\n        header.c = this.header.c.slice(0);\n        for (var key in this.header) {\n            header[key] = (typeof this.header[key] === 'string') ? this.header[key].slice(0) : this.header[key];\n        }\n        return header;\n    };\n    Command.commandTypes = [\n        'logon',\n        'publish',\n        'delta_publish',\n        'subscribe',\n        'delta_subscribe',\n        'sow',\n        'sow_and_subscribe',\n        'sow_and_delta_subscribe',\n        'sow_delete',\n        'unsubscribe',\n        'flush',\n        'heartbeat',\n        'start_timer',\n        'stop_timer'\n    ];\n    return Command;\n}());\nexports.Command = Command;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is a simple server chooser that implements the [[ServerChooser]] interface. It keeps a list of AMPS instance\n * URIs and Authenticators, and advances to the next one when a failure occurs. You can add any number of URIs to the\n * [[DefaultServerChooser]].\n *\n * *To use the [[DefaultServerChooser]], you add the URIs for the server to choose from, then set the chooser to the\n * [[Client]]:*\n *\n * ```javascript\n * var chooser = new amps.DefaultServerChooser();\n * chooser.add('wss://server:9005/amps/nvfix');\n * chooser.add('wss://server-two:9005/amps/nvfix');\n *\n * var client = new amps.Client('showchooser');\n * client.serverChooser(chooser);\n *\n * client\n *     .connect()\n *     .then(...)\n *     .catch(...);\n * ```\n */\nvar DefaultServerChooser = /** @class */ (function () {\n    /**\n     * This is the constructor for the [[DefaultServerChooser ]] class.\n     */\n    function DefaultServerChooser() {\n        this.servers = [];\n        this.index = 0;\n        this.error = null;\n    }\n    /**\n     * This method adds a URI and an optional authenticator for [[Client]] to choose from.\n     *\n     * ```javascript\n     * chooser.add('wss://server:9005/amps/json');\n     * chooser.add('wss://another_server:9006/amps/json', myAuthenticator);\n     * ```\n     *\n     * @param {string} uri The URI of the server.\n     * @param {Authenticator} authenticator The authenticator object for custom authentication scenarios.\n     * @returns {DefaultServerChooser} The server chooser object.\n     */\n    DefaultServerChooser.prototype.add = function (uri, authenticator) {\n        if (authenticator === void 0) { authenticator = null; }\n        if (uri.length === 0) {\n            throw new Error('Invalid URI');\n        }\n        this.servers.push({ uri: uri, authenticator: authenticator });\n        return this;\n    };\n    /**\n     * This method allows to add as many server choosers as needed. The arguments can be either uri strings or objects\n     * that contain uri key, and optionally, the authenticator key.\n     *\n     * ```javascript\n     * chooser.addAll(\n     *     'wss://server:9005/amps/json',\n     *     {uri: 'wss://extra_server:9007/amps/json'},\n     *     {uri: 'wss://another_server:9003/amps/json', authenticator: myAuthenticator}\n     * );\n     * ```\n     *\n     * @param {...(string | ChooserItem)} options either uri strings or objects that contain uri key, and optionally,\n     * the authenticator key.\n     * @returns {DefaultServerChooser} The server chooser object.\n     */\n    DefaultServerChooser.prototype.addAll = function () {\n        var options = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            options[_i] = arguments[_i];\n        }\n        for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {\n            var option = options_1[_a];\n            if (!option) {\n                throw new Error('Invalid URI option');\n            }\n            if (typeof option === 'string') {\n                this.add(option);\n            }\n            else {\n                this.add(option.uri, option.authenticator);\n            }\n        }\n        return this;\n    };\n    /**\n     * This method returns the current URI chosen. If no URI was chosen yet, returns null.\n     *\n     * @returns {string} The current URI chosen (if any).\n     */\n    DefaultServerChooser.prototype.getCurrentURI = function () {\n        return (this.servers.length > 0) ? this.servers[this.index].uri : null;\n    };\n    /**\n     * This method returns the current authenticator chosen. If no authenticator was chosen yet, returns null.\n     *\n     * @returns {Authenticator} The current authenticator chosen (if any).\n     */\n    DefaultServerChooser.prototype.getCurrentAuthenticator = function () {\n        return (this.servers.length > 0) ? this.servers[this.index].authenticator : null;\n    };\n    /**\n     * This method is invoked by the [[Client]] to indicate a connection failure occurred.\n     *\n     * @param {Error} error An error object containing an error message.\n     * @param {any} connectionInfo An object of properties associated with the failed connection.\n     */\n    DefaultServerChooser.prototype.reportFailure = function (error, connectionInfo) {\n        this.error = error;\n        // advancing the index to the next position\n        this.index = (this.index + 1) % this.servers.length;\n    };\n    /**\n     * This method is invoked by the [[Client]] to indicate a connection attempt was successful.\n     *\n     * @param {any} connectionInfo An object of properties associated with the successful connection.\n     */\n    DefaultServerChooser.prototype.reportSuccess = function (connectionInfo) {\n        this.error = null;\n    };\n    /**\n     * This method provides additional detail to be included in an exception thrown by when the AMPS instance(s) are not\n     * available. Called by the [[Client]] when creating an exception.\n     *\n     * @returns {string} A string with information about the connection that failed and the reason for the failure.\n     * When no further information is available, returns an empty string.\n     */\n    DefaultServerChooser.prototype.getError = function () { return this.error ? this.error.message : ''; };\n    return DefaultServerChooser;\n}());\nexports.DefaultServerChooser = DefaultServerChooser;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar header_1 = __webpack_require__(1);\n/**\n * [[DefaultSubscriptionManager]] is used to resubscribe and manage client subscriptions in case of a unintended\n * disconnection.\n *\n * ```javascript\n * // create a client\n * let client = new amps.Client('my-client');\n *\n * // Create and assign the subscription manager\n * client.subscriptionManager(new amps.DefaultSubscriptionManager());\n *\n * // ... access the subscription manager later\n * client.subscriptionManager().clear();\n * ```\n */\nvar DefaultSubscriptionManager = /** @class */ (function () {\n    /**\n     * This is the constructor for the DefaultSubscriptionManager class.\n     * @param {number} resubscriptionTimeout The maximum time (milliseconds) for the Resubscription to timeout. If\n     * it is equal to zero, it never times out.\n     */\n    function DefaultSubscriptionManager(_resubscriptionTimeout) {\n        if (_resubscriptionTimeout === void 0) { _resubscriptionTimeout = 0; }\n        var _this = this;\n        this._resubscriptionTimeout = _resubscriptionTimeout;\n        /**\n         * This is the internal method that wraps the resubscribe logic per subscription so that the public\n         * resubscribe() method looks clear and concise.\n         * @private\n         * @hidden\n         */\n        this.resubscribeInternal = function (subId, client, subscription) {\n            var hasOptions = subscription.header.o !== undefined;\n            // make sure we're not sending 'replace' again\n            if (hasOptions) {\n                subscription.header.o = subscription.header.o.replace(/replace,?/g, '');\n            }\n            // bookmark subscription\n            if (subscription.header.bm) {\n                // if paused, subscribe with the most recent bookmark\n                if (!hasOptions || subscription.header.o.indexOf('pause') < 0) {\n                    // get the most recent bookmark from bookmark store and assign it as a new bm value\n                    subscription.header.bm = client.bookmarkStore().mostRecent(subscription.header.sub_id);\n                }\n            }\n            // assign a command id (should increase)\n            subscription.header.cid = client.nextSubId();\n            // send the subscription command\n            client.setMessageHandler(subId, subscription.handler);\n            client.send(subscription.header, undefined, _this._resubscriptionTimeout);\n        };\n        // Detect negative value and short circuit in this case\n        if (_resubscriptionTimeout < 0) {\n            throw new Error('Invalid value: Cannot use negative argument values');\n        }\n        this.activeSubs = {};\n        this.resumedSubs = {};\n        this.resubscribing = false;\n    }\n    /**\n     * This method performs the subscription to a topic.\n     *\n     * @param {Header} header The subscription command header with all command data.\n     * @param {function} messageHandler The message handler callback function. Not required in case of 'replace' or\n     * 'pause' subscriptions.\n     */\n    DefaultSubscriptionManager.prototype.subscribe = function (header, messageHandler) {\n        // short circuit\n        if (!header || (header.sub_id === undefined && header.sids === undefined)) {\n            return;\n        }\n        // copy the command object\n        header = DefaultSubscriptionManager.copyHeader(header);\n        // have options, such as oof, replace, etc\n        if (header.o) {\n            var subIds = header.sub_id + (header.sids ? ',' + header.sids : '').split(',');\n            // subscription header with a 'resume' option set - add it to the 'resumed' subscriptions list\n            if (header.o.indexOf('resume') >= 0) {\n                for (var _i = 0, subIds_1 = subIds; _i < subIds_1.length; _i++) {\n                    var subId = subIds_1[_i];\n                    if (!this.resumedSubs[subId]) {\n                        this.resumedSubs[subId] = {\n                            header: header,\n                            handler: messageHandler\n                        };\n                    }\n                }\n                return;\n            }\n            // subscription header with a 'pause' option set - remove it from the 'resumed' list, set 'pause' flag\n            // for any existing subscriptions in the 'active' list\n            else if (header.o.indexOf('pause') >= 0) {\n                for (var _a = 0, subIds_2 = subIds; _a < subIds_2.length; _a++) {\n                    var subId = subIds_2[_a];\n                    // if we have a resumed sub, remove it\n                    if (this.resumedSubs[subId]) {\n                        delete this.resumedSubs[subId];\n                    }\n                    if (this.activeSubs[subId]) {\n                        // if there's no 'replace' option set\n                        if (header.o.indexOf('replace') < 0) {\n                            var currentSubOptions = this.activeSubs[subId].o;\n                            this.activeSubs[subId].o = (currentSubOptions ? 'pause,' + currentSubOptions : 'pause');\n                            continue;\n                        }\n                        else {\n                            messageHandler = this.activeSubs[subId].handler;\n                        }\n                    }\n                    this.activeSubs[subId] = {\n                        header: header,\n                        handler: messageHandler\n                    };\n                }\n                return;\n            }\n        }\n        // subscriptions without options\n        var existingSubscription = this.activeSubs[header.sub_id];\n        if (existingSubscription) {\n            messageHandler = existingSubscription.handler;\n        }\n        // store the subscription\n        this.activeSubs[header.sub_id] = {\n            header: header,\n            handler: messageHandler\n        };\n    };\n    /**\n     * This method unsubcribes from a topic using the subscription id.\n     *\n     * @param {string} subId The subscription id.\n     */\n    DefaultSubscriptionManager.prototype.unsubscribe = function (subId) {\n        delete this.activeSubs[subId];\n        delete this.resumedSubs[subId];\n    };\n    /**\n     * This method clears all the managed subscriptions so that in case of the disconnection there will be no\n     * subscriptions to restore.\n     */\n    DefaultSubscriptionManager.prototype.clear = function () {\n        this.activeSubs = {};\n        this.resumedSubs = {};\n    };\n    /**\n     * This method sets/gets the resubscription timeout value. It should be bigger or equal to zero. If it\n     * is equal to zero, it never times out.\n     *\n     * @param {number} timeout The timeout value (in milliseconds).\n     * @returns {number} The subscription timeout.\n     */\n    DefaultSubscriptionManager.prototype.resubscriptionTimeout = function (timeout) {\n        if (timeout === void 0) { timeout = 0; }\n        if (timeout !== undefined) {\n            if (typeof timeout !== 'number' || timeout < 0) {\n                throw new Error('Invalid value');\n            }\n            this._resubscriptionTimeout = timeout;\n        }\n        return this._resubscriptionTimeout;\n    };\n    /**\n     * This method resubscribes to all the stored subscriptions using the [[Client]] object provided.\n     *\n     * @param {Client} client The AMPS client object. It must be connected.\n     */\n    DefaultSubscriptionManager.prototype.resubscribe = function (client) {\n        var _this = this;\n        // short circuit\n        if (client === undefined || client === null || !client || !client.isConnected()) {\n            throw new Error('A connected client must be provided');\n        }\n        this.resubscribing = true;\n        // send active, then resumed subs\n        Object.keys(this.activeSubs).map(function (subId) { _this.resubscribeInternal(subId, client, _this.activeSubs[subId]); });\n        Object.keys(this.resumedSubs).map(function (subId) { _this.resubscribeInternal(subId, client, _this.resumedSubs[subId]); });\n        this.resubscribing = false;\n    };\n    /**\n     * This is a deep copy method (in order to preserve the message headers).\n     *\n     * @param {Header} header The command header to copy.\n     * @returns {Header} The copy of the original object.\n     * @private\n     * @hidden\n     */\n    DefaultSubscriptionManager.copyHeader = function (obj) {\n        var copiedObj = new header_1.Header();\n        copiedObj.c = obj.c.slice(0);\n        Object.keys(obj).map(function (key) {\n            copiedObj[key] = (typeof obj[key] === 'string') ? obj[key].slice(0) : obj[key];\n        });\n        return copiedObj;\n    };\n    return DefaultSubscriptionManager;\n}());\nexports.DefaultSubscriptionManager = DefaultSubscriptionManager;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * [[ExponentialDelayStrategy]] is an implementation that exponentially backs off when reconnecting to the same server,\n * with a maximum time to retry before it gives up entirely.\n *\n * ```javascript\n * // create the strategy with all default values\n * var strategy = new amps.ExponentialDelayStrategy();\n *\n * // set jitter to 3.5, and keep other parameters default\n * var strategy = new amps.ExponentialDelayStrategy({jitter: 3.5});\n *\n * // set all params as arguments...\n * var strategy = new amps.ExponentialDelayStrategy(400, 25000, 1.5, 0, 2.5);\n *\n * // ... or using the object with values\n * var strategy = new amps.ExponentialDelayStrategy({\n *     initialDelay: 400,\n *     maximumDelay: 25000,\n *     backoffExponent: 1.5,\n *     maximumRetryTime: 0,\n *     jitter: 2.5\n * });\n *\n * // ... or using setter methods\n * var strategy = new amps.ExponentialDelayStrategy()\n *     .initialDelay(400)\n *     .maximumDelay(25000)\n *     .backoffExponent(1.5)\n *     .maximumRetryTime(0)\n *     .jitter(2.5);\n *\n *  // Setters can also be used after initialization of the strategy to change values dynamically\n * });\n * ```\n */\nvar ExponentialDelayStrategy = /** @class */ (function () {\n    function ExponentialDelayStrategy(initialDelayOrParams, maximumDelay, backoffExponent, maximumRetryTime, jitter) {\n        if (maximumDelay === void 0) { maximumDelay = 20000; }\n        if (backoffExponent === void 0) { backoffExponent = 2.0; }\n        if (maximumRetryTime === void 0) { maximumRetryTime = 0; }\n        if (jitter === void 0) { jitter = 1.0; }\n        this.firstUri = null;\n        this.recentUri = null;\n        this.currentUri = null;\n        this.currentDelay = -1;\n        // Treat the first argument as a the object with values\n        if (typeof initialDelayOrParams !== 'number' && initialDelayOrParams) {\n            maximumDelay = initialDelayOrParams.maximumDelay;\n            backoffExponent = initialDelayOrParams.backoffExponent;\n            maximumRetryTime = initialDelayOrParams.maximumRetryTime;\n            jitter = initialDelayOrParams.jitter;\n            initialDelayOrParams = initialDelayOrParams.initialDelay;\n        }\n        // set values\n        this._initialDelay = (typeof initialDelayOrParams !== 'number' ? 200 : initialDelayOrParams);\n        this._maximumDelay = (typeof maximumDelay !== 'number' ? 20000 : maximumDelay);\n        this._backoffExponent = (typeof backoffExponent !== 'number' ? 2.0 : backoffExponent);\n        this._maximumRetryTime = (typeof maximumRetryTime !== 'number' ? 0 : maximumRetryTime);\n        this._jitter = (typeof jitter !== 'number' ? 1.0 : jitter);\n        // Detect negative values and short circuit in this case\n        if (this._initialDelay < 0 ||\n            this._maximumDelay < 0 ||\n            this._backoffExponent < 0 ||\n            this._maximumRetryTime < 0 ||\n            this._jitter < 0) {\n            throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR);\n        }\n        // initialize state variables\n        this.reset();\n    }\n    /**\n     * This method sets the time (in milliseconds) to wait before reconnecting to a server for the first time after\n     * a failed connection.\n     *\n     * @param {number} initialDelay The time (in milliseconds) to wait before reconnecting to a server for the\n     * first time after a failed connection.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    ExponentialDelayStrategy.prototype.initialDelay = function (initialDelay) {\n        if (initialDelay === void 0) { initialDelay = 200; }\n        if (initialDelay < 0) {\n            throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR);\n        }\n        this._initialDelay = initialDelay;\n        this.currentDelay = this._initialDelay;\n        return this;\n    };\n    /**\n     * This method sets the maximum time to wait between any reconnection attempts.\n     * Exponential backoff will not exceed this maximum.\n     *\n     * @param {number} maximumDelay The maximum time to wait for any reconnect attempt (milliseconds).\n     * Exponential backoff will not exceed this maximum.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    ExponentialDelayStrategy.prototype.maximumDelay = function (maximumDelay) {\n        if (maximumDelay === void 0) { maximumDelay = 20000; }\n        if (maximumDelay < 0) {\n            throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR);\n        }\n        this._maximumDelay = maximumDelay;\n        return this;\n    };\n    /**\n     *  This method sets the exponent to use for calculating the next delay time. For example if the initial time is\n     *  200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.\n     *\n     * @param {number} backoffExponent The exponent to use for calculating the next delay time. For example, if\n     * the initial time is 200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    ExponentialDelayStrategy.prototype.backoffExponent = function (backoffExponent) {\n        if (backoffExponent === void 0) { backoffExponent = 2.0; }\n        if (backoffExponent < 0) {\n            throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR);\n        }\n        this._backoffExponent = backoffExponent;\n        return this;\n    };\n    /**\n     * This method sets the time (in millseconds) to allow reconnect attempts to continue without a successful\n     * connection, before \"giving up\" and abandoning the connection attempt. 0 means never give up.\n     *\n     * @param {number} maximumRetryTime The maximum time (milliseconds) to allow econnect attempts to continue\n     * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client\n     * never gives up.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    ExponentialDelayStrategy.prototype.maximumRetryTime = function (maximumRetryTime) {\n        if (maximumRetryTime === void 0) { maximumRetryTime = 0; }\n        if (maximumRetryTime < 0) {\n            throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR);\n        }\n        this._maximumRetryTime = maximumRetryTime;\n        return this;\n    };\n    /**\n     * This method sets the jitter factor used to add randomness to the delay time. Jitter is represented as a multiple\n     * of the initial delay time;\n     * a random number from `[ 0, (JITTER * INITIAL_DELAY) )` is added to nonzero time delays.\n     *\n     * @param {number} jitter The amount of 'jitter' to apply when calculating a delay time, measured in\n     * multiples of the initial delay. Jitter is used to reduce the number of simultaneous reconnects that may be\n     * issued from multiple clients.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    ExponentialDelayStrategy.prototype.jitter = function (jitter) {\n        if (jitter === void 0) { jitter = 1.0; }\n        if (jitter < 0) {\n            throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR);\n        }\n        this._jitter = jitter;\n        return this;\n    };\n    /**\n     * This method returns the time (in milliseconds) that the client should delay before connecting to the given\n     * server URI.\n     *\n     * @param {string} uri The URI of the server.\n     * @returns {number} The time (in milliseconds) that the client should delay.\n     */\n    ExponentialDelayStrategy.prototype.getConnectWaitDuration = function (uri) {\n        var currentTime = new Date().getTime();\n        // exceeded time check\n        if (this._maximumRetryTime > 0) {\n            // maximum retry time is exceeded\n            if (this.startTime >= 0 && this._maximumRetryTime <= (currentTime - this.startTime)) {\n                throw new Error('Maximum Retry Time Exceeded');\n            }\n        }\n        var finalValue;\n        // next server in the chain or the first launch - return 0\n        if (uri !== this.recentUri && uri !== this.firstUri) {\n            // first launch\n            if (!this.firstUri) {\n                this.firstUri = uri;\n                this.startTime = currentTime;\n            }\n            finalValue = 0;\n        }\n        // wrapped circle or the same server again - return a new non-zero value\n        else {\n            // calculate the delay\n            this.currentDelay = (this.currentDelay < 0) ?\n                this._initialDelay :\n                Math.min(this._maximumDelay, (this.currentDelay * this._backoffExponent));\n            // calculate the jittered value\n            finalValue = Math.round(this.currentDelay + Math.random() * this._jitter * this._initialDelay);\n            // adjust it if it's too big by mirroring the delta: ex: 15005 => 14995\n            if (finalValue > this._maximumDelay) {\n                finalValue = 2 * this._maximumDelay - finalValue;\n                // make sure the final value is not smaller than the minimum delay (in case of a huge jitter value)\n                if (finalValue < this._initialDelay) {\n                    finalValue = this._initialDelay;\n                }\n            }\n        }\n        // next this will be the recent uri\n        this.recentUri = uri;\n        return finalValue;\n    };\n    /**\n     * This method resets the state of this reconnect delay. AMPS calls this method when a connection is established.\n     */\n    ExponentialDelayStrategy.prototype.reset = function () {\n        this.startTime = -1;\n        this.firstUri = null;\n        this.recentUri = null;\n        this.currentUri = null;\n        this.currentDelay = -1;\n    };\n    ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR = 'Invalid value(s): Cannot use negative argument values';\n    return ExponentialDelayStrategy;\n}());\nexports.ExponentialDelayStrategy = ExponentialDelayStrategy;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * [[FixedDelayStrategy]] is a reconnect delay strategy implementation that waits a fixed amount of time before retrying\n * a connection.\n *\n * ```javascript\n * // create the fixed strategy with all default values\n * var strategy = new amps.FixedDelayStrategy();\n *\n * // set the maximum retry time to 15 seconds, leave the default delay value\n * var strategy = new amps.FixedDelayStrategy({maximumRetryTime: 15000});\n *\n * // set all params as arguments...\n * var strategy = new amps.FixedDelayStrategy(2000, 45000);\n *\n * // ... or using the object with values\n * var strategy = new amps.FixedDelayStrategy({\n *     delay: 2000,\n *     maximumRetryTime: 45000\n * });\n * ```\n */\nvar FixedDelayStrategy = /** @class */ (function () {\n    function FixedDelayStrategy(delayOrParams, maximumRetryTime) {\n        if (maximumRetryTime === void 0) { maximumRetryTime = 0; }\n        // Treat the first argument as a the object with values\n        if (typeof delayOrParams !== 'number' && delayOrParams) {\n            maximumRetryTime = delayOrParams.maximumRetryTime;\n            delayOrParams = delayOrParams.delay;\n        }\n        // set values\n        this.delay = (typeof delayOrParams !== 'number' ? 200 : delayOrParams);\n        this.maximumRetryTime = (typeof maximumRetryTime !== 'number' ? 0 : maximumRetryTime);\n        // Detect negative values and short circuit in this case\n        if (this.delay < 0 || this.maximumRetryTime < 0) {\n            throw new Error('Invalid value(s): Cannot use negative argument values');\n        }\n        // initialize other internal variables\n        this.reset();\n    }\n    /**\n     * This method returns the time (in milliseconds) that the client should delay before connecting to the given\n     * server URI.\n     *\n     * @param {string} uri The URI of the server.\n     * @returns {number} The time (in milliseconds) that the client should delay.\n     */\n    FixedDelayStrategy.prototype.getConnectWaitDuration = function (uri) {\n        var currentTime = new Date().getTime();\n        // exceeded time check\n        if (this.maximumRetryTime > 0) {\n            // maximum retry time is exceeded\n            if (this.startTime >= 0 && this.maximumRetryTime <= (currentTime - this.startTime)) {\n                throw new Error('Maximum Retry Time Exceeded');\n            }\n        }\n        var finalValue;\n        // next server in the chain or the first launch - return 0\n        if (uri !== this.recentUri && uri !== this.firstUri) {\n            // first launch\n            if (!this.firstUri) {\n                this.firstUri = uri;\n                this.startTime = currentTime;\n            }\n            finalValue = 0;\n        }\n        else {\n            finalValue = this.delay;\n        }\n        // next this will be the recent uri\n        this.recentUri = uri;\n        return finalValue;\n    };\n    /**\n     * This method resets the state of this reconnect delay. AMPS calls this method when a connection is established.\n     */\n    FixedDelayStrategy.prototype.reset = function () {\n        this.startTime = -1;\n        this.firstUri = null;\n        this.recentUri = null;\n    };\n    return FixedDelayStrategy;\n}());\nexports.FixedDelayStrategy = FixedDelayStrategy;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BigInteger = __webpack_require__(0);\nvar client_1 = __webpack_require__(2);\n/**\n * This is the internal class that encapsulates a bookmark object (which consists of a publisher id and a sequence\n * number).\n *\n * @param {string} rawBookmark The string of a format: \"10357694053628526720|1490901822670001000|\".\n * @returns {Bookmark} the bookmark object.\n * @private\n */\nvar Bookmark = /** @class */ (function () {\n    function Bookmark(rawBookmark) {\n        this.pubId = null;\n        this.sequenceNumber = null;\n        this.discarded = false;\n        this.raw = rawBookmark;\n        if (rawBookmark.length > 1) {\n            // regular bookmark\n            if (rawBookmark.charAt(rawBookmark.length - 1) === '|') {\n                var parts = rawBookmark.split('|');\n                this.pubId = parts[0];\n                this.sequenceNumber = BigInteger(parts[1]);\n            }\n            // ELSE: Timestamp bookmark\n        }\n        else {\n            this.sequenceNumber = BigInteger.zero;\n        }\n    }\n    return Bookmark;\n}());\nvar Subscription = /** @class */ (function () {\n    function Subscription(noPersAcks) {\n        if (noPersAcks === void 0) { noPersAcks = false; }\n        // internal data\n        this.publishers = {};\n        this._bookmarks = [];\n        this.bookmarkMap = {};\n        this.lastPersisted = new Bookmark('0');\n        this.lastDiscarded = null;\n        this._noPersistedAcks = noPersAcks;\n    }\n    Subscription.prototype.bookmarks = function () {\n        return this._bookmarks;\n    };\n    Subscription.prototype.persisted = function (rawBookmark) {\n        var bookmark = new Bookmark(rawBookmark);\n        if (this.lastPersisted &&\n            !this._noPersistedAcks &&\n            bookmark.pubId === this.lastPersisted.pubId &&\n            bookmark.sequenceNumber.lesserOrEquals(this.lastPersisted.sequenceNumber)) {\n            return;\n        }\n        this.lastPersisted = bookmark;\n    };\n    Subscription.prototype.isDiscarded = function (message) {\n        var bmIndex = this.bookmarkMap[message.bm];\n        // if we have the index for this bookmark already\n        if (bmIndex !== undefined) {\n            var bookmark = this._bookmarks[bmIndex];\n            // found the bookmark and it's not discarded\n            if (bookmark && !bookmark.discarded) {\n                return false;\n            }\n            if (!bookmark) {\n                delete this.bookmarkMap[message.bm];\n            }\n            return true;\n        }\n        // parse the message bookmark in order to have pubId and SeqNo and check if we have it stored in publishers\n        var messageBookmark = new Bookmark(message.bm);\n        var publisherSeqNo = this.publishers[messageBookmark.pubId];\n        if (publisherSeqNo === undefined || publisherSeqNo.lesser(messageBookmark.sequenceNumber)) {\n            this.publishers[messageBookmark.pubId] = messageBookmark.sequenceNumber;\n            return false;\n        }\n        // last attempt - trying to find it in the list of bookmarks\n        for (var i = 0; i < this._bookmarks.length; i++) {\n            var currentBookmark = this._bookmarks[i];\n            // found it!\n            if (currentBookmark &&\n                currentBookmark.pubId === messageBookmark.pubId &&\n                currentBookmark.sequenceNumber.equals(messageBookmark.sequenceNumber)) {\n                return currentBookmark.discarded;\n            }\n        }\n        // tried everything at this point, so it's discarded for sure\n        return true;\n    };\n    Subscription.prototype.mostRecent = function () {\n        var _this = this;\n        this.updateBookmarkMap();\n        var useLastDiscarded = this.lastDiscarded !== null;\n        var useLastPersisted = this.lastPersisted !== null;\n        if (useLastDiscarded) {\n            if (this._bookmarks.length && useLastPersisted) {\n                useLastDiscarded = false;\n            }\n            else {\n                // Only use one if they are the same publisher\n                if (useLastPersisted && (this.lastPersisted.pubId === this.lastDiscarded.pubId)) {\n                    useLastPersisted = this.lastPersisted.sequenceNumber.lesser(this.lastDiscarded.sequenceNumber);\n                    useLastDiscarded = !useLastPersisted;\n                }\n            }\n        }\n        // build the most recent list\n        var recentList = '';\n        if (useLastDiscarded) {\n            recentList += this.lastDiscarded.raw;\n        }\n        // If we don't have a last persisted or a last discarded OR we are expecting persisted acks but haven't\n        // received one yet, then we should try to build a list of bookmarks based on publishers we have seen\n        // so far, if any, or return EPOCH value.\n        var publisherKeys = Object.keys(this.publishers);\n        if ((!useLastPersisted && !useLastDiscarded) ||\n            (this.lastPersisted && this.lastPersisted.raw === client_1.Client.Bookmarks.EPOCH)) {\n            if (publisherKeys.length === 0) {\n                // Set last persisted to EPOCH and return it\n                if (this.lastPersisted === null) {\n                    this.lastPersisted = new Bookmark(client_1.Client.Bookmarks.EPOCH);\n                }\n                return this.lastPersisted.raw;\n            }\n            if (recentList.length > 0) {\n                recentList = '';\n            }\n            // build and return the bookmark list from the publishers map\n            var publisherBookmarksList = publisherKeys.map(function (key) {\n                return key + '|' + _this.publishers[key].toString() + '|';\n            }).join(',');\n            if (recentList.length > 0) {\n                recentList += ',';\n            }\n            recentList += publisherBookmarksList;\n            return recentList;\n        }\n        if (useLastPersisted) {\n            if (recentList.length > 0) {\n                recentList += ',';\n            }\n            recentList += this.lastPersisted.raw;\n        }\n        return recentList;\n    };\n    Subscription.prototype.log = function (rawBookmark) {\n        var bmIndex = this.bookmarkMap[rawBookmark];\n        if (bmIndex !== undefined) {\n            return this._bookmarks[bmIndex].sequenceNumber;\n        }\n        // add the bookmark as a parsed object\n        var bookmark = new Bookmark(rawBookmark);\n        this._bookmarks.push(bookmark);\n        // obtain its index and store in the map\n        bmIndex = this._bookmarks.length - 1;\n        this.bookmarkMap[rawBookmark] = bmIndex;\n        return bookmark.sequenceNumber;\n    };\n    Subscription.prototype.discard = function (rawBookmark) {\n        var bmIndex = this.bookmarkMap[rawBookmark];\n        if (bmIndex === undefined) {\n            return;\n        }\n        var currentBookmark = this._bookmarks[bmIndex];\n        currentBookmark.discarded = true;\n        // if this message is the first in the list, find all discarded messages in the row, make the new \n        // lastDiscarded value and remove all previous entries in the list\n        // Ex: [D-1, D-2, D-3, D-4, D-5, N, N, N, D, N] => [N, N, N, D, N], lastDiscarded = 5\n        if (bmIndex === 0) {\n            var cutUpto = 0;\n            while (currentBookmark.discarded &&\n                (!this.lastPersisted && this._noPersistedAcks ||\n                    currentBookmark.sequenceNumber.lesserOrEquals(this.lastPersisted.sequenceNumber)) &&\n                cutUpto < this._bookmarks.length) {\n                currentBookmark = this._bookmarks[cutUpto++];\n                this.lastDiscarded = currentBookmark;\n            }\n            this._bookmarks.splice(0, cutUpto);\n            this.updateBookmarkMap();\n        }\n    };\n    Subscription.prototype.noPersistedAcks = function () {\n        this._noPersistedAcks = true;\n    };\n    // internal methods\n    Subscription.prototype.updateBookmarkMap = function () {\n        this.bookmarkMap = {};\n        for (var i = 0; i < this._bookmarks.length; i++) {\n            var bookmark = this._bookmarks[i];\n            if (bookmark) {\n                this.bookmarkMap[bookmark.raw] = i;\n            }\n        }\n    };\n    return Subscription;\n}());\n/**\n * Bookmark store is used by the [[Client]] to provide resumable subscriptions and client-side duplicate message\n * handling using in-memory storage.\n *\n * ```javascript\n * // create the bookmark store\n * var bookmarkStore = new amps.MemoryBookmarkStore();\n *\n * // create the client instance and assign the bookmark store to it\n * var client = new amps.Client('my-client');\n * client.bookmarkStore(bookmarkStore);\n *\n * // ... access the bookmark store later\n * client.bookmarkStore().purge();\n * ```\n */\nvar MemoryBookmarkStore = /** @class */ (function () {\n    function MemoryBookmarkStore() {\n        // Internal state\n        this.subscriptionsInfo = {};\n    }\n    /**\n     * This method is called internally by the [[Client]] to log a bookmark to the persistent log.\n     *\n     * @param {Message} message The message to bookmark.\n     * @returns {BigInteger} The corresponding bookmark sequence number for this bookmark.\n     */\n    MemoryBookmarkStore.prototype.log = function (message) {\n        return this.findSubscription(message.sub_id ? message.sub_id : message.sids).log(message.bm);\n    };\n    MemoryBookmarkStore.prototype.discard = function (messageOrSubId, bookmark) {\n        // single argument: message\n        if (typeof messageOrSubId !== 'string') {\n            if (messageOrSubId.s === undefined) {\n                bookmark = messageOrSubId.bm;\n                if (!bookmark) {\n                    throw new Error('Invalid bookmark value has been provided');\n                }\n            }\n            messageOrSubId = (messageOrSubId.sub_id ? messageOrSubId.sub_id : messageOrSubId.sids);\n        }\n        this.findSubscription(messageOrSubId).discard(bookmark);\n    };\n    /**\n     * This method is called when you want to return the most recent bookmark from the log that ought to be used for\n     * (re-)subscriptions.\n     *\n     * @param {string} subId The subscription id.\n     * @returns {string} The most recent bookmark.\n     */\n    MemoryBookmarkStore.prototype.mostRecent = function (subId) {\n        return this.findSubscription(subId).mostRecent();\n    };\n    /**\n     * This method is called for each arriving message to determine if the application has already processed and\n     * discarded this message. Returns 'true' if the bookmark is in the log and marked as discarded and should therefore\n     * not be reprocessed. Otherwise, returns 'false'. Generally, isDiscarded is called by the\n     * [[Client]] however, if needed it can be called by the application as well.\n     *\n     * @param {Message} message The message to check.\n     * @returns {boolean} `true` if the bookmark is in the log and marked as discarded and should therefore\n     * not be reprocessed. Otherwise, returns `false`.\n     */\n    MemoryBookmarkStore.prototype.isDiscarded = function (message) {\n        return this.findSubscription((message.sub_id ? message.sub_id : message.sids)).isDiscarded(message);\n    };\n    /**\n     * This method is called when you want to purge the contents of this store. If the subId is not provided, removes\n     * any tracking history associated with publishers and received messages. Otherwise, removes history for that subId\n     * only.\n     *\n     * @param {string} subId The identifier of the subscription to purge.\n     */\n    MemoryBookmarkStore.prototype.purge = function (subId) {\n        if (subId !== undefined) {\n            delete this.subscriptionsInfo[subId];\n        }\n        else {\n            this.subscriptionsInfo = {};\n        }\n    };\n    /**\n     * This method is called when you want to retrieve the sequence number of the oldest bookmark in the store.\n     *\n     * @param {string} subId The identifier of the subscription.\n     * @returns {BigInteger} The sequence number of the oldest bookmark in the store. 0 if not found/doesn't exist\n     */\n    MemoryBookmarkStore.prototype.oldestBookmarkSeq = function (subId) {\n        try {\n            return this.findSubscription(subId).bookmarks()[0].sequenceNumber;\n        }\n        catch (err) { }\n        return BigInteger(0);\n    };\n    /**\n     * This method is called internally by the [[Client]] to mark a message as safely persisted by AMPS to all of its\n     * sync replication destinations.\n     *\n     * @param {string} subId The identifier of the subscription.\n     * @param {string} bookmark A raw bookmark string.\n     */\n    MemoryBookmarkStore.prototype.persisted = function (subId, bookmark) {\n        this.findSubscription(subId).persisted(bookmark);\n    };\n    /**\n     * This method notifies the bookmark store that the subscription won't receive persisted acks.\n     *\n     * @param {string} subId The subscription id.\n     */\n    MemoryBookmarkStore.prototype.noPersistedAcks = function (subId) {\n        this.findSubscription(subId).noPersistedAcks();\n    };\n    // internal methods\n    MemoryBookmarkStore.prototype.findSubscription = function (subId) {\n        var subscription = this.subscriptionsInfo[subId];\n        if (!subscription) {\n            // create new subscription record\n            subscription = new Subscription();\n            this.subscriptionsInfo[subId] = subscription;\n        }\n        return subscription;\n    };\n    return MemoryBookmarkStore;\n}());\nexports.MemoryBookmarkStore = MemoryBookmarkStore;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BigInteger = __webpack_require__(0);\n/**\n * [[MemoryPublishStore]] represents the default implementation of the in-memory publish store. The AMPS client uses\n * publish stores for recovery purposes. The store is responsible for maintaining the state of published messages and\n * recovering that state in the event of a disconnection.\n */\nvar MemoryPublishStore = /** @class */ (function () {\n    function MemoryPublishStore() {\n        this.messageQueue = [];\n        this._lastPersisted = null;\n        this._lowestUnpersisted = null;\n    }\n    /**\n     * Store the provided message. The sequence of the message is a key that the client can later use to replay the\n     * operation or remove the operation from the store. Implementations may assume that the sequence increases\n     * monotonically.\n     *\n     * @param {Message} message The message that contains fields like command name, topic name, data, etc.\n     */\n    MemoryPublishStore.prototype.store = function (message) {\n        // Validation first\n        if (message.c !== 'publish' && message.c !== 'delta_publish' && message.c !== 'sow_delete') {\n            throw new Error('Invalid message type to store');\n        }\n        if (this.messageQueue.length > 0 &&\n            this.messageQueue[this.messageQueue.length - 1].sequence.compare(message.s) >= 0) {\n            // Invalid: sequence is not increasing\n            throw new Error('Sequence id is not increasing');\n        }\n        // store the message\n        this.messageQueue.push({ sequence: BigInteger(message.s), header: message, data: message.data });\n        // remove data field from message\n        delete message.data;\n    };\n    /**\n     * This method replays all messages in the store using the provided message sender.\n     *\n     * @param {function} messageSender The sender that will re-send the messages.\n     */\n    MemoryPublishStore.prototype.replay = function (messageSender) {\n        for (var _i = 0, _a = this.messageQueue; _i < _a.length; _i++) {\n            var messageItem = _a[_i];\n            messageSender(messageItem.header, messageItem.data);\n        }\n    };\n    /**\n     * This method replays the message with the specified sequenceId.\n     *\n     * @param {function} messageSender The sender that will re-send the message.\n     * @param {BigInteger} sequenceId The sequence id of the message to replay.\n     */\n    MemoryPublishStore.prototype.replaySingle = function (messageSender, sequenceId) {\n        var index = this.findQueueIndex(sequenceId);\n        if (index < 0) {\n            return;\n        }\n        var messageItem = this.messageQueue[index];\n        messageSender(messageItem.header, messageItem.data);\n    };\n    /**\n     * This method discards all operations up to the index provided.\n     *\n     * @param {BigInteger} sequenceId The sequence id to keep. All previous sequence numbers will be discarded.\n     */\n    MemoryPublishStore.prototype.discardUpTo = function (sequenceId) {\n        // determine the index of the last message to release\n        var cutBefore = this.findQueueIndex(sequenceId);\n        if (this.messageQueue.length === 0 || cutBefore < 0) {\n            return;\n        }\n        // set last persisted\n        if (this._lastPersisted === null || this._lastPersisted.compare(sequenceId) < 0) {\n            this._lastPersisted = sequenceId;\n        }\n        // release messages with sequence id < sequenceId not including sequenceId\n        this.messageQueue.splice(0, cutBefore + 1);\n        // adjust flags\n        if (this.messageQueue.length > 0) {\n            this._lowestUnpersisted = this.messageQueue[0].sequence;\n        }\n        else {\n            this._lowestUnpersisted = null;\n        }\n    };\n    /**\n     * This method returns the number of messages in the store.\n     *\n     * @returns {number} The number of messages in the store.\n     */\n    MemoryPublishStore.prototype.unpersistedCount = function () {\n        return this.messageQueue.length;\n    };\n    /**\n     * This method returns the oldest sequence in the store.\n     *\n     * @returns {BigInteger} The oldest sequence number in the store.\n     */\n    MemoryPublishStore.prototype.lowestUnpersisted = function () {\n        return this._lowestUnpersisted;\n    };\n    /**\n     * This method returns the last persisted sequence id in the store.\n     *\n     * @returns {BigInteger} The sequence number of the last discarded message.\n     */\n    MemoryPublishStore.prototype.lastPersisted = function () {\n        return this._lastPersisted;\n    };\n    // internal methods\n    /**\n     * This method finds the index of the sequence number in the message queue using classic binary search.\n     * No need to take care of duplicates since we assume there is none. Since it's possible to have missing chains in\n     * this list, we're looking for the last sequence id that is <= sequenceId rather than looking for a strict match.\n     *\n     * @param {BigInteger} sequenceId The sequence number to find.\n     * @returns {number} The index found. If the sequence is not in the queue, returns -1. Not found in this case means\n     * it's either bigger or smaller than all sequence numbers in the list\n     * @private\n     * @hidden\n     */\n    MemoryPublishStore.prototype.findQueueIndex = function (sequenceId) {\n        var start = 0;\n        var end = this.messageQueue.length;\n        var last = end - 1;\n        var found = -1;\n        // short cicuit\n        if (end === 0 || this.messageQueue[0].sequence.compare(sequenceId) > 0) {\n            return found;\n        }\n        var mid;\n        while (start < end) {\n            mid = Math.floor((start + end) / 2);\n            if (this.messageQueue[mid].sequence.compare(sequenceId) > 0) {\n                end = mid;\n            }\n            else if (this.messageQueue[mid].sequence.compare(sequenceId) <= 0 &&\n                (mid === last || this.messageQueue[mid + 1].sequence.compare(sequenceId) > 0)) {\n                found = mid;\n                break;\n            }\n            else {\n                start = mid + 1;\n            }\n        }\n        return found;\n    };\n    return MemoryPublishStore;\n}());\nexports.MemoryPublishStore = MemoryPublishStore;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BigInteger = __webpack_require__(0);\nvar header_1 = __webpack_require__(1);\n/**\n * This is a class that encapsulates a message header. The message header is exposed via `message.header` field of\n * the [[Message]] class:\n *\n * ```javascript\n * function messageHander(message) {\n *     if (message.header.command() === 'sow') {\n *         console.log(message.header.groupSequenceNumber());\n *         console.log(message.data);\n *     }\n * }\n * ```\n * @notice Not all messages populate all headers. The *Command Reference* provides detailed description of the headers\n * returned on specific messages and what they contain.\n */\nvar MessageHeader = /** @class */ (function () {\n    function MessageHeader(_header) {\n        this._header = _header;\n    }\n    /**\n     * Returns the command name, e.g. 'publish', 'sow_and_subscribe', which is one of the followng:\n     * - ack\n     * - publish\n     * - delta_publish\n     * - subscribe\n     * - delta_subscribe\n     * - oof\n     * - sow\n     * - sow_and_subscribe\n     * - sow_and_delta_subscribe\n     * - sow_delete\n     * - unsubscribe\n     *\n     * Returns the command name.\n     * @returns {string} The command name value.\n     */\n    MessageHeader.prototype.command = function () { return this._header.c; };\n    /**\n     * Returns the command id.\n     * @returns {string} The command id value.\n     */\n    MessageHeader.prototype.commandId = function () { return this._header.cid; };\n    /**\n     * Returns the query id.\n     * @returns {string} The query id.\n     */\n    MessageHeader.prototype.queryId = function () { return this._header.query_id; };\n    /**\n     * Returns the subscription id.\n     * @returns {string} The subscription id.\n     */\n    MessageHeader.prototype.subId = function () { return this._header.sub_id; };\n    /**\n     * Returns the acknowledgement type for the given command. Multiple ack types are comma-delimited.\n     * @returns {string} The acknowledgement message type.\n     */\n    MessageHeader.prototype.ackType = function () { return this._header.a; };\n    /**\n     * Returns the number of records to return. Note: If TopN is not equally divisible by the batch size, then more\n     * records will be returned so that the total number of records is equally divisible by the batch size setting.\n     * @returns {number} The top N value.\n     */\n    MessageHeader.prototype.topN = function () { return this._header.top_n; };\n    /**\n     * Returns the specified number of messages that are batched together when returning a query result.\n     * @returns {number} The batch size value.\n     */\n    MessageHeader.prototype.batchSize = function () { return this._header.bs; };\n    /**\n     * Returns the topic value.\n     * @returns {string} The topic value.\n     */\n    MessageHeader.prototype.topic = function () { return this._header.t; };\n    /**\n     * Returns a client-originated identifier used to mark a location in journaled messages.\n     * @returns {string} The bookmark value.\n     */\n    MessageHeader.prototype.bookmark = function () { return this._header.bm; };\n    /**\n     * Returns a comma-delimited list of options on a specific command.\n     * @returns {string} The options value.\n     */\n    MessageHeader.prototype.options = function () { return this._header.o ? this._header.o : this._header.opts; };\n    /**\n     * Returns the correlation id: opaque token set by an application and returned with the message. Must be\n     * `base64` encoded characters only.\n     * @returns {string} The correlationId value.\n     */\n    MessageHeader.prototype.correlationId = function () { return this._header.x; };\n    /**\n     * Returns the SOW topic key(s) by which to order SOW query.\n     * @returns {string} The orderBy value.\n     */\n    MessageHeader.prototype.orderBy = function () { return this._header.orderby; };\n    /**\n     * Returns the sow key value.\n     * A SOW key will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in\n     * on a subscription when the published message matches a record in the SOW.\n     *\n     * Format:\n     *\n     * - string containing the digits of an unsigned long for AMPS-generated SOW keys\n     *\n     * OR\n     *\n     * - arbitrary string in the base64 character set for user-provided SOW keys.\n     * @returns {string} The sow key value.\n     */\n    MessageHeader.prototype.sowKey = function () { return this._header.k; };\n    /**\n     * Returns the sowKeys as a comma-delimited value.\n     * @returns {string} The sowKeys value.\n     */\n    MessageHeader.prototype.sowKeys = function () { return this._header.sow_keys; };\n    /**\n     * Returns the Message expiration value (in seconds).\n     * @returns {number} The Message expiration value.\n     */\n    MessageHeader.prototype.expiration = function () { return this._header.e; };\n    /**\n     * Returns the client name value.\n     * Used to identify a client. Useful for publishers that wish to identify the source of a publish, client status\n     * messages and for client heartbeats.\n     * @returns {string} The client name value.\n     */\n    MessageHeader.prototype.clientName = function () { return this._header.client_name; };\n    /**\n     * Returns an integer that corresponds to the publish message sequence number. For more information see the\n     * *Replication* section in the *User Guide*.\n     * @returns {BigInteger} The sequenceId value.\n     */\n    MessageHeader.prototype.sequenceId = function () {\n        if (this._header.s !== undefined) {\n            return BigInteger(this._header.s);\n        }\n        return undefined;\n    };\n    /**\n     * Returns a comma-separated list of SubIds sent from AMPS engine to identify which client subscriptions match a\n     * given `publish` message.\n     * @returns {string} The subIds (comma-delimited) value.\n     */\n    MessageHeader.prototype.subIds = function () { return this._header.sids; };\n    /**\n     * Returns the content filter value.\n     * @returns {string} The content filter value.\n     */\n    MessageHeader.prototype.filter = function () { return this._header.filter ? this._header.filter : this._header.f; };\n    /**\n     * Returns the message timestamp set by the server in a ISO-8601 date-time format.\n     * @returns {string} The timestamp value.\n     */\n    MessageHeader.prototype.timestamp = function () { return this._header.ts; };\n    /**\n     * Returns the number of topic matches for the SOW query. Sent in `stats` acknowledgement message.\n     * @returns {string} The topicMatches value.\n     */\n    MessageHeader.prototype.topicMatches = function () { return this._header.topic_matches; };\n    /**\n     * Returns the user id used to identify the user of a command.\n     * @returns {string} The userId value.\n     */\n    MessageHeader.prototype.userId = function () { return this._header.user_id; };\n    /**\n     * Returns the failure message that appears when an acknowledgement returns a status of failure.\n     * @returns {string} The failure reason value.\n     */\n    MessageHeader.prototype.reason = function () { return this._header.reason; };\n    /**\n     * Returns the number of records deleted from the SOW with a `sow_delete` command.\n     * Used in conjunction with the stats acknowledgement.\n     * @returns {string} The recordsDeleted value.\n     */\n    MessageHeader.prototype.recordsDeleted = function () { return this._header.records_deleted; };\n    /**\n     * Returns the number of records inserted into the SOW. Used in conjunction with the stats acknowledgement.\n     * @returns {string} The recordsInserted value.\n     */\n    MessageHeader.prototype.recordsInserted = function () { return this._header.records_inserted; };\n    /**\n     * Returns number of records in the store. The value is returned in the acknowledgement to an SOW query.\n     * @returns {string} The recodsReturned value.\n     */\n    MessageHeader.prototype.recordsReturned = function () { return this._header.records_returned; };\n    /**\n     * Returns the number of records updated in the SOW. Used in conjunction with the stats acknowledgement.\n     * @returns {string} The recodsUpdated value.\n     */\n    MessageHeader.prototype.recordsUpdated = function () { return this._header.records_updated; };\n    /**\n     * For messages from a queue, returns the time at which the lease expires.\n     */\n    MessageHeader.prototype.leasePeriod = function () { return this._header.lp; };\n    /**\n     * Returns the transmission time value.\n     * @returns {string} The transmission time value.\n     */\n    MessageHeader.prototype.transmissionTime = function () { return this._header.transmission_time; };\n    /**\n     * As a part of the acknowledgement to a SOW query, returns the number of matches.\n     */\n    MessageHeader.prototype.matches = function () { return this._header.matches; };\n    /**\n     * Sent with XML formatted message data to indicate the number of bytes used by the message body.\n     */\n    MessageHeader.prototype.messageLength = function () { return this._header.l; };\n    /**\n     * Returns the Group Sequence Number for each batch message of a SOW response.\n     */\n    MessageHeader.prototype.groupSequenceNumber = function () { return this._header.gseq; };\n    /**\n     * Returns the client status when client is monitored for heartbeats.\n     * @returns {string} The client status value.\n     */\n    MessageHeader.prototype.status = function () { return this._header.status; };\n    return MessageHeader;\n}());\nexports.MessageHeader = MessageHeader;\n/**\n * This is the AMPS Message representation class. Any Message received from AMPS is a [[Message]] object.\n *\n * Message have two main fields: `header` and `data`. The `header` property is used to access message header fields,\n * such as command type, message length, sow key, etc. The `data` fields contains the message payload.\n *\n * ```javascript\n * function messageHandler(message) {\n *     // print out the command type\n *     console.log(message.header.command());\n *\n *     // get the subscription id of the message\n *     console.log(message.header.subId());\n *\n *     // print out message data\n *     console.log(message.data);\n *\n * }\n * ```\n *\n * @see [[MessageHeader]] for the list of available header methods.\n */\nvar Message = /** @class */ (function (_super) {\n    __extends(Message, _super);\n    /**\n     * The constructor basically prepares the header field so that a user can have acess methods for header fields.\n     * @private\n     * @hidden\n     */\n    function Message() {\n        var _this = _super.call(this) || this;\n        _this.header = new MessageHeader(_this);\n        return _this;\n    }\n    /**\n     * This is the method that initializes messages that are created from simple objects\n     * @hidden\n     */\n    Message.fromObject = function (messageObject) {\n        // A bit of black magic to convert a simple dict into an object of class Message\n        messageObject.header = new MessageHeader(messageObject);\n        return messageObject;\n    };\n    return Message;\n}(header_1.Header));\nexports.Message = Message;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This is a default implementation of the FIX/NVFIX type helper. Messages are converted into JavaScript objects.\n * Repeating groups will take on their last value and ordering of fields isn’t preserved. It is possible to set a\n * custom delimiter for messages, hy default it is `\\x01`.\n *\n * [[TypeHelper]] class already provides instances of this class for types `fix` and `nvfix`.\n */\nvar FixTypeHelper = /** @class */ (function () {\n    /**\n     * This is the constructor of the FixNvfixTypeHelper class.\n     * @param delimiter Optional delimiter value.\n     */\n    function FixTypeHelper(delimiter) {\n        if (delimiter === void 0) { delimiter = '\\x01'; }\n        this._delimiter = delimiter;\n    }\n    /**\n     * @hidden\n     */\n    FixTypeHelper.prototype.serialize = function (data) {\n        // already formatted fix/nvfix string\n        if (typeof data === 'string') {\n            return [data];\n        }\n        // otherwise, we assume it's an object with keys and values\n        return [Object.keys(data)\n                .map(function (key) { return key + '=' + data[key]; })\n                .join(this._delimiter) + this._delimiter];\n    };\n    /**\n     * @hidden\n     */\n    FixTypeHelper.prototype.deserialize = function (data) {\n        var parsedData = {};\n        decodeURIComponent(escape(TypeHelper.Uint8ToString(new Uint8Array(data))))\n            .split(this._delimiter)\n            .filter(function (keyValue) { return keyValue.length > 0; })\n            .map(function (keyValue) {\n            var keyValueTuple = keyValue.split('=');\n            var key = keyValueTuple[0];\n            // no '=' inside of the value\n            if (keyValueTuple.length === 2) {\n                parsedData[key] = keyValueTuple[1];\n            }\n            else {\n                parsedData[key] = keyValue.slice(key.length + 1);\n            }\n        });\n        return parsedData;\n    };\n    FixTypeHelper.prototype.delimiter = function (delimiter) {\n        if (typeof delimiter !== 'undefined') {\n            this._delimiter = delimiter;\n            return this;\n        }\n        return this._delimiter;\n    };\n    return FixTypeHelper;\n}());\nexports.FixTypeHelper = FixTypeHelper;\n/**\n * This is a helper class that is used to register custom message types in order for the client to support them.\n * By default, the [[Client]] supports the following message types:\n * * __JSON__\n * * __FIX__  / __NVFIX__ - via [[FixTypeHelper]] class.\n * * __Binary__\n *\n * __Composite__ message types can be created using [[TypeHelper.compositeHelper]] method.\n *\n * See [[TypeHelper.helper]] for examples on how to implement support for new types or custom type helpers for existing\n * message types.\n */\nvar TypeHelper = /** @class */ (function () {\n    function TypeHelper() {\n    }\n    TypeHelper.getInstance = function () {\n        if (!TypeHelper.instance) {\n            TypeHelper.instance = TypeHelper.createInstance();\n        }\n        return TypeHelper.instance;\n    };\n    TypeHelper.createInstance = function () {\n        var jsonTypeHelper = {\n            serialize: function (data) {\n                if (typeof data === 'string') {\n                    return [data];\n                }\n                return [JSON.stringify(data)];\n            },\n            deserialize: function (data) {\n                if (typeof data === 'string') {\n                    return JSON.parse(data);\n                }\n                else {\n                    // Binary buffer, need to decode utf8\n                    return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(data)));\n                }\n            }\n        };\n        var binaryTypeHelper = {\n            serialize: function (data) { return [data]; },\n            deserialize: function (data) { return data; }\n        };\n        return {\n            'json': jsonTypeHelper,\n            'binary': binaryTypeHelper,\n            'fix': new FixTypeHelper(),\n            'nvfix': new FixTypeHelper()\n        };\n    };\n    /**\n     * @hidden\n     */\n    TypeHelper.littleEndianSizeBuffer = function (size) {\n        var result = new Uint32Array(1);\n        result[0] = size;\n        return result;\n    };\n    /**\n     * @hidden\n     */\n    TypeHelper.bigEndianSizeBuffer = function (size) {\n        var result = new Uint32Array(1);\n        result[0] = ((size & 0x000000FF) << 24)\n            | ((size & 0x0000FF00) << 8)\n            | ((size & 0x00FF0000) >>> 8)\n            | ((size & 0xFF000000) >>> 24);\n        return result;\n    };\n    /**\n     * @hidden\n     */\n    TypeHelper.Uint8ToString = function (uint8Array) {\n        var CHUNK_SZ = 0x8000;\n        var chars = [];\n        for (var i = 0; i < uint8Array.length; i += CHUNK_SZ) {\n            chars.push(String.fromCharCode.apply(null, uint8Array.subarray(i, i + CHUNK_SZ)));\n        }\n        return chars.join('');\n    };\n    TypeHelper.convertToArrayBuffers = function (data) {\n        var result = [];\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var item = data_1[_i];\n            if (item.constructor === String) {\n                // Need to convert to an ArrayBuffer\n                var encoded = unescape(encodeURIComponent(item));\n                var arrayified = new Uint8Array(encoded.length);\n                for (var i = 0; i < encoded.length; ++i) {\n                    arrayified[i] = encoded.charCodeAt(i);\n                }\n                result.push(arrayified);\n            }\n            else {\n                result.push(item);\n            }\n        }\n        return result;\n    };\n    /**\n     * This method provides a helper for parsing messages of different types. If a helper was provided by a user,\n     * registers it for future use.\n     *\n     * #### Create a custom helper for XML messages:\n     * ```javascript\n     * var xmlTypeHelper = {\n     *     serialize: function(data) {\n     *         return [new XMLSerializer().serializeToString(data)];\n     *     },\n     *     deserialize: function(data) {\n     *         if (data.constructor === String) {\n     *             return new DOMParser().parseFromString(data);\n     *         }\n     *         else {\n     *             // Binary buffer, need to decode utf8\n     *             return new DOMParser().parseFromString(\n     *                 decodeURIComponent(escape(Uint8ToString(data)))\n     *             );\n     *         }\n     *     }\n     * };\n     *\n     * // Register the above XML custom helper for parsing all XML messages automatically\n     * amps.TypeHelper.helper('xml', xmlTypeHelper);\n     * ```\n     *\n     * #### In case the custom parsing behavior is expected, it is possible to override the default type helper:\n     * ```javascript\n     * // create a JSON type helper that does not parse JSON data into native JS objects keeping it as a string\n     * var jsonHelper = {\n     *     serialize: function(data) {\n     *         return [data];\n     *     },\n     *     deserialize: function(data) {\n     *         return JSON.stringify(data);\n     *     }\n     * };\n     *\n     * // override the default type helper\n     * amps.TypeHelper.helper('json', jsonHelper);\n     * ```\n     *\n     * #### Register the json-json-json-binary composite message type with the type helper:\n     * ```javascript\n     * amps.TypeHelper.helper(\n     *     'compositejjjbl',\n     *     amps.TypeHelper.compositeHelper('json', 'json', 'json', 'binary')\n     * );\n     * ```\n     *\n     * #### Set the custom delimiter for NVFIX format:\n     * ```javascript\n     * amps.TypeHelper.helper('nvfix').delimiter('%01');\n     * ```\n     *\n     * #### Register the custom helper for NVFIX format:\n     * ```javascript\n     * var nvfixTypeHelper = {\n     *     serialize: function(data) {\n     *         // already formatted fix/nvfix string\n     *         if (typeof data === 'string') {\n     *             return [data];\n     *         }\n     *\n     *         // otherwise, we assume it's an object with keys and values\n     *         return [\n     *             Object.keys(data).map(function(key) {\n     *                 return key + '=' + data[key];\n     *             }).join('\\x01') + '\\x01'\n     *         ];\n     *     },\n     *     deserialize: function(data) {\n     *         var parsedData = {};\n     *         String.fromCharCode.apply(null, new Int8Array(data))\n     *             .split('\\x01')\n     *             .slice(0, -1)\n     *             .map(function(keyValue) {\n     *                  var keyValueTuple = keyValue.split('=');\n     *                  var key = keyValueTuple[0];\n     *\n     *                  // no '=' inside of the value\n     *                  if (keyValueTuple.length === 2) {\n     *                      parsedData[key] = keyValueTuple[1];\n     *                  }\n     *                  else {\n     *                      parsedData[key] = keyValue.slice(key.length + 1);\n     *                  }\n     *             });\n     *\n     *         return parsedData;\n     *     }\n     * };\n     *\n     * // Register the above NVFIX custom helper for parsing all NVFIX messages automatically\n     * amps.TypeHelper.helper('nvfix', nvfixTypeHelper);\n     * ```\n     *\n     * @param {string} messageType The type of message to handle.\n     * @param {ITypeHelper} newHelper A helper object with predefined functions that can be provided for custom\n     * parsing/handling of a message type.\n     * @returns {ITypeHelper} The helper object assigned/registered.\n     */\n    TypeHelper.helper = function (messageType, newHelper) {\n        var instance = TypeHelper.getInstance();\n        if (newHelper !== undefined) {\n            instance[messageType] = newHelper;\n            return newHelper;\n        }\n        if (instance[messageType] !== undefined) {\n            return instance[messageType];\n        }\n        return instance.binary;\n    };\n    /**\n     * This method is used to create composite message types from other types, such as JSON, XML, etc.\n     *\n     * ```javascript\n     * // Register the json-xml-json-binary composite message type with the type helper\n     * amps.TypeHelper.helper(\n     *     'compositejxjb',\n     *     amps.TypeHelper.compositeHelper('json', 'xml', 'json', 'binary')\n     * );\n     * ```\n     *\n     * @param {...string} messageType Previously registered types of messages.\n     * @returns {ITypeHelper} A created [[ITypeHelper]]-compatible object.\n     */\n    TypeHelper.compositeHelper = function () {\n        var messageTypes = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            messageTypes[_i] = arguments[_i];\n        }\n        // Generate all the type base helpers that are included in this composite helper\n        var helpers = messageTypes.map(function (item) { return TypeHelper.helper(item); });\n        return {\n            // The list of types this composite helps with\n            helpers: helpers,\n            serialize: function (data) {\n                if (data.length > helpers.length) {\n                    throw 'too many elements to serialize';\n                }\n                var result = [];\n                for (var i = 0; i < data.length; ++i) {\n                    var part = TypeHelper.convertToArrayBuffers(helpers[i].serialize(data[i]));\n                    result = result.concat(TypeHelper.bigEndianSizeBuffer(part[0].length), part);\n                }\n                return result;\n            },\n            deserialize: function (data) {\n                var result = [];\n                var position = 0;\n                var index = 0;\n                while (data.byteLength - position > 0) {\n                    var sizeBuffer = new Uint8Array(data, position, 4);\n                    position += 4;\n                    var bytes = (sizeBuffer[0] << 24) |\n                        (sizeBuffer[1] << 16) |\n                        (sizeBuffer[2] << 8) |\n                        (sizeBuffer[3]);\n                    result.push(helpers[index].deserialize(new Uint8Array(data, position, bytes)));\n                    position += bytes;\n                    ++index;\n                }\n                return result;\n            }\n        };\n    };\n    return TypeHelper;\n}());\nexports.TypeHelper = TypeHelper;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BigInteger = __webpack_require__(0);\nexports.BigInteger = BigInteger;\nvar client_1 = __webpack_require__(2);\nexports.Client = client_1.Client;\nvar header_1 = __webpack_require__(1);\nexports.Header = header_1.Header;\nvar command_1 = __webpack_require__(3);\nexports.Command = command_1.Command;\nvar message_1 = __webpack_require__(10);\nexports.Message = message_1.Message;\nvar default_server_chooser_1 = __webpack_require__(4);\nexports.DefaultServerChooser = default_server_chooser_1.DefaultServerChooser;\nvar default_subscription_manager_1 = __webpack_require__(5);\nexports.DefaultSubscriptionManager = default_subscription_manager_1.DefaultSubscriptionManager;\nvar exponential_delay_strategy_1 = __webpack_require__(6);\nexports.ExponentialDelayStrategy = exponential_delay_strategy_1.ExponentialDelayStrategy;\nvar fixed_delay_strategy_1 = __webpack_require__(7);\nexports.FixedDelayStrategy = fixed_delay_strategy_1.FixedDelayStrategy;\nvar memory_bookmark_store_1 = __webpack_require__(8);\nexports.MemoryBookmarkStore = memory_bookmark_store_1.MemoryBookmarkStore;\nvar memory_publish_store_1 = __webpack_require__(9);\nexports.MemoryPublishStore = memory_publish_store_1.MemoryPublishStore;\nvar type_helper_1 = __webpack_require__(11);\nexports.TypeHelper = type_helper_1.TypeHelper;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @hidden\n */\nvar DefaultAuthenticator = /** @class */ (function () {\n    function DefaultAuthenticator() {\n    }\n    DefaultAuthenticator.prototype.authenticate = function (login, password) {\n        return new Promise(function (resolve) { return resolve(password); });\n    };\n    DefaultAuthenticator.prototype.retry = function (login, password) {\n        return new Promise(function (resolve) { return resolve(password); });\n    };\n    DefaultAuthenticator.prototype.completed = function (login, password, reason) { };\n    return DefaultAuthenticator;\n}());\nexports.DefaultAuthenticator = DefaultAuthenticator;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* tslint:disable */\nvar parseUri = function (str) {\n    var o = this.parseUri.options, m = o.parser[o.strictMode ? 'strict' : 'loose'].exec(str), uri = {}, i = 14;\n    while (i--) {\n        uri[o.key[i]] = m[i] || '';\n    }\n    uri[o.q.name] = {};\n    uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {\n        if ($1) {\n            uri[o.q.name][$1] = $2;\n        }\n    });\n    return uri;\n};\n/* tslint:enable */\n// parseUri 1.2.2 (c) Steven Levithan <stevenlevithan.com> MIT License\nparseUri.options = {\n    strictMode: false,\n    key: [\n        'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative',\n        'path', 'directory', 'file', 'query', 'anchor'\n    ],\n    q: { name: 'queryKey', parser: /(?:^|&)([^&=]*)=?([^&]*)/g },\n    parser: {\n        /* tslint:disable */\n        strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n        loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/\n        /* tslint:enable */\n    }\n};\n/**\n * @hidden\n */\nvar Helpers = /** @class */ (function () {\n    function Helpers() {\n    }\n    Helpers.parseUri = parseUri;\n    return Helpers;\n}());\nexports.Helpers = Helpers;\n/* tslint:enable */\nvar isBrowser = false;\n// Openfin check\nvar isFin = (typeof window !== 'undefined') && window.fin && window.fin.desktop; // jshint ignore:line\n// Node js check\nvar isNode = false;\ntry {\n    isNode = Object.prototype.toString.call(global.process) === '[object process]';\n}\ncatch (e) { }\n// Electron check\n/* tslint:disable */\nvar isElectron = (typeof window !== 'undefined') && window.process && window.process.versions && window.process.versions.electron; // jshint ignore:line\n/* tslint:enable */\n// Worker environment\n/* tslint:disable */\nvar isWebWorker = !isNode && (typeof window === 'undefined') && (typeof module !== 'undefined') && (typeof module.exports !== 'undefined'); // jshint ignore:line\n/* tslint:enable */\n// else Browser environment\nisBrowser = !isFin && !isNode && !isElectron;\n/**\n * Browser environment detected.\n */\nexports.IS_BROWSER = isBrowser;\n/**\n * Node.js (and derivatives) environment detected.\n */\nexports.IS_NODE = isNode;\n/**\n * OpenFin environment detected.\n */\nexports.IS_OPENFIN = isFin;\n/**\n * Electron environment detected.\n */\nexports.IS_ELECTRON = isElectron;\n/**\n * WebWorker context detected.\n */\nexports.IS_WEBWORKER = isWebWorker;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// ../bundle/amps.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a14d4b6bf1cfe30b8eb4","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        LOG_MAX_INT = Math.log(MAX_INT);\r\n\r\n    function Integer(v, radix) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 ? parseValue(v) : parseBase(v, radix);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a,b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n            if (isPrecise(a.value * this.value)) {\r\n                return new SmallInteger(a.value * this.value);\r\n            }\r\n            return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n            if (a.value === 0) return Integer[0];\r\n            if (a.value === 1) return this;\r\n            if (a.value === -1) return this.negate();\r\n            return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    function square(a) {\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < l; j++) {\r\n                a_j = a[j];\r\n                product = a_i * a_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n              quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        var value = n.value;\r\n        if (value === 0) return false;\r\n        if (value === 1) return true;\r\n        if (value === 2) return this.isEven();\r\n        return this.mod(n).equals(Integer[0]);\r\n    };\r\n    SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(25)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    BigInteger.prototype.isPrime = function () {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs(),\r\n            nPrev = n.prev();\r\n        var a = [2, 3, 5, 7, 11, 13, 17, 19],\r\n            b = nPrev,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2);\r\n        for (i = 0; i < a.length; i++) {\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.equals(Integer[1]) || x.equals(nPrev)) continue;\r\n            for (t = true, d = b; t && d.lesser(nPrev) ; d = d.multiply(2)) {\r\n                x = x.square().mod(n);\r\n                if (x.equals(nPrev)) t = false;\r\n            }\r\n            if (t) return false;\r\n        }\r\n        return true;\r\n    };\r\n    SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        // use the Fermat primality test\r\n        for (var i = 0; i < t; i++) {\r\n            var a = bigInt.randBetween(2, n.minus(2));\r\n            if (!a.modPow(n.prev(), n).isUnit()) return false; // definitely composite\r\n        }\r\n        return true; // large chance of being prime\r\n    };\r\n    SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.equals(bigInt.zero)) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.equals(1)) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n\r\n    var powersOfTwo = [1];\r\n    while (powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return ((typeof n === \"number\" || typeof n === \"string\") && +Math.abs(n) <= BASE) ||\r\n            (n instanceof BigInteger && n.value.length <= 1);\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (n) {\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (n) {\r\n        var remQuo;\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero()) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xBits = [], yBits = [];\r\n        var xStop = false, yStop = false;\r\n        while (!xStop || !yStop) {\r\n            if (xRem.isZero()) { // virtual sign extension for simulating two's complement\r\n                xStop = true;\r\n                xBits.push(xSign ? 1 : 0);\r\n            }\r\n            else if (xSign) xBits.push(xRem.isEven() ? 1 : 0); // two's complement for negative numbers\r\n            else xBits.push(xRem.isEven() ? 0 : 1);\r\n\r\n            if (yRem.isZero()) {\r\n                yStop = true;\r\n                yBits.push(ySign ? 1 : 0);\r\n            }\r\n            else if (ySign) yBits.push(yRem.isEven() ? 1 : 0);\r\n            else yBits.push(yRem.isEven() ? 0 : 1);\r\n\r\n            xRem = xRem.over(2);\r\n            yRem = yRem.over(2);\r\n        }\r\n        var result = [];\r\n        for (var i = 0; i < xBits.length; i++) result.push(fn(xBits[i], yBits[i]));\r\n        var sum = bigInt(result.pop()).negate().times(bigInt(2).pow(result.length));\r\n        while (result.length) {\r\n            sum = sum.add(bigInt(result.pop()).times(bigInt(2).pow(result.length)));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value, x = typeof v === \"number\" ? v | LOBMASK_I : v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = Math.min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low);\r\n        if (range.isSmall) return low.add(Math.round(Math.random() * range));\r\n        var length = range.value.length - 1;\r\n        var result = [], restricted = true;\r\n        for (var i = length; i >= 0; i--) {\r\n            var top = restricted ? range.value[i] : BASE;\r\n            var digit = truncate(Math.random() * top);\r\n            result.unshift(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        result = arrayToSmall(result);\r\n        return low.add(typeof result === \"number\" ? new SmallInteger(result) : new BigInteger(result, false));\r\n    }\r\n    var parseBase = function (text, base) {\r\n        var length = text.length;\r\n        if (2 <= base && base <= 36) {\r\n            if (length <= LOG_MAX_INT / Math.log(base)) {\r\n                return new SmallInteger(parseInt(text, base));\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var i;\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i].toLowerCase(),\r\n                charCode = c.charCodeAt(0);\r\n            if (48 <= charCode && charCode <= 57) digits.push(parseValue(c));\r\n            else if (97 <= charCode && charCode <= 122) digits.push(parseValue(c.charCodeAt(0) - 87));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\");\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit) {\r\n        var v = digit.value;\r\n        if (typeof v === \"number\") v = [v];\r\n        if (v.length === 1 && v[0] <= 35) {\r\n            return \"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(v[0]);\r\n        }\r\n        return \"<\" + v + \">\";\r\n    }\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return \"0\";\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return \"0\";\r\n            if (n.isNegative()) return new Array(1 - n).join(\"10\");\r\n            return \"1\" + new Array(+n).join(\"01\");\r\n        }\r\n        var minusSign = \"\";\r\n        if (n.isNegative() && base.isPositive()) {\r\n            minusSign = \"-\";\r\n            n = n.abs();\r\n        }\r\n        if (base.equals(1)) {\r\n            if (n.isZero()) return \"0\";\r\n            return minusSign + new Array(+n + 1).join(1);\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(stringify(digit));\r\n        }\r\n        out.push(stringify(left));\r\n        return minusSign + out.reverse().join(\"\");\r\n    }\r\n\r\n    BigInteger.prototype.toString = function (radix) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBase(this, radix);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n    SmallInteger.prototype.toString = function (radix) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBase(this, radix);\r\n        return String(this.value);\r\n    };\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return +this.toString();\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n\r\n    function parseStringValue(v) {\r\n            if (isPrecise(+v)) {\r\n                var x = +v;\r\n                if (x === truncate(x))\r\n                    return new SmallInteger(x);\r\n                throw \"Invalid integer: \" + v;\r\n            }\r\n            var sign = v[0] === \"-\";\r\n            if (sign) v = v.slice(1);\r\n            var split = v.split(/e/i);\r\n            if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n            if (split.length === 2) {\r\n                var exp = split[1];\r\n                if (exp[0] === \"+\") exp = exp.slice(1);\r\n                exp = +exp;\r\n                if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n                var text = split[0];\r\n                var decimalPlace = text.indexOf(\".\");\r\n                if (decimalPlace >= 0) {\r\n                    exp -= text.length - decimalPlace - 1;\r\n                    text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n                }\r\n                if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n                text += (new Array(exp + 1)).join(\"0\");\r\n                v = text;\r\n            }\r\n            var isValid = /^([0-9][0-9]*)$/.test(v);\r\n            if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n            var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n            while (max > 0) {\r\n                r.push(+v.slice(min, max));\r\n                min -= l;\r\n                if (min < 0) min = 0;\r\n                max -= l;\r\n            }\r\n            trim(r);\r\n            return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = new SmallInteger(i);\r\n        if (i > 0) Integer[-i] = new SmallInteger(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/big-integer/BigInteger.js\n// module id = 0\n// module chunks = 0 1","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * This is the underlying class for [[Message]] / [[Command]] headers. It represents raw parameter names as they are\n * sent to / received from the server.\n * @hidden\n */\nexport class Header {\n    /**\n     * @hidden\n     */\n    [key: string]: any;\n\n    /**\n     * Command to be executed. Can be one of:\n     *\n     * - publish\n     * - subscribe\n     * - subscribe\n     * - sow_and_subscribe\n     * - sow_delete\n     * - unsubscribe\n     * - flush\n     * - heartbeat\n     * - start_timer\n     * - stop_timer\n     * - logon\n     * \n     * @deprecated Use [[MessageHeader.command]] method instead.\n     */\n    c: string;\t                    // command\n\n    /**\n     * Acknowledgement type for the given command.\n     * \n     * @deprecated Use [[MessageHeader.ackType]] method instead.\n     */\n    a: string;\t                    // ackType\n\n    /**\n     * Password used to authenticate with an AMPS server.\n     * @hidden\n     */\n    pw: string;\t                // password\n\n    /**\n     * A client-originated identifier used to mark a location in journaled messages.\n     * \n     * @deprecated Use [[MessageHeader.bookmark]] method instead.\n     */\n    bm: string;\t                // bookmark\n\n    /**\n     * Specifies the number of messages that are batched together when returning a query result.\n     * \n     * @deprecated Use [[MessageHeader.batchSize]] method instead.\n     */\n    bs: number;\t                // batchSize\n\n    /**\n     * Used to identify a client. Useful for publishers that wish to identify the source of a publish, client status\n     * messages and for client heartbeats. Can be set with `logon` command.\n     * \n     * @deprecated Use [[MessageHeader.clientName]] method instead.\n     */\n    client_name: string;\t \t    // clientName\n\n    /**\n     * Client-specified command id. The command id is returned by the engine in responses to commands to allow the\n     * client to correlate the response to the command.\n     * \n     * @deprecated Use [[MessageHeader.commandId]] method instead.\n     */\n    cid: string;\t                // commandId\n\n    /**\n     * Opaque token set by an application and returned with the message. Must be `base64` encoded characters only.\n     * \n     * @deprecated Use [[MessageHeader.correlationId]] method instead.\n     */\n    x: string;\t                    // correlationId\n\n    /**\n     * If true, only send raw data to subscriber for a matching publish message, i.e. do not include FIX/NVFIX envelope.\n     * \n     * @hidden\n     */\n    data_only: boolean;\t \t    // dataOnly\n\n    /**\n     * SOW expiration time (in seconds) if used in publish.\n     * \n     * @deprecated Use [[MessageHeader.expiration]] method instead.\n     */\n    e: number;\t                    // expiration\n\n    /**\n     * Content filter expression.\n     * \n     * @deprecated Use [[MessageHeader.filter]] method instead.\n     */\n    filter: string;\t            // filter\n\n    /**\n     * Group Sequence Number returned with each batch message of a SOW response.\n     * \n     * @deprecated Use [[MessageHeader.groupSequenceNumber]] method instead.\n     */\n    gseq: number;\t \t            // groupSequenceNumber\n\n    /**\n     * Heartbeat command. Can be one of:\n     *\n     * - start\n     * - stop\n     * - beat\n     * \n     * @hidden\n     */\n    heartbeat: string;\t \t        // heartbeat\n\n    /**\n     * For messages from a queue, the time at which the lease expires.\n     * \n     * @deprecated Use [[MessageHeader.leasePeriod]] method instead.\n     */\n    lp: string;\t                // leasePeriod\n\n    /**\n     * Returned in the acknowledgement to a SOW query that indicates number of matches.\n     * \n     * @deprecated Use [[MessageHeader.matches]] method instead.\n     */\n    matches: number;\t \t        // matches\n\n    /**\n     * Sent with XML formatted message data to indicate the number of bytes used by the message body.\n     * \n     * @deprecated Use [[MessageHeader.messageLength]] method instead.\n     */\n    l: number;\t                    // messageLength\n\n    /**\n     * Specifies the maximum number of messages within a batch publish. Must be greater than zero.\n     * \n     * @hidden\n     */\n    max_msgs: number;\t \t        // maximumMessages\n\n    /**\n     * \tA comma-delimited list of options on a specific command. Also has an alias: `opts`.\n     * \n     * @deprecated Use [[MessageHeader.options]] method instead.\n     */\n    o: string;\t                    // options\n\n    /**\n     * The SOW topic key by which to order SOW query.\n     * \n     * @deprecated Use [[MessageHeader.orderBy]] method instead.\n     */\n    orderby: string;\t \t        // orderBy\n\n    /**\n     * SOW Query identifier set by client to identify a query.\n     * \n     * @deprecated Use [[MessageHeader.queryId]] method instead.\n     */\n    query_id: string;\t \t        // queryId\n\n    /**\n     * The failure message that appears when an acknowledgement returns a status of failure.\n     * \n     * @deprecated Use [[MessageHeader.reason]] method instead.\n     */\n    reason: string;\t \t        // reason\n\n    /**\n     * Used in conjunction with the stats acknowledgement, this is the number of records deleted from the SOW with a\n     * `sow_delete` command.\n     * \n     * @deprecated Use [[MessageHeader.recordsDeleted]] method instead.\n     */\n    records_deleted: number;\t \t// recordsDeleted\n\n    /**\n     * Used in conjunction with the stats acknowledgement, this is the number of records inserted into the SOW.\n     * \n     * @deprecated Use [[MessageHeader.recordsInserted]] method instead.\n     */\n    records_inserted: number;\t \t// recordsInserted\n\n    /**\n     * Returned in the acknowledgement to an SOW query that indicates number of records in the store.\n     * \n     * @deprecated Use [[MessageHeader.recordsReturned]] method instead.\n     */\n    records_returned: number;\t \t// recordsReturned\n\n    /**\n     * Used in conjunction with the stats acknowledgement, this is the number of records updated in the SOW.\n     * \n     * @deprecated Use [[MessageHeader.recordsUpdated]] method instead.\n     */\n    records_updated: number;\t \t// recordsUpdated\n\n    /**\n     * An integer that corresponds to the publish message sequence number. For more information see the *Replication*\n     * section in the *User Guide*. It is actually a big integer, but since it's received in the JSON header and is\n     * parsed before we can wrap it in the [[BigInteger]] object, it's treated as a string to prevent rounding issues\n     * with JavaScript.\n     * \n     * @deprecated Use [[MessageHeader.sequenceId]] method instead.\n     */\n    s: string;\t                    // sequenceId\n\n    /**\n     * If true, empty messages that are published will be forwarded to matching subscriptions.\n     * \n     * @hidden\n     */\n    send_empty: boolean;\t \t    // sendEmpty\n\n    /**\n     * Option to instruct AMPS that a client would like to receive the SowKey(s) back.\n     * \n     * @hidden\n     */\n    send_keys: boolean;\t \t    // sendKeys\n\n    /**\n     * If true, Out-of-Focus messages are sent for the SOW query.\n     * \n     * @hidden\n     */\n    send_oof: boolean;\t \t        // sendOOF\n\n    /**\n     * A SowKey will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in\n     * on a subscription when the published message matches a record in the SOW. A `publish` command may contain a SOW\n     * key if the SOW for the topic is configured to accept user-provided SOW keys.\n     *\n     * Format:\n     *\n     * - string containing the digits of an unsigned long for AMPS-generated SOW keys\n     *\n     * OR\n     *\n     * - arbitrary string in the base64 character set for user-provided SOW keys.\n     * \n     * @deprecated Use [[MessageHeader.sowKey]] method instead.\n     */\n    k: string;\t                    // sowKey\n\n    /**\n     * Comma-separated list of SowKey values.\n     * \n     * @deprecated Use [[MessageHeader.sowKeys]] method instead.\n     */\n    sow_keys: string;\t \t        // sowKeys\n\n    /**\n     * Used to indicate client status when client is monitored for heartbeats. Can be one of:\n     *\n     * - stopped\n     * - alive\n     * - timed out\n     * - error\n     * \n     * @deprecated Use [[MessageHeader.status]] method instead.\n     */\n    status: string;\t \t        // status\n\n    /**\n     * The subscription identifier set by server when processing a subscription.\n     * \n     * @deprecated Use [[MessageHeader.subId]] method instead.\n     */\n    sub_id: string;\t \t        // subscriptionId\n\n    /**\n     * Comma-separated list of SubIds sent from AMPS engine to identify which client subscriptions match a given\n     * `publish` message.\n     * \n     * @deprecated Use [[MessageHeader.subIds]] method instead.\n     */\n    sids: string;\t \t            // subscriptionIds\n\n    /**\n     * Used in conjunction with the heartbeat interval to set the timeout interval for a publisher.\n     * \n     * @hidden\n     */\n    timeout_interval: number;\t \t// timeoutInterval\n\n    /**\n     * Message timestamp set by the server in a ISO-8601 date-time format.\n     * \n     * @deprecated Use [[MessageHeader.timestamp]] method instead.\n     */\n    ts: string;\t                // timestamp\n\n    /**\n     * The number of records to return. Note: If TopN is not equally divisible by the batch size, then more records will\n     * be returned so that the total number of records is equally divisible by the batch size setting.\n     * \n     * @deprecated Use [[MessageHeader.topN]] method instead.\n     */\n    top_n: number;\t \t            // topN\n\n    /**\n     * Returned in the acknowledgement to an SOW query that indicates number of topic matches.\n     * \n     * @deprecated Use [[MessageHeader.topicMatches]] method instead.\n     */\n    topic_matches: number;\t \t    // topicMatches\n\n    /**\n     * Transmission timestamp set by client in the ISO-8601 date-time format.\n     * \n     * @hidden\n     */\n    transmission_time: string;     // transmissionTime\n\n    /**\n     * If false, subscription identifiers will not be sent for a matched message.\n     * \n     * @hidden\n     */\n    send_subscription_ids: boolean; // sendSubscriptionIds\n\n    /**\n     * The Topic value.\n     * \n     * @deprecated Use [[MessageHeader.topic]] method instead.\n     */\n    t: string;\t                    // topic\n\n    /**\n     * Use SOAP XML namespaces in all messages from the AMPS engine.\n     * \n     * @hidden\n     */\n    use_ns: boolean;\t \t        // useNamespaces\n\n    /**\n     * Used to identify the user id of a command.\n     * \n     * @deprecated Use [[MessageHeader.userId]] method instead.\n     */\n    user_id: string;\t \t        // userId\n\n    /**\n     * contains the version of the AMPS server.\n     * \n     * @deprecated Use [[MessageHeader.version]] method instead.\n     */\n    version: string;\t            // version\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/header.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\n'use strict';\n\nimport * as BigInteger from 'big-integer';\nimport { Helpers, IS_NODE, IS_ELECTRON, IS_BROWSER } from './helpers';\nimport { Header } from './header';\nimport { Command, CommandParams } from './command';\nimport { Message } from './message';\nimport { ITypeHelper, TypeHelper } from './type-helper';\nimport { ServerChooser } from './server-chooser.interface';\nimport { DelayStrategy } from './delay-strategy.interface';\nimport { BookmarkStore } from './bookmark-store.interface';\nimport { PublishStore } from './publish-store.interface';\nimport { MemoryPublishStore } from './memory-publish-store';\nimport { MemoryBookmarkStore } from './memory-bookmark-store';\nimport { SubscriptionManager } from './subscription-manager.interface';\nimport { DefaultSubscriptionManager } from './default-subscription-manager';\nimport { Authenticator } from './authenticator.interface';\nimport { DefaultAuthenticator } from './default-authenticator';\nimport { DefaultServerChooser } from './default-server-chooser';\nimport { ExponentialDelayStrategy } from './exponential-delay-strategy';\nimport { FixedDelayStrategy } from './fixed-delay-strategy';\n\n\n// Conditional imports: Node.js-like environment requires WebSocket and (optionally) Promise\nconst W3WebSocket = (IS_NODE || IS_ELECTRON) ? (eval('require')('websocket')).w3cwebsocket : WebSocket;\nif (IS_BROWSER && (typeof Promise === 'undefined')) {\n    throw new Error('Promise support is required. Please include es6-promise library');\n}\n\n\nexport class Client {\n    // static data\n    private static seqRegex: RegExp = /\"s\":(\\d+),/;\n    private static maxBacklogRegex: RegExp = /max_backlog=(\\d+)/;\n\n    public static readonly Bookmarks: {[key: string]: string} = {\n        MOST_RECENT: 'recent',\n        EPOCH: '0',\n        NOW: '0|1|'\n    };\n\n    public static readonly ConnectionStateListener: {[key: string]: number} = {\n        Disconnected: 0,\n        Shutdown: 1,\n        Connected: 2,\n        LoggedOn: 4,\n        PublishReplayed: 8,\n        HeartbeatInitiated: 16,\n        Resubscribed: 32,\n        UNKNOWN: 16834\n    };\n\n    // Private data\n    private _name: string = null;\n    private username: string;\n    private password: string;\n    private _logonOptions: string;\n    private _logonCorrelationId: string = null;\n    private sequenceId: BigInteger;\n    private _serverVersion: string = null;\n    private _serverIntVersion: number = 0;\n    private _nextSubId: number = 1;\n    private subscriptions: any = {};\n    private connection: WebSocket = null;\n    private _isConnected: boolean = false;\n    private typeHelper: ITypeHelper = null;\n    private _disconnectHandler: (client: Client, error: Error) => void = null;\n    private _transportFilter: (data: any, outgoing?: boolean) => void = null;\n    private _stateListenerId: number = 1;\n    private _connectionStateListeners: {[key: number]: (connectionState: number) => void} = {};\n    private _serverChooser: ServerChooser = null;\n    private _delayStrategy: DelayStrategy = null;\n    private _publishStore: PublishStore = null;\n    private _bookmarkStore: BookmarkStore = null;\n    private _subscriptionManager: SubscriptionManager = null;\n    private timeouts: {[key: string]: any} = {};\n    private _autoAck: boolean = false;\n\n    private _ackBatch: {\n        toAck: {[key: string]: string[]},  // { 'topic1': ['bm1', 'bm2', ...], ... }\n        ackBatchSize: number,\n        ackTimeout?: number,\n        ackTimeoutTimerId?: any\n    } = {toAck: {}, ackTimeout: undefined, ackBatchSize: 0};\n\n    private _heartbeat: {\n        interval?: number;\n        timeout?: number;\n        timeoutId?: any;\n        timestamp?: Date;\n        onHeartbeatAbsence?(): void;\n    } = null;\n\n    private messageState: {\n        inGroup: boolean;\n        currentSow: any;\n        mergedHeader: boolean;\n        recordsRemaining: number;\n        publishHeader?: Message;\n    } = {inGroup: false, currentSow: null, mergedHeader: false, recordsRemaining: 0, publishHeader: null};\n\n    // Assigning the default error handler\n    private _errorHandler: (error: Error) => void = (error: Error) => {\n        const prefix = new Date().toISOString() + ' [' + (this._name ? 'client: ' + this._name : 'ERROR') + '] >>>';\n        if (error.name && error.message) { console.error(prefix, error.name + ':', error.message); }\n        else { console.error(prefix, error); }\n    };\n\n    /**\n     * @param {string} name Unique name for the client (important for queues and sow). It is strongly recommended to\n     * set a client name, but if it's not set, it'll be assigned automatically.\n     */\n    constructor(name?: string) {\n        this._name = name ? name : 'AMPS-JavaScript-' + new Date().getTime();\n    }\n\n    /**\n     * This is a convenience static method that creates a memory-backed client that tracks\n     * bookmarks and subscriptions in memory. Subscriptions are automatically restored after a reconnection using\n     * [[DefaultSubscriptionManager]] object. [[MemoryBookmarkStore]] is enabled for bookmarks, [[MemoryPublishStore]]\n     * is enabled for publishing messages.\n     *\n     * @param {string} name Unique name for the client (important for queues and sow). It is strongly recommended to\n     * set a client name, but if it's not set, it'll be assigned automatically.\n     * @returns {Client} a highly available [[Client]] instance.\n     */\n    public static createMemoryBacked(name?: string): Client {\n        return new Client(name)\n            .subscriptionManager(new DefaultSubscriptionManager())\n            .bookmarkStore(new MemoryBookmarkStore())\n            .publishStore(new MemoryPublishStore());\n    }\n\n    /**\n     * This is a private internal method that parses a string with acks (ex: 'processed,completed') into a list of\n     * predefined ackTypes. Clears bad types, duplicates, etc. Returns an empty list if the ack string is empty, null,\n     * or does not contain any valuable information.\n     * @param {string} ackString the string to parse.\n     * @private\n     * @hidden\n     */\n    private static parseAcks(ackString: string): string[] {\n        if (typeof ackString !== 'string') { return []; }\n\n        // non-string, null, undefined, etc.\n        const acksInfo: {[key: string]: boolean} = {\n            received: false,\n            processed: false,\n            completed: false,\n            persisted: false,\n            stats: false\n        };\n\n        ackString.split(',').map(ack => { if (acksInfo[ack] !== undefined) { acksInfo[ack] = true; } });\n        return Object.keys(acksInfo).filter(ack => acksInfo[ack]);\n    }\n\n    /**\n     * This is a private internal method that sends a batch ack message.\n     * @param {string} topic The topic value.\n     * @returns 0 if no actual ack command were sent, 1 otherwise.\n     * @private\n     * @hidden\n     */\n    private _ack = (topic: string): number => {\n        const bookmarks = this._ackBatch.toAck[topic];\n\n        if (bookmarks !== undefined && bookmarks.length > 0) {\n            this.execute(new Command('sow_delete').topic(topic).bookmark(bookmarks.join(',')));\n            this._ackBatch.toAck[topic] = [];\n\n            return 1;\n        }\n\n        return 0;\n    }\n\n    /**\n     * This is a private internal method that is invoked upon ackTimeout timer event.\n     * @private\n     * @hidden\n     */\n    private _onAckTimer = (): void => {\n        // if auto ack is off, short circuit\n        if (!this._autoAck || !this._isConnected) { return; }\n\n        // Acknowledge messages\n        Object.keys(this._ackBatch.toAck).map(topic => this._ack(topic));\n\n        // reset the timer (if it's non-zero)\n        if (this._ackBatch.ackTimeout) {\n            this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), this._ackBatch.ackTimeout);\n        }\n    }\n\n    /**\n     * This is a helper method that creates a command handler for the client.\n     * @param {function} messageHandler A callback for a message/requested ack message\n     * @param {function} resolve a callback for execution report (success)\n     * @param {function} reject a callback for execution report (failure)\n     * @param {string} acks command-required ackType(s).\n     * @param {string} userAcks ackTypes requested by a user.\n     * @param {string} commandName the name of the command.\n     * @param {string} subscriptionId the id of the subscription (can be either a command id or a subscription id).\n     * @private\n     * @hidden\n     */\n    private makeCommandHandler = (\n        messageHandler: (message: Message) => void,\n        resolve: (result: any) => void,\n        reject: (error?: Error | any) => void,\n        systemAcks: string,\n        userAcks: string,\n        commandName: string,\n        subscriptionId: string\n    ): void  => {\n        if (commandName === 'logon') {\n            this.subscriptions[subscriptionId] = (message: Message) => {\n                if (message.c === 'ack') {\n                    if (message.a === 'processed') {\n                        // Detect error/success\n                        const response = {commandId: subscriptionId, message: message};\n\n                        if (message.status === 'failure') {\n                            reject(response);\n                        }\n                        else {\n                            resolve(response);\n                            delete this.subscriptions[subscriptionId];\n                        }\n                    }\n                }\n            };\n\n            return;\n        }\n\n        // Parse the acks into lists of unique values\n        const parsedUserAcks = Client.parseAcks(userAcks);\n        const parsedSystemAcks = Client.parseAcks(systemAcks);\n\n        let resolveCalled = false;\n\n        // If the command is a subscribe type\n        const isSubscribe = [\n            'subscribe', 'sow_and_subscribe', 'delta_subscribe', 'sow_and_delta_subscribe'\n        ].indexOf(commandName) >= 0;\n\n        // non-logon command\n        this.subscriptions[subscriptionId] = (message: Message) => {\n            // cancel the timeout (if any)\n            clearTimeout(this.timeouts[message.cid]);\n            delete this.timeouts[message.cid];\n\n            // Detect an Ack message\n            if (message.c === 'ack') {\n                if (message.a === 'processed') {\n                    // Detect failure/retry/success\n                    if (message.status === 'failure') {\n                        if (reject) { reject(new Error(message.reason)); }\n                    }\n                    // retry case - perhaps need to update the token\n                    else if (message.status === 'retry') {\n                        this.connection.close(4000, 'Authentication token/password must be updated/renewed');\n                        return;\n                    }\n                    else {\n                        if (message.opts !== undefined) {\n                            // try to find max_backlog option, and if found, adjust the batchSize accordingly\n                            const maxBacklogValue = Client.maxBacklogRegex.exec(message.opts)[1];\n\n                            // if we have a max backlog value, we ignore still in favor of timeout (if set)\n                            if (maxBacklogValue !== undefined && !this._ackBatch.ackTimeout) {\n                                if (this._ackBatch.ackBatchSize > +maxBacklogValue) {\n                                    this._ackBatch.ackBatchSize = +maxBacklogValue;\n                                }\n                            }\n                        }\n\n                        if (resolve) { resolve(subscriptionId); }\n                    }\n                }\n\n                const userAckIndex = parsedUserAcks.indexOf(message.a);\n                const ackIndex = parsedSystemAcks.indexOf(message.a);\n\n                // Detect if the message should be reported to the message handler\n                if (userAckIndex >= 0 && messageHandler) {\n                    // Deliver the message\n                    message = Message.fromObject(message);\n                    messageHandler(message);\n                }\n\n                // Delete acks from the delivery lists\n                if (ackIndex >= 0) {\n                    parsedSystemAcks.splice(ackIndex, 1);\n                }\n                if (userAckIndex >= 0) {\n                    parsedUserAcks.splice(userAckIndex, 1);\n                }\n\n                // Delete the handler after getting all the acknowledgment messages in order to not overflow the heap\n                if (parsedUserAcks.length === 0 && parsedSystemAcks.length === 0) {\n                    if (!isSubscribe) {\n                        delete this.subscriptions[subscriptionId];\n                    }\n                }\n            }\n            // Timeout error\n            else if (message.c === 'timeout') {\n                reject({commandId: subscriptionId, message: message});\n            }\n            else if (messageHandler) {\n                // assign a header wrapper\n                message = Message.fromObject(message);\n\n                // a message for a bookmark subscription\n                // detect queue messages\n                const isQueue = message.lp !== undefined;\n\n                if (message.bm && this._bookmarkStore && !isQueue) {\n                    if (!this._bookmarkStore.isDiscarded(message)) {\n                        // log the bookmark\n                        this._bookmarkStore.log(message);\n                        messageHandler(message);\n                    }\n                }\n                // if this is a queue and auto-ack is enabled\n                else if (isQueue && this._autoAck) {\n                    // if the message handler does not throw an exception, ack the message\n                    try {\n                        messageHandler(message);\n                        this.ack(message);\n                    }\n                    catch (err) { this.onError(err); }\n                }\n                else {\n                    // simply deliver the message\n                    messageHandler(message);\n                }\n\n                // if no acks were expected and the first message is an actual message, resolve the command\n                if (resolve && !resolveCalled) {\n                    resolve(subscriptionId);\n                    resolveCalled = true;\n                }\n            }\n        };\n    }\n\n    /**\n     * This internal method invokes the corresponding callback handler (if any), based on id.\n     * @param {string} id the id of the message to handle.\n     * @param {any} message message to handle.\n     * @private\n     * @hidden\n     */\n    private invokeHandler = (id: string, message: any): void => {\n        const handler = this.subscriptions[id];\n\n        // process persisted ack first\n        if (message.c === 'ack' && message.a === 'persisted') {\n            this.persistedAckReceived(message);\n        }\n\n        // deliver the message\n        if (handler) {\n            try {\n                handler(message);\n            }\n            catch (e) {\n                if (this._errorHandler) {\n                    this._errorHandler(e);\n                }\n            }\n        }\n    }\n\n    /**\n     * This internal method reacts to a peristed ack message received in order to update publish and bookmark stores.\n     *\n     * @param {Message} message The persisted ack message.\n     * @private\n     * @hidden\n     */\n    private persistedAckReceived = (message: Message): void => {\n        const sequenceId = BigInteger(message.s);\n\n        // publish store\n        if (this._publishStore && message.s !== undefined) {\n            if (message.status === 'success') {\n                // there is persisted record update for this client, let's discard persisted messages\n                this._publishStore.discardUpTo(sequenceId);\n\n                const lastPersisted = this._publishStore.lastPersisted();\n                if (lastPersisted !== null && this.sequenceId.compare(lastPersisted) <= 0) {\n                    this.sequenceId = lastPersisted;\n                }\n            }\n            // Failure occured, let's replay this single message\n            else {\n                if (sequenceId.compare(0) > 0) {\n                    try {\n                        this._publishStore.replaySingle(this.send, sequenceId);\n                    }\n                    catch (err) {\n                        console.error('Replay error: ', err);\n                    }\n                }\n            }\n        }\n\n        // bookmark store\n        const isQueue = message.lp !== undefined;\n        if (this._bookmarkStore && message.sub_id !== undefined && message.bm !== undefined && !isQueue) {\n            if (message.status === 'success' && this.subscriptions[message.sub_id] !== undefined) {\n                if (message.bm.length > 1) {\n                    // report that all other messages have been persisted\n                    this._bookmarkStore.persisted(message.sub_id, message.bm);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * This internal method is called upon receiving a heartbeat message from the server. It verifies if it's time to\n     * send a heartbeat message by verifiying that the timedelta between current time and last timestamp is > pulse\n     * interval. If the method is forced to do so, the timestamp value is ignored.\n     *\n     * @param {boolean} force If the heartbeat message MUST be sent.\n     * @private\n     * @hidden\n     */\n    private checkAndSendHeartbeat = (force: boolean): void => {\n        if (!this._heartbeat || (this._heartbeat && !this._heartbeat.timestamp)) { return; }\n\n        // timer expired, let's send the HB message (or maybe we just do it)\n        if (force || (new Date().getTime() - this._heartbeat.timestamp.getTime()) > this._heartbeat.interval * 1000) {\n            // assign the new timestamp\n            this._heartbeat.timestamp = new Date();\n\n            // reset the heartbeat timeout timer\n            clearTimeout(this._heartbeat.timeoutId);\n            this._heartbeat.timeoutId = setTimeout(\n                this._heartbeat.onHeartbeatAbsence.bind(this),\n                this._heartbeat.timeout * 1000\n            );\n\n            // Do the beat\n            this.execute(new Command('heartbeat').options('beat'));\n        }\n    }\n\n\n    /**\n     * This internal method is being invoked by the WebSocket connection's onmessage event handler.\n     *\n     * State Machine:\n     *    SOW command\n     *    |- 'ack' failure\n     *    |     |- done\n     *    |- 'ack' success\n     *    |- 'group_begin'\n     *    |- 0 or more of 'sow' batch  (bs contains number of records following)\n     *    |     |- record header\n     *    |     |- record data\n     *    |- 'group_end'\n     *    |- done\n     *\n     * @param event message event from the WebSocket connection.\n     * @private\n     * @hidden\n     */\n    private onMessage = (event: MessageEvent): void => {\n        const state = this.messageState;\n\n        try {\n            let message: any;\n\n            if (!state.recordsRemaining) {\n                // Message body\n                if (state.publishHeader) {\n                    // This event contains data for our last publish.\n                    try {\n                        state.publishHeader.data = this.typeHelper.deserialize(event.data);\n                    }\n                    catch (err) {\n                        // if there was a parsing error, we still need to expect new message after, thus the header = 0\n                        state.publishHeader = null;\n                        throw err;\n                    }\n\n                    const subIds = state.publishHeader.sids.split(',');\n                    for (const subId of subIds) {\n                        this.invokeHandler(subId, state.publishHeader);\n                    }\n\n                    state.publishHeader = null;\n                    return;\n                }\n\n                // Otherwise, this is the message header.\n                message = JSON.parse(event.data);\n                if (message.s !== undefined) {\n                    message.s = Client.seqRegex.exec(event.data)[1];\n                }\n\n                switch (message.c) {\n                    case 'p': case 'publish': case 'oof':\n                        state.publishHeader = message;\n                        this.invokeHandler(message.query_id ? message.query_id : message.cid, message);\n                        break;\n                    case 'sow':\n                        state.currentSow = message;\n                        state.mergedHeader = false;\n                        state.recordsRemaining = message.bs; // batch size\n                        break;\n                    case 'group_begin':\n                        state.inGroup = true;\n                        this.invokeHandler(message.query_id, message);\n                        break;\n                    case 'group_end':\n                        state.inGroup = false;\n                        this.invokeHandler(message.query_id, message);\n                        break;\n                    case 'ack':\n                        this.invokeHandler(message.query_id ? message.query_id : message.cid, message);\n                        break;\n                    case 'heartbeat':\n                        if (this._heartbeat && this._heartbeat.timestamp) {\n                            const timedelta = new Date().getTime() - this._heartbeat.timestamp.getTime();\n                            // if the interval is > than the timeout, let's send HB immediately\n                            if (this._heartbeat && timedelta > this._heartbeat.interval * 1000) {\n                                this.checkAndSendHeartbeat(true);\n                            }\n                        }\n                        return;\n                }\n\n                // just sync heartbeat info (if needed)\n                if (this._heartbeat) {\n                    this.checkAndSendHeartbeat(false);\n                }\n            }\n            else {\n                // SOW Batch Processing Logic - Message header\n                if (!state.mergedHeader) {\n                    message = JSON.parse(event.data);\n                    state.currentSow.k = message.k;\n                    state.currentSow.x = message.x;\n                    state.currentSow.ts = message.ts;\n                    state.mergedHeader = true;\n                }\n                // SOW Batch - Message body\n                else {\n                    // Adjust these before a possible parsing failure\n                    state.mergedHeader = false;\n                    --(state.recordsRemaining);\n\n                    // this can fail, but we're good since we adjusted state machine\n                    state.currentSow.data = this.typeHelper.deserialize(event.data);\n\n                    this.invokeHandler(state.currentSow.query_id, state.currentSow);\n                }\n            }\n        }\n        catch (e) {\n            this.onError({\n                name: '997',\n                message: 'Error ' + e.message + ' encountered while processing message (' + event.data + ') from AMPS',\n                stack: null\n            });\n        }\n    }\n\n    /**\n     * This method returns the server version returned by the AMPS server in the logon acknowledgement.\n     * If logon has not been performed yet, returns null.\n     * @returns The version of the AMPS server.\n     */\n    serverVersion(): string {\n        return this._serverVersion;\n    }\n\n    /**\n     * This method returns the server version returned by the AMPS server in the logon acknowledgement in a form\n     * of an integer XXYYZZWWW. For example, for 5.2.1.22 will be represented as `050201022`.\n     * If logon has not been performed yet, returns 0.\n     * @returns The version of the AMPS server.\n     */\n    serverVersionAsInt(): number {\n        return this._serverIntVersion;\n    }\n\n    /**\n     * This method is a setter/getter for the client's name.\n     * If logon has not been performed yet and the name was not set, returns null.\n     * @param {string} name The name of the AMPS client instance.\n     * @returns The client object if the setter is called. The name of the AMPS\n     * client instance (if any) otherwise.\n     */\n    name(name?: string): Client | string {\n        if (name && name.length > 0) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the client name when connected');\n            }\n\n            this._name = name;\n            return this;\n        }\n\n        return this._name;\n    }\n\n    /**\n     * This static method returns a version of the AMPS client.\n     * @returns The version of this AMPS client.\n     */\n    static version() {\n        return '5.3.0.0.333340.b0dae99';\n    }\n\n    /**\n     * This is the private method that sends commands to an AMPS server. It's allowed to use it outside for\n     * specific purposes such as custom subscription manager implementations. Please reach our specialists if\n     * you're implementing something like that.\n     *\n     * @param {Header} header The header object to send.\n     * @param {any} data The data to send.\n     * @param {number} timeout The timeout in milliseconds to send the message and get a response.\n     * @private\n     * @hidden\n     */\n    send(header: Header, data?: any, timeout?: number): void {\n        if (!this.connection) { throw new Error('Must connect before sending data'); }\n\n        // short circuit - cannot send non-logon commands before connect and logon\n        if (!this._isConnected && header.c !== 'logon') { return; }\n\n        // set the command timeout, if any\n        if (timeout !== undefined && timeout > 0) {\n            this.timeouts[header.cid] = setTimeout(() => this.onTimeout(header.cid), timeout);\n        }\n\n        // serialize the header\n        const serializedHeader: string = JSON.stringify(header);\n        let sizeBuffer;\n\n        // a command without data\n        if (!data) {\n            sizeBuffer = TypeHelper.littleEndianSizeBuffer(1);\n\n            // pass the size to the transport filter, if provided\n            if (this._transportFilter) { this._transportFilter(sizeBuffer, true); }\n            this.connection.send(sizeBuffer);\n\n            // pass data to the transport filter, if provided\n            if (this._transportFilter) { this._transportFilter(serializedHeader, true); }\n            this.connection.send(serializedHeader);\n        }\n        // command with data, probably publish\n        else {\n            // serialize data\n            data = this.typeHelper.serialize(data);\n            sizeBuffer = TypeHelper.littleEndianSizeBuffer(data.length + 1);\n\n            // pass the size to the transport filter, if provided\n            if (this._transportFilter) { this._transportFilter(sizeBuffer, true); }\n            this.connection.send(sizeBuffer);\n\n            // pass data to the transport filter, if provided\n            if (this._transportFilter) { this._transportFilter(serializedHeader, true); }\n            this.connection.send(serializedHeader);\n\n            for (const item of data) {\n                // pass data to the transport filter, if provided\n                if (this._transportFilter) { this._transportFilter(item, true); }\n                this.connection.send(item);\n            }\n        }\n    }\n\n    /**\n     * This is the private event that handles the execution of a command that has been timed out.\n     * @param {string} commandId the id of a command to time out.\n     * @private\n     * @hidden\n     */\n    private onTimeout(commandId: string): void {\n        this.invokeHandler(commandId, {c: 'timeout', reason: 'The command has been timed out.'});\n        delete this.subscriptions[commandId];\n    }\n\n    /**\n     * This is a general method that is executed if an error occured. It reports the error to the client's\n     * connect() execution handler.\n     * @param {Error} err the error to report.\n     * @private\n     * @hidden\n     */\n    private onError(err: Error): void {\n        // Report the general error to the error handler (if any)\n        if (this._errorHandler) {\n            this._errorHandler(err);\n        }\n    }\n\n    /**\n     * This is a method that is only used with external modules like SubscribeManager. Reports the connection\n     * status of the client.\n     *\n     * @returns The connection status.\n     * @hidden\n     */\n    isConnected(): boolean {\n        return this._isConnected;\n    }\n\n    /**\n     * This is a method that is only used with external modules like SubscribeManager. Provides next available id\n     * for a command/message.\n     *\n     * @returns The sub/command id.\n     * @hidden\n     */\n    nextSubId(): string {\n        return (this._nextSubId++).toString();\n    }\n\n    /**\n     * This method replaces a message handler for a subscription. It is only used by a SubscribeManager object.\n     * It is not intended to be used otherwise.\n     *\n     * @param {string} subId The subscription id.\n     * @param {function} messageHandler The message handler function.\n     * @hidden\n     */\n    setMessageHandler(subId: string, messageHandler: (message: Message) => void): void {\n        if (this.subscriptions) {\n            this.subscriptions[subId] = messageHandler;\n        }\n    }\n\n    /**\n     * This is the command execution interface method that allows to send commands that don't have a convenience\n     * method or require\n     * additional settings that are not provided by the convenience methods.\n     * The purpose of the method is to execute Command objects.\n     *\n     * ```javascript\n     * var subscribeCommand = new amps.Command('subscribe')\n     *   .topic('messages')\n     *   .filter('/id > 20');\n     *\n     * client.execute(subscribeCommand, function(message) {\n     *     console.log('message: ', message.data);\n     * }).then(function(commandId) {\n     *     console.log('commandId: ', commandId);\n     * });\n     * ```\n     * @param {Command} command a Command object.\n     * @param {function} handler a callback to report the messages (including ack messages if they were requested).\n     * @param {number} timeout a timeout value for the command execution in milliseconds.\n     * @returns The promise object fullfilled with the command id created.\n     */\n    execute(command: Command, handler?: (message: Message) => void, timeout?: number): Promise<string> {\n        return new Promise((resolve: (commandId: string) => void, reject: (error: Error) => void) => {\n            // set the command id and the initial (empty) ack type\n            command.commandId(this.nextSubId());\n            let systemAckType = '';\n            let notSow = false;\n            let isSubscribe = false;\n            let isPublish = false;\n\n            switch (command.command()) {\n                case 'subscribe':\n                case 'delta_subscribe':\n                    // bookmarked subscription\n                    if (command.bookmark()) {\n                        // bookmark store\n                        if (this._bookmarkStore) {\n                            // request persisted ack\n                            systemAckType = 'persisted,';\n                            const bookmark = command.bookmark();\n                            const bmSubId = command.subId() ? command.subId() : command.commandId();\n\n                            if (bookmark === Client.Bookmarks.MOST_RECENT) {\n                                command.bookmark(this._bookmarkStore.mostRecent(bmSubId));\n                            }\n                            else if (bookmark !== Client.Bookmarks.NOW && bookmark !== Client.Bookmarks.EPOCH) {\n                                const _message = command.toMessage();\n                                this._bookmarkStore.log(_message);\n                                this._bookmarkStore.discard(_message);\n                                this._bookmarkStore.persisted(bmSubId, _message.bm);\n                            }\n                        }\n                        else if (Client.Bookmarks.MOST_RECENT === command.bookmark()) {\n                            command.bookmark(Client.Bookmarks.EPOCH);\n                        }\n                    }\n\n                    // This is a non-sow command\n                    notSow = true;\n\n                    /* falls through */\n                case 'sow_and_subscribe':\n                case 'sow_and_delta_subscribe':\n                    if (!command.subId()) {\n                        command.subId(command.commandId());\n                    }\n\n                    isSubscribe = true;\n                    /* falls through */\n                case 'sow':\n                    if (!notSow && !command.queryId()) {\n                        command.queryId(command.subId() ? command.subId() : command.commandId());\n                    }\n\n                    systemAckType += 'processed';\n\n                    // for SOW only, we get a completed ack so we know when to remove the handler\n                    if (isSubscribe === false) {\n                        systemAckType += ',completed';\n                    }\n\n                    // if a custom batchSize value is not set, it is 10 by default for SOW queries\n                    if (!notSow && command.batchSize() === undefined) {\n                        command.batchSize(10);\n                    }\n\n                    // Assign the handler\n                    this.makeCommandHandler(\n                        handler,\n                        resolve,\n                        reject,\n                        systemAckType,\n                        command.ackType(),\n                        command.command(),\n                        isSubscribe ? (command.queryId() ? command.queryId() : command.subId()) : command.commandId()\n                    );\n\n                    break;\n                case 'unsubscribe':\n                    if (!command.subId()) {\n                        command.subId('all');\n                    }\n\n                    // delete all subscriptions\n                    if (command.subId() === 'all') {\n                        if (this._subscriptionManager) {\n                            this._subscriptionManager.clear();\n                        }\n\n                        this.subscriptions = {};\n                    }\n                    else {\n                        if (this._subscriptionManager) {\n                            this._subscriptionManager.unsubscribe(command.subId());\n                        }\n\n                        delete this.subscriptions[command.subId()];\n                    }\n                    /* falls through */\n                // The below commands can have ack messages received, even though it can only be in the message handler\n                case 'flush':\n                case 'heartbeat':\n                case 'stop_timer':\n                    systemAckType = 'processed';\n                    /* falls through */\n\n                    // Assign the handler\n                    this.makeCommandHandler(\n                        handler,\n                        resolve,\n                        reject,\n                        systemAckType,\n                        command.ackType(),\n                        command.command(),\n                        isSubscribe ? command.subId() : command.commandId()\n                    );\n                    break;\n                case 'sow_delete':\n                case 'delta_publish':\n                case 'publish':\n                    isPublish = true;\n\n                    // if we have a publish store, persist messages\n                    if (this._publishStore) {\n                        systemAckType = 'persisted';\n\n                        // Increment the sequence id for the next publish\n                        this.sequenceId = this.sequenceId.next();\n                        command.sequenceId(this.sequenceId);\n                    }\n                    else { systemAckType = ''; }\n\n                    // Assign the handler (fall through) but only if a user requested an acknowledgment\n                    if (command.ackType() !== undefined) {\n                        this.makeCommandHandler(\n                            handler,\n                            null,\n                            null,\n                            '', // never expect any acks for publish/delta publish in the command handler -\n                                // catch only user-requested acks in onMessage\n                            command.ackType(),\n                            command.command(),\n                            command.commandId()\n                        );\n                    }\n\n                    // Resolve right away\n                    resolve(command.commandId());\n                    break;\n                default: break;\n            }\n\n            // Add user-requested acks (those will be delivered in the message handler as well)\n            if (command.ackType() !== undefined) {\n                command.ackType(systemAckType + ',' + command.ackType());\n            }\n            else if (command.command() !== 'heartbeat') {\n                command.ackType(systemAckType);\n            }\n\n            // Add credentials in case of the logon command\n            if (command.command() === 'logon') {\n                command.ackType('processed');\n\n                if (this._logonCorrelationId) {\n                    command.correlationId(this._logonCorrelationId);\n                }\n\n                command.rawHeader().version = Client.version();\n\n                if (this._logonOptions) {\n                    command.options(this._logonOptions);\n                }\n\n                command.clientName(this._name);\n\n                if (this.username !== undefined) {\n                    command.rawHeader().user_id = this.username;\n\n                    if (this.password !== undefined && this.password.length) {\n                        command.rawHeader().pw = this.password;\n                    }\n                }\n\n                this.makeCommandHandler(\n                    handler,\n                    resolve,\n                    reject,\n                    command.ackType(),\n                    '',\n                    command.command(),\n                    command.commandId()\n                );\n            }\n\n            // store the subscription if we have a subscription manager set\n            if (isSubscribe && this._subscriptionManager) {\n                this._subscriptionManager.subscribe(command.rawHeader(), this.subscriptions[command.commandId()]);\n            }\n\n            // Send the command\n            try {\n                if (isPublish && this._publishStore) {\n                    this._publishStore.store(command.toMessage());\n                }\n\n                if (this.connection) {\n                    this.send(command.rawHeader(), command.data(), timeout);\n                }\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    /**\n     * This method connects the AMPS client to the server. It automatically calls logon() upon successful connection.\n     * If the [[ServerChooser]] is set, arguments are ignored.\n     *\n     * ```javascript\n     * var client = new amps.Client('my-application');\n     *\n     * client.connect('ws://localhost:9100/amps/json')\n     *     .then(function() {\n     *         // now the client is ready to send and receive any commands\n     *         // ...\n     *     })\n     *     .catch(function(err) {\n     *         console.error('Connection error: ', err);\n     *     });\n     * ```\n     *\n     * @param {string} uri The URI containing all required credentials/addresses/types.\n     * @param {Authenticator} authenticator The authenticator object for custom authentication scenarios.\n     * See [[Authenticator]] for details.\n     * @param {string} logonOptions The logon options, such as `pretty``.\n     * @returns The promise object with the result of fullfilling/failing the connection promise.\n     */\n    connect(uri?: string, authenticator?: Authenticator, logonOptions?: string): Promise<Message> {\n        let currentAuthenticator: Authenticator;\n\n        // if there's no server chooser yet, create a default one\n        const noChooser = this._serverChooser === null || this._serverChooser === undefined;\n        if (noChooser) {\n            if (uri) {\n                const chooser = new DefaultServerChooser();\n                chooser.add(uri, authenticator ? authenticator : new DefaultAuthenticator());\n                this._serverChooser = chooser;\n            }\n            else {\n                throw new Error('No Server Chooser or URI Provided');\n            }\n        }\n\n        // if there's no delay strategy set\n        if (!this._delayStrategy) {\n            // HAClient mode: if there's no delay strategy assigned, we're gonna use Exponential Delay with defaults\n            if (!noChooser) {\n                this._delayStrategy = new ExponentialDelayStrategy();\n            }\n            // Else: Classic mode: if there's no chooser and no delay strategy, have classic behavior (don't reconnect)\n        }\n\n        // set the sequence id\n        this.sequenceId = BigInteger(new Date().getTime().toString() + '000000');\n\n        /**\n         * This method is called when the delay timer is fired (i.e. it's time to attempt to create a connection).\n         * @ignore\n         */\n        const onDelayTick = (resolve: () => void, reject: (error: Error) => void): void => {\n            const currentUri = this._serverChooser.getCurrentURI();\n            currentAuthenticator = this._serverChooser.getCurrentAuthenticator();\n            if (!currentAuthenticator) { currentAuthenticator = new DefaultAuthenticator(); }\n\n            const parsedURI = Helpers.parseUri(currentUri);\n\n            // validate the URI\n            const pathComponents = parsedURI.path.split('/');\n            const protocol = pathComponents[1].toLowerCase();\n            let messageType: string;\n\n            if (pathComponents.length > 2) {\n                messageType = pathComponents[2];\n            }\n            else { messageType = ''; }\n\n            if (protocol !== 'amps') {\n                throw new Error('Specification of message type requires amps protocol');\n            }\n\n            // if logon options were supplied\n            if (logonOptions) { this._logonOptions = logonOptions; }\n            if (!this._logonOptions) { this._logonOptions = ''; }\n\n            // parse 'pretty' option (the only one supported ATM)\n            if (parsedURI.queryKey.pretty === 'true' && this._logonOptions.indexOf('pretty') < 0) {\n                if (this._logonOptions.length > 0) {\n                    this._logonOptions += ',pretty';\n                }\n                else {\n                    this._logonOptions = 'pretty';\n                }\n            }\n\n            const connectionUri = parsedURI.source.split('?')[0];\n\n            // Node.js\n            if (IS_NODE || IS_ELECTRON) {\n                const headers: {Authorization?: string} = {};\n\n                if (parsedURI.user.length > 0 || parsedURI.password.length > 0) {\n                    headers.Authorization = 'Basic ' +\n                        new Buffer(parsedURI.user + ':' + parsedURI.password).toString('base64');\n                }\n\n                this.connection = new W3WebSocket(\n                    connectionUri, null, null,\n                    headers, null,\n                    {\n                        maxReceivedFrameSize: 0x10000000000,  // support large messages\n                        assembleFragments: true\n                    }\n                );\n            }\n            // everything else\n            else {\n                this.connection = new W3WebSocket(connectionUri);\n            }\n\n            this.connection.binaryType = 'arraybuffer';\n            this.typeHelper = TypeHelper.helper(messageType);\n\n            this._isConnected = false;\n            this.connection.onopen = () => {\n                this._broadcastStateChange(Client.ConnectionStateListener.Connected);\n\n                this.username = parsedURI.user;\n                this.password = parsedURI.password;\n\n                try { this.connection.send(messageType === 'json' ? 'text' : 'binary'); }\n                // at this point onDelayTick has failed, the connection attempt has failed:\n                // there's no need to handle it in any special way since the onclose method\n                // will be called shortly after\n                catch (err) { return; }\n\n                // Mark as connected and report success to the chooser, and reset the strategy\n                this._serverChooser.reportSuccess(this.connection);\n\n                if (this._delayStrategy) {\n                    this._delayStrategy.reset();\n                }\n\n                // We're done here\n                resolve();\n            };\n\n            this.connection.onclose = (event: CloseEvent) => {\n                // onclose can only be called in case of a connection error, otherwise we null it first\n                let reason = event.reason;\n                if (reason.length === 0) {\n                    switch (event.code) {\n                        case 1002:\n                            reason = 'The endpoint is terminating the connection due to a protocol error.';\n                            break;\n\n                        case 1003:\n                            reason = 'Connection terminated: AMPS received data of a type it cannot accept';\n                            break;\n\n                        case 1006:\n                            reason = 'Connection Failed';\n                            break;\n\n                        case 1007:\n                            reason = `The endpoint is terminating the connection because a message was received that\n                            contained inconsistent data `;\n                            break;\n\n                        case 1009:\n                            reason = 'Connection terminated: a data frame was received that is too large.';\n                            break;\n\n                        case 1011:\n                            reason = `The server is terminating the connection because it encountered an unexpected\n                            condition that prevented it from fulfilling the request.`;\n                            break;\n\n                        default:\n                            reason = 'Unknown error';\n                    }\n                }\n\n                onConnectionError({name: event.code.toString(), message: reason}, resolve, reject);\n            };\n\n            this.connection.onerror = (event: Event) => {};\n\n            this.connection.onmessage = (message: any) => {\n                // pass the incoming message if the transport filter is set\n                if (this._transportFilter) { this._transportFilter(message, false); }\n                this.onMessage(message);\n            };\n        };\n\n        /**\n         * This internal method is called upon a connection error.\n         *\n         * @param {Error} err An error object.\n         * @param {function} resolve Promise-resolving function that needs to be binded to the onDelayTick method.\n         * @param {function} reject Promise-rejecting function that needs to be binded to the onDelayTick method.\n         */\n        const onConnectionError = (err: Error, resolve: (message?: Message) => void, reject: (error: Error) => void):\n        void => {\n            const wasConnected = this._isConnected;\n            this._isConnected = false;\n\n            // report failure to the chooser\n            this._serverChooser.reportFailure(err, this.connection);\n            this._broadcastStateChange(Client.ConnectionStateListener.Disconnected);\n\n            // wipe the previous connection object\n            if (this.connection) {\n                this.connection.onopen = null;\n                this.connection.onmessage = null;\n                this.connection.onerror = null;\n                this.connection.onclose = null;\n                this.connection.close();\n            }\n            this.connection = null;\n\n            // wipe previous subscriptions\n            this.subscriptions = {};\n\n            // reset the state machine\n            this.messageState = {\n                inGroup: false,\n                currentSow: null,\n                mergedHeader: false,\n                recordsRemaining: 0,\n                publishHeader: null\n            };\n\n            let onTimeoutInternal;\n\n            // report disconnection to the disconnect handler instead of reconnecting ourselves\n            if (this._disconnectHandler) {\n                reject(err);\n\n                // report to the error handler as well if the connection error occurs after successful connection\n                if (wasConnected) {\n                    this.onError(err);\n                }\n\n                return this._disconnectHandler(this, err);\n            }\n\n            // if we were connected before\n            if (wasConnected) {\n                // reconnect\n                onTimeoutInternal = () => openConnection().then(beforeLogon).then(logon).then(afterLogon).catch(reject);\n            }\n            // connecting for the first time or attempting to reconnect\n            else {\n                onTimeoutInternal = onDelayTick.bind(null, resolve, reject);\n            }\n\n            // attempting to reconnect/connect after a delay\n            try {\n                if (this._delayStrategy) {\n                    setTimeout(\n                        onTimeoutInternal,\n                        this._delayStrategy.getConnectWaitDuration(this._serverChooser.getCurrentURI())\n                    );\n                }\n                else {\n                    throw err;\n                }\n\n            }\n            // if we're here, that's the RetryTimeExceeded error - that means we're giving up on connecting\n            catch (err) {\n                if (this._delayStrategy) {\n                    this._delayStrategy.reset();\n                }\n\n                // report errors only after successfully connecting at least once\n                if (wasConnected || this._nextSubId > 2) { this.onError(err); }\n\n                this.disconnect();\n                reject(err);\n            }\n        };\n\n        /**\n         * This internal method initiates a new connection.\n         * @ignore\n         */\n        const openConnection = (): Promise<any> => {\n            return new Promise((resolve: () => void, reject: (error: Error) => void) => {\n                // classic mode - no autoreconnect\n                if (!this._delayStrategy) {\n                    onDelayTick(resolve, reject);\n                }\n                else {\n                    setTimeout(() => {\n                        try {\n                            onDelayTick(resolve, reject);\n                        }\n                        // if we're here, that's the critical error - that means we're giving up on connecting\n                        catch (err) {\n                            const error = new Error(err.message + '\\n' + this._serverChooser.getError());\n                            error.name = err.name;\n\n                            this.onError(error);\n\n                            this._delayStrategy.reset();\n                            this.disconnect();\n\n                            reject(error);\n                        }\n                    }, this._delayStrategy.getConnectWaitDuration(this._serverChooser.getCurrentURI()));\n                }\n            });\n        };\n\n        /**\n         * This internal method is being called right before the logon (mainly in order to use authenticator methods).\n         * @ignore\n         */\n        const beforeLogon = (): Promise<any> => {\n            return currentAuthenticator\n                .authenticate(this.username, this.password)\n                .then(passwordHeader => this.password = passwordHeader)\n\n                // if the authentication wasn't successful\n                .catch((err: Error) => {\n                    this.disconnect();\n                    throw err;\n                });\n        };\n\n        /**\n         * This internal method performs the logon command. Upon result, the promise object will be fullfilled.\n         * of failure.\n         * @ignore\n         */\n        const logon = (): Promise<any> => {\n            /**\n             * This internal function is called once the ack for the logon command has been received. It's used for\n             * setting up the serverVersion variable and proceed with the authenticator methods.\n             *\n             * @param {object} message The ack message from the server.\n             * @returns The promise object.\n             * @ignore\n             */\n            const uponLogonAttempt = (result: any): Promise<any> => {\n                const message: Message = result.message;\n\n                return new Promise((resolve: (message: Message) => void, reject: (error: Error) => void) => {\n                    if (message.c === 'ack' && message.a === 'processed') {\n                        switch (message.status) {\n                            case 'success':\n                                if (message.version.indexOf('develop') >= 0) { message.version = '5.3.0.0'; }\n                                this._serverVersion = message.version;\n\n                                const versionParts = message.version.split('.');\n                                this._serverIntVersion =\n                                      +(versionParts[0]) * Math.pow(10, 7)\n                                    + +(versionParts[1]) * Math.pow(10, 5)\n                                    + +(versionParts[2]) * Math.pow(10, 3)\n                                    + +(versionParts[3]);\n\n                                currentAuthenticator.completed(\n                                    this.username,\n                                    this.password,\n                                    message.reason ? message.reason : ''\n                                );\n\n                                resolve(message);\n\n                                break;\n\n                            case 'retry':\n                                currentAuthenticator.retry(message.user_id, message.pw)\n                                    // if the authentication wasn't successful\n                                    .catch((err: Error) => {\n                                        this.disconnect();\n                                        throw err;\n                                    })\n                                    .then((passwordHeader) => {\n                                        this.password = passwordHeader;\n\n                                        logon().then(resolve).catch(reject);\n                                    });\n                                break;\n\n                                // Failure case\n                            default:\n                                reject(Error(message.reason));\n                        }\n                    }\n                });\n            };\n\n            return this.execute(new Command('logon')).then(uponLogonAttempt);\n        };\n\n        /**\n         * This internal method is being called upon successful logon. In case of the heartbeat option enabled, it\n         * sets up and intiates the heartbeat protocol.\n         * @ignore\n         */\n        const afterLogon = (message: Message): Promise<any> => {\n            this._broadcastStateChange(Client.ConnectionStateListener.LoggedOn);\n\n            // add header methods\n            if (message !== undefined) { message = Message.fromObject(message); }\n\n            return new Promise((resolve: (message: Message) => void, reject: (err: Error) => void) => {\n                this._isConnected = true;\n\n                // enable heartbeat mode\n                if (this._heartbeat) {\n                    establishHeartbeat();\n                }\n\n                // if we have a subscription manager restore subscriptions\n                if (this._subscriptionManager) {\n                    this._subscriptionManager.resubscribe(this);\n                    this._broadcastStateChange(Client.ConnectionStateListener.Resubscribed);\n                }\n\n                // if we have a publish store, it's about time to republish not-persisted-yet messages\n                if (this._publishStore) {\n                    // there is persistence record for this client, let's catch up\n                    this._publishStore.discardUpTo(message.header.sequenceId());\n\n                    // after catching up, here's the new sequence id\n                    const lastPersisted = this._publishStore.lastPersisted();\n                    if (lastPersisted !== null && this.sequenceId.compare(lastPersisted) <= 0) {\n                        this.sequenceId = lastPersisted;\n                    }\n\n                    const self = this;\n                    (function replayTry() {\n                        try {\n                            self._publishStore.replay(self.send.bind(self));\n                            self._broadcastStateChange(Client.ConnectionStateListener.PublishReplayed);\n\n                            // reset the ack timeout timer (if set)\n                            if (self._ackBatch.ackTimeout) {\n                                clearTimeout(self._ackBatch.ackTimeoutTimerId);\n                                self._ackBatch.ackTimeoutTimerId = setTimeout(\n                                    self._onAckTimer.bind(self),\n                                    self._ackBatch.ackTimeout\n                                );\n                            }\n\n                            // finally resolve\n                            resolve(message);\n                        }\n                        catch (err) {\n                            if (self.connection && self._isConnected) {\n                                setTimeout(replayTry, 500);\n                            }\n                            // disconnected while replaying (retry again)\n                            else {\n                                onConnectionError(err, resolve, reject);\n                            }\n                        }\n                    })();\n                }\n                else {\n                    // reset the ack timeout timer (if set)\n                    if (this._ackBatch.ackTimeout) {\n                        clearTimeout(this._ackBatch.ackTimeoutTimerId);\n                        this._ackBatch.ackTimeoutTimerId = setTimeout(\n                            this._onAckTimer.bind(this),\n                            this._ackBatch.ackTimeout\n                        );\n                    }\n\n                    // no publish store set, can just proceed\n                    resolve(message);\n                }\n            });\n        };\n\n        /**\n         * This function istablishes the heartbeat mode after a successful logon.\n         * @ignore\n         */\n        const establishHeartbeat = (): void => {\n            this._heartbeat.onHeartbeatAbsence = (): void => {\n                if ((new Date().getTime() - this._heartbeat.timestamp.getTime()) > this._heartbeat.timeout * 1000) {\n                    // clear all timeouts\n                    clearTimeout(this._heartbeat.timeoutId);\n\n                    this._heartbeat.timestamp = null;\n                    this._heartbeat.onHeartbeatAbsence = null;\n\n                    onConnectionError({\n                        name: '4000',\n                        message: 'Heartbeat absence error'\n                    } , () => {}, () => {});\n                }\n            };\n\n            // Starting from here, we have a heartbeat mode with the server enabled\n            this._heartbeat.timestamp = new Date();\n\n            // Initiate the heartbeat procedure\n            this.execute(\n                new Command('heartbeat').ackType('received').options('start,' + this._heartbeat.interval),\n                (message: Message): void => {\n                    if (message.c === 'ack' && message.a === 'received' && message.status === 'success') {\n                        this._broadcastStateChange(Client.ConnectionStateListener.HeartbeatInitiated);\n\n                        // Set heartbeat timeout\n                        if (this._isConnected && this._heartbeat) {\n                            this._heartbeat.timeoutId = setTimeout(\n                                this._heartbeat.onHeartbeatAbsence.bind(this),\n                                this._heartbeat.timeout * 1000\n                            );\n                        }\n                    }\n                }).catch((err: Error): void => {\n                    this.onError({\n                        name: '4000',\n                        message: 'Heartbeat connection error'\n                    });\n                });\n        };\n\n        return openConnection().then(beforeLogon).then(logon).then(afterLogon);\n    }\n\n    /**\n     * This method sets/gets the error handler for all general errors such as connection issues, exceptions, etc.\n     *\n     * ```javascript\n     * var client = new amps.Client().errorHandler(function(err) {\n     *     console.error('err: ', err);\n     * });\n     * ```\n     *\n     * @param {function} errorHandler The callback function that will be invoked in case of a general error.\n     * @returns The client if a setter called, the error handler (if any) otherwise.\n     */\n    errorHandler(): ((error: Error) => void);\n    errorHandler(errorHandler: (error: Error) => void): Client;\n    errorHandler(errorHandler?: (error: Error) => void): ((error: Error) => void) | Client {\n        if (typeof errorHandler === 'function') {\n            this._errorHandler = errorHandler;\n            return this;\n        }\n\n        return this._errorHandler;\n    }\n\n    /**\n     * This method adds a connection state listener that will be called every time a connection state has been changed.\n     *\n     * ```javascript\n     * var client = new amps.Client();\n     * var listenerId = client.addConnectionStateListener(function(state) {\n     *     console.log('state: ', state);\n     * });\n     *\n     * // ... later\n     * client.removeConnectionStateListener(listenerId);\n     * ```\n     *\n     * @param {function} connectionStateListener The callback function that will be invoked in case of a connection\n     * state change.\n     * @returns The unique monotonically increasing listener id that can be used to remove the listener later.\n     */\n    addConnectionStateListener(connectionStateListener: (connectionState: number) => void): number {\n        if (typeof connectionStateListener === 'function') {\n            this._connectionStateListeners[this._stateListenerId] = connectionStateListener;\n            return this._stateListenerId++;\n        }\n\n        throw new Error('Invalid connection state listener object was provided');\n    }\n\n    /**\n     * This method removes a connection state listener with the id provided.\n     *\n     * ```javascript\n     * var client = new amps.Client();\n     * var listenerId = client.addConnectionStateListener(function(state) {\n     *     console.log('state: ', state);\n     * });\n     *\n     * // ... later\n     * client.removeConnectionStateListener(listenerId);\n     * ```\n     *\n     * @param {number} connectionStateListener The callback function that will be invoked in case of a connection\n     * state change.\n     */\n    removeConnectionStateListener(connectionStateListenerId: number): void {\n        if (connectionStateListenerId) {\n            try {\n                delete this._connectionStateListeners[connectionStateListenerId];\n                return;\n            }\n            catch (err) {}\n        }\n\n        throw new Error('The connection state listener was not found');\n    }\n\n    /**\n     * This is a private internal method that broadcasts the connection state change to the subscribers.\n     * @param {number} connectionState the new connection state.\n     * @private\n     * @hidden\n     */\n    private _broadcastStateChange = (connectionState: number): void => {\n        for (const listenerId in this._connectionStateListeners) {\n            if (this._connectionStateListeners[listenerId]) {\n                this._connectionStateListeners[listenerId](connectionState);\n            }\n        }\n    };\n\n    /**\n     * This method sets/gets the disconnect handler that is in case of an unintentional disconnection.\n     *\n     * ```javascript\n     * var disconnectHandler = function(client, err) {\n     *     // when the Client unintentionally disconnects, this method is invoked.\n     *     console.error('err: ', err);\n     * };\n     *\n     * var client = new amps.Client().disconnectHandler(disconnectHandler);\n     * ```\n     *\n     * @param {function} disconnectHandler The callback function that will be invoked in case of a disconnection.\n     * @returns The client if a setter called, the disconnect handler (if any)\n     * otherwise.\n     */\n    disconnectHandler(): ((client: Client, error: Error) => void);\n    disconnectHandler(disconnectHandler: (client: Client, error: Error) => void): Client;\n    disconnectHandler(disconnectHandler?: (client: Client, error: Error) => void):\n    ((client: Client, error: Error) => void) | Client {\n        if (disconnectHandler !== undefined && typeof disconnectHandler === 'function') {\n            this._disconnectHandler = disconnectHandler;\n            return this;\n        }\n\n        return this._disconnectHandler;\n    }\n\n    /**\n     * This method sets/gets the transport filter to observe incoming and outgoing messages in the format they are\n     * sent and received on the network. This allows you to inspect or modify outgoing messages before they are\n     * sent to the network, and incoming messages as they arrive from the network. This can be especially useful\n     * when using SSL connections, since this gives you a way to monitor outgoing network traffic before it is\n     * encrypted, and incoming network traffic after it is decrypted.\n     *\n     * ```javascript\n     * function printingFilter(data, outgoing) {\n     *     if (outgoing) {\n     *         console.log('OUTGOING ---> ', data);\n     *     }\n     *     else {\n     *         console.log('INCOMING ---> ', data);\n     *     }\n     * }\n     *\n     * var client = new amps.Client().transportFilter(printingFilter);\n     * ```\n     *\n     * @param {function} transportFilter The callback function that will be invoked when data is being sent / received.\n     * @returns The client if a setter called, the transport filter method (if any) otherwise.\n     */\n    transportFilter(): ((data: any, outgoing?: boolean) => void);\n    transportFilter(transportFilter: (data: any, outgoing?: boolean) => void): Client;\n    transportFilter(transportFilter?: (data: any, outgoing?: boolean) => void):\n    ((data: any, outgoing?: boolean) => void) | Client {\n        if (transportFilter !== undefined && typeof transportFilter === 'function') {\n            this._transportFilter = transportFilter;\n            return this;\n        }\n\n        return this._transportFilter;\n    }\n\n    /**\n     * This method sets up the heartbeat mode with the server. It sends a command to AMPS that starts or refreshes\n     * a heartbeat timer. When a heartbeat timer is active, AMPS publishes periodic heartbeat messages to AMPS and\n     * expects the client to respond with a heartbeat message. If the client does not provide a heartbeat within the\n     * time specified, AMPS logs an error and disconnects the connection.\n     *\n     * ```javascript\n     * // Initialize a client with the heartbeat of 5 seconds\n     * var client = new amps.Client().heartbeat(5);\n     * ```\n     *\n     * @param {number} interval the heartbeat value in seconds.\n     * @param {number} timeout the timeout value in seconds. By default it is the heartbeat interval value times 2.\n     * @returns The Client object.\n     */\n    heartbeat(interval: number, timeout?: number): Client {\n        // Set up the default timeout value\n        if (timeout === undefined) { timeout = interval * 2; }\n\n        this._heartbeat = {\n            interval: interval,\n            timeout: timeout\n        };\n\n        return this;\n    }\n\n    /**\n     * This method is a setter/getter for the logon options of the client. Logon options can also be set via the\n     * connect() method as an optional argument. Logon options can't be set after the client is connected and logged on.\n     *\n     * ```javascript\n     * // create a client and set the logon options\n     * var client = new amps.Client().logonOptions('pretty,ack_conflation=300ms');\n     *\n     * // ... access the logon options later\n     * console.log(client.logonOptions());\n     * ```\n     *\n     * @param {string} logonOptions The comma-separated string with logon options of the client.\n     * @returns {string | Client} The client if a setter is called. The logon options (if any) otherwise.\n     */\n    logonOptions(): string;\n    logonOptions(logonOptions: string): Client;\n    logonOptions(logonOptions?: string): string | Client {\n        // setter mode\n        if (logonOptions !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the logon options when connected');\n            }\n\n            this._logonOptions = logonOptions;\n            return this;\n        }\n\n        return this._logonOptions;\n    }\n\n    /**\n     * This method is a setter/getter for the server chooser object of the client.\n     * [[ServerChooser]] interface is used to obtain a URI to connect. The chooser can\n     * only be set before the client is connected. Once a server chooser is set, the client is working in the High\n     * Availability mode and uses a [[DelayStrategy]] object to determine a delay between\n     * reconnection attempts. If no delay strategy was provided, the client will use\n     * [[ExponentialDelayStrategy]] with default settings. AMPS provides the\n     * [[DefaultServerChooser]] implementation.\n     *\n     * ```javascript\n     * // create a server chooser and assign URIs\n     * var chooser = new amps.DefaultServerChooser();\n     * chooser.add('wss://localhost:9000/amps/json');\n     * chooser.add('wss://localhost:9100/amps/json');\n     *\n     * // create a client and assign a server chooser to it\n     * var client = new amps.Client().serverChooser(chooser);\n     *\n     * // ... access the chooser object later\n     * client.serverChooser().add('wss://backup_host:9200/amps/json');\n     * ```\n     *\n     * @param {ServerChooser} serverChooser The serverChooser object of the client.\n     * @returns {ServerChooser | Client} The client if a setter is called. The server chooser(if any) otherwise.\n     */\n    serverChooser(): ServerChooser;\n    serverChooser(serverChooser: ServerChooser): Client;\n    serverChooser(serverChooser?: ServerChooser): ServerChooser | Client {\n        // setter mode\n        if (serverChooser !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the server chooser when connected');\n            }\n\n            this._serverChooser = serverChooser;\n            return this;\n        }\n\n        return this._serverChooser;\n    }\n\n    /**\n     * This method is a setter/getter for the DelayStrategy object of the client. AMPS provides\n     * [[FixedDelayStrategy]] and\n     * [[ExponentialDelayStrategy]] strategies that are used to define a delay\n     * between reconnection attempts. It is possible to implement a custom [[DelayStrategy]].\n     * If it is not set, but the server chooser is used, the client will use [[ExponentialDelayStrategy]] with default\n     * settings.\n     *\n     * ```javascript\n     * // create a client and assign a delay strategy to it\n     * var strategy = new amps.ExponentialDelayStrategy();\n     * var client = new amps.Client().delayStrategy(strategy);\n     *\n     * // ... access the delay strategy object later\n     * client.delayStrategy().reset();\n     * ```\n     *\n     * @param {DelayStrategy} delayStrategy The reconnection delay strategy that the client uses.\n     * @returns The client if a setter is called. The\n     * DelayStrategy object (if any) otherwise.\n     */\n    delayStrategy(): DelayStrategy;\n    delayStrategy(delayStrategy: DelayStrategy): Client;\n    delayStrategy(delayStrategy?: DelayStrategy): DelayStrategy | Client {\n        // setter mode\n        if (delayStrategy !== undefined) {\n            this._delayStrategy = delayStrategy;\n            return this;\n        }\n\n        return this._delayStrategy;\n    }\n\n    /**\n     * This method sets a reconnection delay for the client. This is a convenience method that sets up a\n     * [[FixedDelayStrategy]] with a requested delay value.\n     *\n     * ```javascript\n     * // create a client and set a reconnect delay\n     * var client = new amps.Client().reconnectDelay(5000);\n     * ```\n\n     * @param {number} delay=200 The delay between reconnection attempts in milliseconds.\n     * @returns The client object.\n     * @see [[Client.delayStrategy]] for more flexible controls over reconnection logic.\n     */\n    reconnectDelay(delay: number = 200): Client {\n        this._delayStrategy = new FixedDelayStrategy((delay >= 0) ? delay : 200);\n        return this;\n    }\n    /**\n     * This method is a setter/getter for the SubscriptionManager object of the client. AMPS provides\n     * [[DefaultSubscriptionManager]] that is used to restore subscriptions\n     * after an unintended disconnection. It is not set by default.\n     *\n     * ```javascript\n     * // create a client and assign a subscription manager to it\n     * var subscriptionManager = new amps.DefaultSubscriptionManager();\n     * var client = new amps.Client().subscriptionManager(subscriptionManager);\n     *\n     * // ... access the subscription manager object later\n     * client.subscriptionManager().clear();\n     * ```\n     *\n     * @param {SubscriptionManager} subscriptionManager The subscription manager that the client uses.\n     * @returns The client if a setter is called. The SubscriptionManager object (if any) otherwise.\n     */\n    subscriptionManager(): SubscriptionManager;\n    subscriptionManager(subscriptionManager: SubscriptionManager): Client;\n    subscriptionManager(subscriptionManager?: SubscriptionManager): SubscriptionManager | Client {\n        if (subscriptionManager !== undefined) {\n            this._subscriptionManager = subscriptionManager;\n            return this;\n        }\n\n        return this._subscriptionManager;\n    }\n\n    /**\n     * This method is a setter/getter for the logon correlation id of the client. It must be\n     * a valid Base64 string.\n     *\n     * ```javascript\n     * // assign a logon correlation id to the client object\n     * var client = new amps.Client().logonCorrelationId('L2p0vkn2');\n     *\n     * // ... access the logon correlation id later\n     * console.log(client.logonCorrelationId());\n     * ```\n     *\n     * @param {string} logonCorrelationId The logon correlation id of the client.\n     * @returns The client if a setter is called. The logon correlation id (if any) otherwise.\n     */\n    logonCorrelationId(): string;\n    logonCorrelationId(logonCorrelationId: string): Client;\n    logonCorrelationId(logonCorrelationId?: string): string | Client {\n        if (logonCorrelationId !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the logon correlation id when connected');\n            }\n\n            this._logonCorrelationId = logonCorrelationId;\n            return this;\n        }\n\n        return this._logonCorrelationId;\n    }\n\n    /**\n     * This method is a setter/getter for the PublishStore object of the client.\n     * [[PublishStore]] interface is being used to to provide consistent publish\n     * functionality with guaranteed delivery.\n     *\n     * ```javascript\n     * // create a client and assign a publish store to it\n     * var publishStore = new amps.MemoryPublishStore();\n     * var client = new amps.Client().publishStore(publishStore);\n     *\n     * // ... access the publish store later\n     * if (client.publishStore().unpersistedCount() == 0) {\n     *     client.disconnect();\n     * }\n     * ```\n     *\n     * @param {PublishStore} publishStore The PublishStore object of the client.\n     * @returns The client if a setter is called. The PublishStore object (if any) otherwise.\n     */\n    publishStore(): PublishStore;\n    publishStore(publishStore: PublishStore): Client;\n    publishStore(publishStore?: PublishStore): PublishStore | Client {\n        if (publishStore !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the publish store when connected');\n            }\n\n            this._publishStore = publishStore;\n            return this;\n        }\n\n        return this._publishStore;\n    }\n\n    /**\n     * This method is a setter/getter for the BookmarkStore object of the client.\n     * [[BookmarkStore]] interface is being used to to provide resumable subscriptions and\n     * client-side duplicate message handling.\n     *\n     * ```javascript\n     * // create a client and assign a bookmark store to it\n     * var bookmarkStore = new amps.MemoryBookmarkStore();\n     * var client = new amps.Client().bookmarkStore(bookmarkStore);\n     *\n     * // ... access the bookmark store later\n     * client.bookmarkStore().purge();\n     * ```\n     *\n     * @param {BookmarkStore} bookmarkStore The BookmarkStore object of the client.\n     * @returns The client if a setter is called. The BookmarkStore object (if any) otherwise.\n     */\n    bookmarkStore(): BookmarkStore;\n    bookmarkStore(bookmarkStore: BookmarkStore): Client;\n    bookmarkStore(bookmarkStore?: BookmarkStore): BookmarkStore | Client {\n        if (bookmarkStore !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the bookmark store when connected');\n            }\n\n            this._bookmarkStore = bookmarkStore;\n            return this;\n        }\n\n        return this._bookmarkStore;\n    }\n\n    /**\n     * This method is a setter/getter for the autoAck option of the client. The AMPS client allows you to specify that\n     * messages should be automatically acknowledged. When this mode is on, AMPS acknowledges the message automatically\n     * if the message handler returns without throwing an exception. It is false by default.\n     *\n     * ```javascript\n     * // create a client and set autoAck to true\n     * var client = new amps.Client().autoAck(true);\n     *\n     * // ... check the autoAck option value later\n     * if (client.autoAck() === true) { ...  }\n     * ```\n     *\n     * @param {boolean} autoAck The new option value (true/false).\n     * @returns {boolean | Client} The client if a setter is called. The autoAck otion value otherwise.\n     */\n    autoAck(): boolean;\n    autoAck(autoAck: boolean): Client;\n    autoAck(autoAck?: boolean): boolean | Client {\n        if (autoAck !== undefined) {\n            this._autoAck = autoAck;\n\n            // Kill the ack timer (if any)\n            clearTimeout(this._ackBatch.ackTimeoutTimerId);\n\n            // connected and just enabled auto acking\n            if (this._isConnected && this._autoAck && this._ackBatch.ackTimeout) {\n                this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), this._ackBatch.ackTimeout);\n            }\n\n            return this;\n        }\n\n        return this._autoAck;\n    }\n\n    /**\n     * This method is a setter/getter for the acknowledgement batch size of the client.\n     *\n     * Batching acknowledgements reduces the number of round-trips to AMPS, which reduces network traffic and\n     * improves overall performance. AMPS sends the batch of acknowledgements when the number of acknowledgements\n     * exceeds a specified size. By default, if not specified otherwise, it is equal to 0. If the batch size value is\n     * greater than 1, the automatic ack timeout will be assigned with the default value of 1000 ms, if not already set.\n     * To override this behavior and disable ack timeouts with the batch size > 1, explicitly set ack timeout value to 0\n     * after setting the batch size.\n     *\n     * ```javascript\n     * // create a client and assign a publish store to it\n     * var client = new amps.Client().ackBatchSize(100);\n     *\n     * // ... get the ack batch size later\n     * if (client.ackBatchSize() > 10) { ... }\n     * ```\n     *\n     * @param {number} ackBatchSize The size of the batch to acknowledge.\n     * @returns The client if a setter is called. The acknowledgement batch size otherwise.\n     */\n    ackBatchSize(): number;\n    ackBatchSize(ackBatchSize: number): Client;\n    ackBatchSize(ackBatchSize?: number): number | Client {\n        if (typeof ackBatchSize === 'number') {\n            if (ackBatchSize < 0) { throw new Error('Invalid acknowledgement batch size value'); }\n\n            this._ackBatch.ackBatchSize = ackBatchSize;\n\n            // if auto ack is enabled\n            if (this._autoAck) {\n                // if we're connected\n                if (this._isConnected) {\n                    // if the size of batch is full enough, let's ack the batches\n                    Object.keys(this._ackBatch.toAck).map(topic => {\n                        const currentBookmarks = this._ackBatch.toAck[topic] || [];\n                        if (this._ackBatch.ackBatchSize <= currentBookmarks.length) {\n                            this._ack(topic);\n                        }\n                    });\n                }\n\n                // If no ackTimeout set, and the batch size > 1, establish the default timeout value (1000)\n                if (ackBatchSize > 1 && this._ackBatch.ackTimeout === undefined) {\n                    this._ackBatch.ackTimeout = 1000;\n\n                    if (this._isConnected) {\n                        // since we're connected and just established a new timeout value, start timer as well\n                        clearTimeout(this._ackBatch.ackTimeoutTimerId);\n                        this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), 1000);\n                    }\n                }\n            }\n\n            return this;\n        }\n\n        return this._ackBatch.ackBatchSize;\n    }\n\n    /**\n     * This method is a setter/getter for the acknowledgement batch timeout of the client.\n     *\n     * Batching acknowledgements reduces the number of round-trips to AMPS, which reduces network traffic and\n     * improves overall performance. AMPS sends the batch of acknowledgements when the amount of time since the last\n     * batch was sent exceeds a specified timeout.\n     *\n     * ```javascript\n     * // create a client and assign a acknowledgment batch timeout to it\n     * var client = new amps.Client().ackTimeout(100);\n     *\n     * // ... get the ack batch timeout later\n     * if (client.ackTimeout() > 1000) { ... }\n     * ```\n     *\n     * @param {number} ackTimeout The amount in milliseconds of time since the last batch acknowledgement. If set to\n     * 0, there will be no timeout.\n     * @returns The client if a setter is called. The acknowledgement batch timeout value (if any) otherwise.\n     */\n    ackTimeout(): number;\n    ackTimeout(ackTimeout: number): Client;\n    ackTimeout(ackTimeout?: number): number | Client {\n        if (typeof ackTimeout === 'number') {\n            if (ackTimeout < 0) { throw new Error('Invalid acknowledgment batch timeout value'); }\n\n            this._ackBatch.ackTimeout = ackTimeout;\n\n            // kill the previous timer (if any)\n            clearTimeout(this._ackBatch.ackTimeoutTimerId);\n\n            // start calling the onAckTick method with the new timeout value\n            if (this._autoAck && this._isConnected && ackTimeout > 0) {\n                this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), ackTimeout);\n            }\n\n            return this;\n        }\n\n        return this._ackBatch.ackTimeout;\n    }\n\n    /**\n     * This method disconnects the client from an AMPS server (if the connection existed).\n     * @returns The promise object.\n     */\n    disconnect(): Promise<any> {\n        this._broadcastStateChange(Client.ConnectionStateListener.Shutdown);\n\n        return new Promise((resolve: () => void, reject: (error: Error) => void) => {\n            const destroyConnection = () => {\n                this._isConnected = false;\n\n                // take care of heartbeat\n                if (this._heartbeat) {\n                    clearTimeout(this._heartbeat.timeoutId);\n                    this._heartbeat.timestamp = null;\n                    delete this._heartbeat.onHeartbeatAbsence;\n\n                    this._heartbeat = null;\n                }\n\n                // delete all timeouts\n                for (const timeoutId in this.timeouts) {\n                    clearTimeout(this.timeouts[timeoutId]);\n                    delete this.timeouts[timeoutId];\n                }\n\n                // delete all subscriptions\n                for (const subId in this.subscriptions) {\n                    delete this.subscriptions[subId];\n                }\n\n                // reset message state machine\n                this.messageState = {\n                    inGroup: false,\n                    currentSow: null,\n                    mergedHeader: false,\n                    recordsRemaining: 0,\n                    publishHeader: null\n                };\n\n                // reset next id\n                this._nextSubId = 1;\n\n\n                // reset the to ack map\n                this._ackBatch.toAck = {};\n\n                // if still connected\n                if (this.connection) {\n                    // null connection-related stuff\n                    this.username = null;\n                    this.password = null;\n                    this.connection.onclose = null;\n                    this.connection.onopen = null;\n                    this.connection.onerror = null;\n\n                    // close the connection\n                    this.connection.close(1000, 'Disconnect from the client');\n                    this.connection = null;\n                }\n\n                this.sequenceId = null;\n                this._serverChooser = null;\n                this._delayStrategy = null;\n                this.subscriptionManager = null;\n\n                // resolve the promise\n                resolve();\n            };\n\n            // reset ack batch settings\n            this._autoAck = false;\n            this._ackBatch.ackBatchSize = 0;\n            clearTimeout(this._ackBatch.ackTimeoutTimerId);\n            this._ackBatch.ackTimeout = undefined;\n\n            // send the acks that are not sent yet\n            const ackTopics = Object.keys(this._ackBatch.toAck);\n            if (ackTopics.length > 0) {\n                let ackCommandsSent = 0;\n\n                for (const topic of ackTopics) {\n                    ackCommandsSent += this._ack(topic);\n                }\n\n                if (ackCommandsSent > 0) {\n                    this.flush().then(() => destroyConnection()).catch(reject);\n                }\n                else { destroyConnection(); }\n            }\n            else { destroyConnection(); }\n        });\n    }\n\n    /**\n     * This method performs the publish command.\n     * The publish command is the primary way to inject messages into the AMPS processing stream. A publish command\n     * received by AMPS will be forwarded to other connected clients with matching subscriptions.\n     *\n     * ```javascript\n     * client.publish('topic', {id: 1});\n     * ```\n     *\n     * @param {string} topic the topic to publish data.\n     * @param data the data to publish to a topic.\n     * @param {object} params an object with params, like: &#123;expiration: 30, ...&#125;\n     */\n    publish(topic: string, data: any, params?: CommandParams): void {\n        this._publishInternal('publish', topic, data, params);\n    }\n\n    /**\n     * This method delta publishes a message to a SOW topic.\n     *\n     * ```javascript\n     * client.deltaPublish('topic', {id: 1, text: 'Hello, World'});\n     * ```\n     *\n     * @param {string} topic the topic to publish data.\n     * @param data the data to publish to a topic.\n     * @param {object} params an object with params, like: &#123;expiration: 30, ...&#125;\n     */\n    deltaPublish(topic: string, data: any, params?: CommandParams): void {\n        this._publishInternal('delta_publish', topic, data, params);\n    }\n\n    private _publishInternal = (pubType: string, topic: string, data: any, params?: CommandParams): void => {\n        // if params are used - let's send it through the execute interface (full mode)\n        if (params) {\n            this.execute(new Command(pubType).topic(topic).data(data).addParams(params));\n            return;\n        }\n        const header: any = {c: pubType, t: topic};\n\n        // if we have a publish store, persist messages\n        if (this._publishStore) {\n            header.a = 'persisted';\n\n            // Increment the sequence id for the next publish\n            this.sequenceId = this.sequenceId.next();\n            header.s = this.sequenceId.toString();\n\n            // store the message\n            this._publishStore.store({...header, data: data});\n        }\n        else if (!this.connection || !this._isConnected) {\n            throw new Error('Must connect before sending data');\n        }\n\n        if (this.connection && this._isConnected) {\n            const serializedHeader: string = JSON.stringify(header);\n            let sizeBuffer;\n\n            // serialize data\n            data = this.typeHelper.serialize(data);\n            sizeBuffer = TypeHelper.littleEndianSizeBuffer(data.length + 1);\n\n            try {\n                // pass the size to the transport filter, if provided\n                if (this._transportFilter) { this._transportFilter(sizeBuffer, true); }\n                this.connection.send(sizeBuffer);\n\n                // pass data to the transport filter, if provided\n                if (this._transportFilter) { this._transportFilter(serializedHeader, true); }\n                this.connection.send(serializedHeader);\n\n                if (data.length === 1) {\n                    if (this._transportFilter) { this._transportFilter(data[0], true); }\n                    this.connection.send(data[0]);\n                }\n                else {\n                    for (const item of data) {\n                        // pass data to the transport filter, if provided\n                        if (this._transportFilter) { this._transportFilter(item, true); }\n                        this.connection.send(item);\n                    }\n                }\n            } catch (err) {}  // only connection error can occur ATM, and it's handled already\n        }\n    }\n\n    /**\n     * This method performs the __flush__ command. It sends a command to AMPS that returns an acknowledgement when all\n     * previous messages from this client have been received and processed. This command helps applications that use\n     * AMPS determine when AMPS has received all of the messages that have been sent, making it safe for the client\n     * to exit.\n     *\n     * ```javascript\n     * client.publish('topic', {id: 1});\n     * client.publish('topic', {id: 2});\n     * client.flush().then(...).catch(...);\n     * ```\n     *\n     * @param {number} timeout the flush timeout in milliseconds.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    flush(timeout?: number): Promise<{}> {\n        return new Promise((resolve: () => void, reject: (error: Error) => void) => {\n            this.execute(\n                new Command('flush').ackType('completed').clientName(this._name),\n                (message: Message) => {\n                    if (message.c === 'ack' && message.a === 'completed' && message.status === 'success') {\n                        resolve();\n                    }\n                    else {\n                        reject(new Error(message.reason));\n                    }\n                },\n                timeout\n            ).catch(reject);\n        });\n    }\n\n    /**\n     * This method performs the __subscribe__ command. The __subscribe__ command is the primary way to retrieve messages\n     * from the AMPS processing stream. A client can issue a __subscribe__ command on a topic to receive all published\n     * messages to that topic in the future. Additionally, content filtering can be used to choose which messages the\n     * client is interested in receiving.\n     *\n     * ```javascript\n     * client.subscribe(function(message) { console.log(message); }, 'topic')\n     *     .then(function(subscriptionId) { console.log(subscriptionId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in subscribe.\n     * @param {string} filter The filter argument in subscribe.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    subscribe(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler argument in subscribe must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in subscribe must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('subscribe')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the __sow__ command. The __sow__ command is use to query the contents of a previously\n     * defined SOW Topic. A __sow__ command can be used to query an entire SOW Topic, or a filter can be used to further\n     * refine the results found inside a SOW Topic. For more information, see the State of the World and SOW Queries\n     * chapters in the AMPS User Guide.\n     *\n     * ```javascript\n     * client.sow(function(message) { console.log(message); }, 'sow-topic')\n     *     .then(function(subscriptionId) { console.log(subscriptionId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns  The Promise object with the results of execution of the command.\n     */\n    sow(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in sow must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler argument in sow must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('sow')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the __sow_and_subscribe__ command. A __sow_and_subscribe__ command is used to combine the\n     * functionality of __sow__ and a __subscribe__ command in a single command. The __sow_and_subscribe__ command is\n     * used\n     *\n     * * to query the contents of a SOW topic (this is the __sow__ command); and\n     * * to place a subscription such that any messages matching the subscribed SOW topic and query filter will\n     *      be published to the AMPS client (this is the __subscribe__ command). As with the __subscribe__ command,\n     *      publish messages representing updates to SOW records will contain only information that has changed.\n     *\n     * ```javascript\n     * client.sowAndSubscribe(function(message) { ... }, 'sow-topic')\n     *     .then(function(subId) { console.log(subId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    sowAndSubscribe(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_and_subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler arg in sow_and_subscribe must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow_and_subscribe must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('sow_and_subscribe')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the __delta_subscribe__ command. The __delta_subscribe__ command is like the __subscribe__\n     * command except that subscriptions placed through __delta_subscribe__ will receive only messages that have changed\n     * between the SOW record and the new update. If __delta_subscribe__ is used on a record which does not currently\n     * exist in the SOW or if it is used on a topic which does not have a SOW-topic store defined, then\n     * __delta_subscribe__ behaves like a __subscribe__ command.\n     *\n     * ```javascript\n     * client.deltaSubscribe(function(message) { ... }, 'topic')\n     *     .then(function(subId) { console.log(subId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    deltaSubscribe(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in delta_subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler arg in delta_subscribe must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in delta_subscribe be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('delta_subscribe')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the __sow_and_delta_subscribe__ command.\n     * A __sow_and_delta_subscribe__ command is used to combine the functionality of commands __sow__ and a\n     * __delta_subscribe__ in a single command. The __sow_and_delta_subscribe__ command is used\n     *\n     * * to query the contents of a SOW topic (this is the __sow__ command); and\n     * * to place a subscription such that any messages matching the subscribed SOW topic and query filter\n     *   will be published to the AMPS client (this is the __delta_subscribe__ command).\n     *\n     * As with the __delta_subscribe__ command, publish messages representing updates to SOW records will contain only\n     * the information that has changed. If a __sow_and_delta_subscribe__ is issued on a record that does not currently\n     * exist in the SOW topic, or if it is used on a topic that does not have a SOW-topic store defined,\n     * then a __sow_and_delta_subscribe__ will behave like a __sow_and_subscribe__ command.\n     *\n     * ```javascript\n     * client.sowAndDeltaSubscribe(function(message) { ... }, 'sow-topic')\n     *     .then(function(subId) { console.log(subId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    sowAndDeltaSubscribe(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_and_delta_subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler arg in sow_and_delta_subscribe must be a function, not a \"' +\n                (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow_and_delta_subscribe must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('sow_and_delta_subscribe')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the unsubscribe command. The unsubscribe command unsubscribes the client from the topic\n     * which messages the client is is no more interested in receiving. If not subscription id is provided, the client\n     * will unsubscribe from all subscriptions.\n     *\n     * ```javascript\n     * client.unsubscribe();  // unsubscribe from all\n     * client.unsubscribe('123');\n     * ```\n     *\n     * @param {string} subId The id of the subscription.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    unsubscribe(subId?: string): Promise<string> {\n        if (subId === undefined || subId === null) { subId = 'all'; }\n        if (typeof subId !== 'string') {\n            throw 'The subId argument in unsubscribe must be a string, not a \"' + (typeof subId) + '\"';\n        }\n\n        return this.execute(new Command('unsubscribe').subId(subId).ackType('received'));\n    }\n\n    /**\n     * This method ACKs a message queue message using the message object.\n     *\n     * ```javascript\n     * client.ack(queueMessage);\n     * ```\n     *\n     * @param {Message} message AMPS message object.\n     * @param {string} options A comma separated list of values indicating additional options, such as `cancel`,\n     * `expire`, or `lease_extension=60s`.\n     */\n    ack(message: Message, options?: string): void;\n\n    /**\n     * --------\n     * This method ACKs a message queue message using the topic and bookmark values.\n     *\n     * ```javascript\n     * client.ack('queue-topic', '12290412031115262887|1484244707000000008|');\n     * ```\n     *\n     * @param {string} topic The topic of the message to ack.\n     * @param {string} bookmark The bookmark of the message to ack.\n     * @param {string} options A comma separated list of values indicating additional options, such as `cancel`,\n     * `expire`, or `lease_extension=60s`.\n     */\n    ack(topic: string, bookmark: string, options?: string): void;\n    ack(topicOrMessage: string | Message, bookmark?: string, options?: string): void {\n        // data required\n        let topic;\n\n        // message case\n        if (typeof topicOrMessage !== 'string') {\n            // if it's not a queue message, simply do nothing\n            if (topicOrMessage.lp === undefined) { return; }\n\n            topic = topicOrMessage.t;\n\n            // In this case, options is actually in the bookmark field\n            options = bookmark;\n\n            bookmark = topicOrMessage.bm;\n        }\n        // topic/bookmark case\n        else if (typeof topicOrMessage === 'string') {\n            topic = topicOrMessage;\n\n            if (typeof bookmark !== 'string') {\n                throw 'The bookmark argument in ack() must be a string, not a \"' + (typeof bookmark) + '\"';\n            }\n        }\n        else {\n            throw 'Either a message object or a topic and bookmark strings should be provided in ack()';\n        }\n\n        // if there's no topic or bookmark -- there's nothing to acknowledge\n        if (topic === undefined || topic.length === 0 || bookmark === undefined || bookmark.length === 0) { return; }\n\n        // if the batch size is 0 or 1, or it has options, then ack() the message right away\n        if (this._ackBatch.ackBatchSize <= 1 || (typeof options === 'string' && options.length > 0)) {\n            const command = new Command('sow_delete').topic(topic).bookmark(bookmark);\n\n            // We have options, let's append them\n            if (typeof options === 'string' && options.length > 0) {\n                command.options(options);\n            }\n\n            this.execute(command);\n        }\n        else {\n            // add the new bookmark to the list of bookmarks to ack for this topic\n            let bookmarks = this._ackBatch.toAck[topic];\n\n            if (bookmarks === undefined) {\n                bookmarks = [];\n                this._ackBatch.toAck[topic] = bookmarks;\n            }\n\n            bookmarks.push(bookmark);\n\n            // Enough messages in the batch, let's ack\n            if (bookmarks.length >= this._ackBatch.ackBatchSize) {\n                this._ack(topic);\n            }\n        }\n    }\n\n    /**\n     * This method executes a SOW delete with a filter.\n     *\n     * ```javascript\n     * client\n     *     .sowDelete('sow-topic', '/status = \"obsolete\"')\n     *     .then(function(message) {\n     *         console.log(message.header.ackType(), ': ',  message.header.status());\n     *     });\n     * ```\n     *\n     * @param {string} topic The topic to execute the SOW delete against.\n     * @param {string} filter The filter. To delete all records, set a filter that is always true: `1 = 1`\n     * @param {string} options A comma separated list of values indicating additional processing options.\n     * @returns {Promise<Message>} The promise object with the results of execution of the command.\n     */\n    sowDelete(topic: string, filter: string, options?: string): Promise<Message> {\n        if (topic === undefined || topic === null || topic === '') {\n            throw 'A non-null, defined, non-empty topic argument must be provided';\n        }\n        else if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_delete must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (filter === undefined || filter === null || filter === '') {\n            throw 'A non-null, defined, non-empty filter argument must be provided';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow_delete must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return new Promise((resolve: (message: Message) => void, reject: (error: Error) => void) => {\n            // build the command object\n            const command = new Command('sow_delete').topic(topic).filter(filter).ackType('stats');\n\n            // Assign options, if any\n            if (options !== undefined && options !== null) {\n                command.options(options);\n            }\n\n            this.execute(command, resolve).catch(reject);\n        });\n    }\n\n    /**\n     * This method deletes a message from a SOW, using data supplied to locate a SOW entry with matching keys.\n     *\n     * ```javascript\n     * var topic = sowMessage.header.topic();\n     * var data = sowMessage.data;\n     *\n     * client\n     *     .sowDeleteByData(topic, data)\n     *     .then(function(message) {\n     *         console.log(message.header.ackType(), ': ',  message.header.status());\n     *     });\n     * ```\n     *\n     * @param {string} topic The topic to execute the SOW delete against.\n     * @param {any} data The A message data whose keys match the message to be deleted in the server’s SOW.\n     * @returns {Promise<Message>} The promise object with the results of execution of the command.\n     */\n    sowDeleteByData(topic: string, data: any): Promise<Message> {\n        if (topic === undefined || topic === null || topic === '') {\n            throw 'A non-null, defined, non-empty topic argument must be provided';\n        }\n        else if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_delete must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (data === undefined || data === null || data === '') {\n            throw 'A non-null, defined, non-empty data argument must be provided';\n        }\n\n        return new Promise((resolve: (message: Message) => void, reject: (error: Error) => void) => {\n            this.execute(\n                new Command('sow_delete').topic(topic).data(data).ackType('stats'),\n                resolve\n            ).catch(reject);\n        });\n    }\n\n    /**\n     * This method executes a SOW delete with sow keys (supplied as a comma-separated values in a string). SOW keys are\n     * provided in the header of a SOW message, and are the internal identifier AMPS uses for that SOW message.\n     *\n     * ```javascript\n     * var topic = sowMessage1.header.topic();\n     * var keys = sowMessage1.header.sowKey() + ',' + sowMessage2.header.sowKey();\n     *\n     * client\n     *     .sowDeleteByKeys(topic, keys)\n     *     .then(function(message) {\n     *         console.log(message.header.ackType(), ': ',  message.header.status());\n     *     });\n     * ```\n     *\n     * @param {string} topic The topic to execute the SOW delete against.\n     * @param {string} keys A comma separated list of SOW keys to be deleted. SOW keys are provided in the header of\n     * a SOW message, and are the internal identifier AMPS uses for that SOW message.\n     * @returns {Promise<Message>} The promise object with the results of execution of the command.\n     */\n    sowDeleteByKeys(topic: string, keys: string): Promise<Message> {\n        if (topic === undefined || topic === null || topic === '') {\n            throw 'A non-null, defined, non-empty topic argument must be provided';\n        }\n        else if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_delete must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (keys === undefined || keys === null || keys === '') {\n            throw 'A non-null, defined, non-empty keys argument must be provided';\n        }\n        else if (typeof keys !== 'string') {\n            throw 'The keys argument in sow_delete must be a string, not a \"' + (typeof keys) + '\"';\n        }\n\n        return new Promise((resolve: (message: Message) => void, reject: (error: Error) => void) => {\n            this.execute(\n                new Command('sow_delete').topic(topic).sowKeys(keys).ackType('stats'),\n                resolve\n            ).catch(reject);\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/client.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport * as BigInteger from 'big-integer';\nimport { Header } from './header';\nimport { Message } from './message';\n\n\n/**\n * Interface for objects that represent a collection of valid key-value pairs\n * of parameters that can be set withing a convenience method like [[Client.subscribe]], [[Client.sow]], etc.\n *\n * See [[Command]] class for detailed descriptions of the parameters.\n */\nexport interface CommandParams {\n    [key: string]: any;\n\n    command?: string;\n    commandId?: string;\n    queryId?: string;\n    subId?: string;\n    ackType?: string;\n    data?: any;\n    topN?: number;\n    batchSize?: number;\n    topic?: string;\n    filter?: string;\n    bookmark?: string;\n    options?: string;\n    correlationId?: string;\n    orderBy?: string;\n    sowKey?: string;\n    sowKeys?: string;\n    expiration?: number;\n    sequenceId?: BigInteger;\n    subIds?: string;\n}\n\n\n/**\n * The Command class encapsulates the AMPS Command entity. The JavaScript client sends [[Command]] objects to the server\n * and receives [[Message]] objects from the server.\n */\nexport class Command {\n    /**\n     * index type (for adding options through addParams() method)\n     * @hidden\n     */\n    [key: string]: any;\n\n    private static readonly commandTypes: string[] = [\n        'logon',\n        'publish',\n        'delta_publish',\n        'subscribe',\n        'delta_subscribe',\n        'sow',\n        'sow_and_subscribe',\n        'sow_and_delta_subscribe',\n        'sow_delete',\n        'unsubscribe',\n        'flush',\n        'heartbeat',\n        'start_timer',\n        'stop_timer'\n    ];\n\n    // command fields\n    private header: Header;\n    private _data: any = null;\n\n    /**\n     * @param {string} command The name of the command.\n     */\n    constructor(command: string) {\n        if (Command.commandTypes.indexOf(command) < 0) {\n            throw new Error('Invalid command name');\n        }\n\n        this.header = new Header();\n        this.header.c = command;\n    }\n\n    /**\n     * This method returns the 'raw' header of the command as an object with key-value pairs.\n     * @hidden\n     */\n    rawHeader(): Header { return this.header; }\n\n    /**\n     * This method returns a command converted into a message.\n     * @hidden\n     */\n    toMessage(): Message {\n        const message: Message = (this.header as Message);\n        if (this._data) {\n            message.data = this._data;\n        }\n\n        return message;\n    }\n\n    /**\n     * Sets the command e.g. 'publish', 'sow_and_subscribe', to be executed.\n     * The following commands are available:\n     * - publish\n     * - delta_publish\n     * - subscribe\n     * - delta_subscribe\n     * - sow\n     * - sow_and_subscribe\n     * - sow_and_delta_subscribe\n     * - sow_delete\n     * - unsubscribe\n     *\n     * @param {string} value The command name value.\n     * @returns {Command} The updated Command object.\n     */\n    command(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the Command name.\n     * @returns {string} The Command name value.\n     */\n    command(): string;\n\n    command(value?: string): Command | string {\n        if (value !== undefined) {\n            if (Command.commandTypes.indexOf(value) < 0) {\n                throw new Error('Invalid command name');\n            }\n\n            this.header.c = value;\n            return this;\n        }\n\n        return this.header.c;\n    }\n\n    /**\n     * Sets the Client-specified command id. The command id is returned by the engine in responses to commands to allow\n     * the client to correlate the response to the command.\n     * @param {string} value The command id value.\n     * @returns {Command} The updated Command object.\n     */\n    commandId(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the command id.\n     * @returns {string} The command id value.\n     */\n    commandId(): string;\n\n    commandId(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.cid = value;\n            return this;\n        }\n\n        return this.header.cid;\n    }\n\n    /**\n     * Sets the SOW Query identifier set by client to identify a query.\n     * @param {string} value The query id.\n     * @returns {Command} The updated Command object.\n     */\n    queryId(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the query id.\n     * @returns {string} The query id.\n     */\n    queryId(): string;\n\n    queryId(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.query_id = value;\n            return this;\n        }\n\n        return this.header.query_id;\n    }\n\n    /**\n     * Sets the subscription identifier set by server when processing a subscription.\n     * @param {string} value The subscription id.\n     * @returns {Command} The updated Command object.\n     */\n    subId(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the subscription id.\n     * @returns {string} The subscription id.\n     */\n    subId(): string;\n\n    subId(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.sub_id = value;\n            return this;\n        }\n\n        return this.header.sub_id;\n    }\n\n    /**\n     * Sets the acknowledgements requested for the command. Multiple ack types should be comma-delimited.\n     * The acknowledgement messages will be delivered to the message handler.\n     * @param {string} value The acknowledgement message type(s).\n     * @returns {Command} The updated Command object.\n     */\n    ackType(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the acknowledgement message type(s).\n     * @returns {string} The acknowledgement message type(s).\n     */\n    ackType(): string;\n\n    ackType(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.a = value;\n            return this;\n        }\n\n        return this.header.a;\n    }\n\n    /**\n     * Sets the command data (message payload). Makes sense only for `publish`, `delta_publish`, and `sow_delete`\n     * commands.\n     * @param {any} value The Command data (message payload).\n     * @returns {Command} The updated Command object.\n     */\n    data(value: any): Command;\n\n    /**\n     * ---------\n     * Returns the Command data (message payload).\n     * @returns {any} The Command data (message payload).\n     */\n    data(): any;\n\n    data(value?: any): Command | any {\n        if (value !== undefined) {\n            this._data = value;\n            return this;\n        }\n\n        return this._data;\n    }\n\n    /**\n     * Sets the number of records to return.\n     * Note: If `TopN` is not equally divisible by the `BatchSize` value, then more records will be returned so that the\n     * total number of records is equally divisible by the `BatchSize` setting.\n     * @param {number} value The top N value.\n     * @returns {Command} The updated Command object.\n     */\n    topN(value: number): Command;\n\n    /**\n     * ---------\n     * Returns the top N value.\n     * @returns {number} The top N value.\n     */\n    topN(): number;\n\n    topN(value?: number): Command | number {\n        if (value !== undefined) {\n            this.header.top_n = value;\n            return this;\n        }\n\n        return this.header.top_n;\n    }\n\n    /**\n     * Sets the number of messages that are batched together when returning a query result. If it's not set, it is\n     * `10` by default.\n     * @param {number} value The batch size value.\n     * @returns {Command} The updated Command object.\n     */\n    batchSize(value: number): Command;\n\n    /**\n     * ---------\n     * Returns the batch size value.\n     * @returns {number} The batch size value.\n     */\n    batchSize(): number;\n\n    batchSize(value?: number): Command | number {\n        if (value !== undefined) {\n            this.header.bs = value;\n            return this;\n        }\n\n        return this.header.bs;\n    }\n\n    /**\n     * Sets the topic value.\n     * @param {string} value The topic value.\n     * @returns {Command} The updated Command object.\n     */\n    topic(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the topic value.\n     * @returns {string} The topic value.\n     */\n    topic(): string;\n\n    topic(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.t = value;\n            return this;\n        }\n\n        return this.header.t;\n    }\n\n    /**\n     * Sets the content filter expression.\n     * @param {string} value The filter value.\n     * @returns {Command} The updated Command object.\n     */\n    filter(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the filter value.\n     * @returns {string} The filter value.\n     */\n    filter(): string;\n\n    filter(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.filter = value;\n            return this;\n        }\n\n        return this.header.filter;\n    }\n\n    /**\n     * Sets the client-originated identifier used to mark a location in journaled messages.\n     * @param {string} value The bookmark value.\n     * @returns {Command} The updated Command object.\n     */\n    bookmark(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the bookmark value.\n     * @returns {string} The bookmark value.\n     */\n    bookmark(): string;\n\n    bookmark(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.bm = value;\n            return this;\n        }\n\n        return this.header.bm;\n    }\n\n    /**\n     * Sets the (comma-delimited) string of options on a specific Command.\n     * @param {string} value The options (comman-delimited) string value.\n     * @returns {Command} The updated Command object.\n     */\n    options(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the options (comma-delimited) string value.\n     * @returns {string} The options (comma-delimited) string value.\n     */\n    options(): string;\n\n    options(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.o = value;\n            return this;\n        }\n\n        return this.header.o;\n    }\n\n    /**\n     * Sets the opaque token set by an application and returned with the message.\n     * @param {string} value The correlationId value.\n     * @returns {Command} The updated Command object.\n     */\n    correlationId(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the correlationId value.\n     * @returns {string} The correlationId value.\n     */\n    correlationId(): string;\n\n    correlationId(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.x = value;\n            return this;\n        }\n\n        return this.header.x;\n    }\n\n    /**\n     * Sets the SOW topic key(s) by which to order SOW query.\n     * @param {string} value The orderBy value.\n     * @returns {Command} The updated Command object.\n     */\n    orderBy(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the orderBy value.\n     * @returns {string} The orderBy value.\n     */\n    orderBy(): string;\n\n    orderBy(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.orderby = value;\n            return this;\n        }\n\n        return this.header.orderby;\n    }\n\n    /**\n     * Sets the sow key value.\n     * A SOW key will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in\n     * on a subscription when the published message matches a record in the SOW.\n     *\n     * Format:\n     *\n     * - string containing the digits of an unsigned long for AMPS-generated SOW keys\n     *\n     * OR\n     *\n     * - arbitrary string in the base64 character set for user-provided SOW keys.\n     * @param {string} value The sow key value.\n     * @returns {Command} The updated Command object.\n     */\n    sowKey(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the sow key value.\n     * @returns {string} The sow key value.\n     */\n    sowKey(): string;\n\n    sowKey(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.k = value;\n            return this;\n        }\n\n        return this.header.k;\n    }\n\n    /**\n     * Sets the sowKeys as a comma-delimited value.\n     * @param {string} value The sow keys value.\n     * @returns {Command} The updated Command object.\n     */\n    sowKeys(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the sowKeys value.\n     * @returns {string} The sowKeys value.\n     */\n    sowKeys(): string;\n\n    sowKeys(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.sow_keys = value;\n            return this;\n        }\n\n        return this.header.sow_keys;\n    }\n\n    /**\n     * Sets the SOW expiration time (in seconds) if used in `publish`.\n     * @param {number} value The command expiration value (in seconds).\n     * @returns {Command} The updated Command object.\n     */\n    expiration(value: number): Command;\n\n    /**\n     * ---------\n     * Returns the command expiration value (in seconds).\n     * @returns {number} The command expiration value.\n     */\n    expiration(): number;\n\n    expiration(value?: number): Command | number {\n        if (value !== undefined) {\n            this.header.e = value;\n            return this;\n        }\n\n        return this.header.e;\n    }\n\n    /**\n     * Sets the client name value. It is used to identify a client. Useful for publishers that wish to identify the\n     * source of a publish, client status messages and for client heartbeats. If it's not set, it'll be taken from the\n     * [[Client]] object.\n     * @param {string} value The client name value.\n     * @returns {Command} The updated Command object.\n     * @hidden\n     */\n    clientName(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the client name value.\n     * @returns {string} The client name value.\n     * @hidden\n     */\n    clientName(): string;\n\n    clientName(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.client_name = value;\n            return this;\n        }\n\n        return this.header.client_name;\n    }\n\n    /**\n     * Sets the sequenceId value. SequenceId is an integer that corresponds to the publish message sequence number. For\n     * more information see the **Replication** section in the **User Guide**.\n     * @param {BigInteger} value The sequenceId value.\n     * @returns {Command} The updated Command object.\n     */\n    sequenceId(value: BigInteger): Command;\n\n    /**\n     * ---------\n     * Returns the sequenceId value.\n     * @returns {BigInteger} The sequenceId value.\n     */\n    sequenceId(): BigInteger;\n\n    sequenceId(value?: BigInteger): Command | BigInteger {\n        if (value !== undefined) {\n            this.header.s = value.toString();\n            return this;\n        }\n\n        return BigInteger(this.header.s);\n    }\n\n    /**\n     * Sets the subIds - a comma-separated list of subscription ids sent from AMPS engine to identify which client \n     * subscriptions match a given `publish` message.\n     * @param {string} value The subIds (comma-delimited) value.\n     * @returns {Command} The updated Command object.\n     */\n    subIds(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the subIds (comma-delimited) value.\n     * @returns {string} The subIds (comma-delimited) value.\n     */\n    subIds(): string;\n\n    subIds(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.sids = value;\n            return this;\n        }\n\n        return this.header.sids;\n    }\n\n    /**\n     * Parses an object with params into a set of command parameters. For example,\n     * an object &#123; expiration: 30, filter: '/age > 20' &#125; will be equivalent to make a command using\n     * new amps.Command().expiration(30).filter('/age > 20');\n     * @param {object} [params] An object with params.\n     * @returns {Command} The updated Command object.\n     * @hidden\n     */\n    addParams(params?: CommandParams): Command {\n        if (params === null || params === undefined) { return this; }\n\n        const paramKeys = Object.keys(params);\n\n        for (let i = 0; i < paramKeys.length; ++i) {\n            const param = paramKeys[i];\n            try { this[param](params[param]); }\n            catch (err) { throw new Error('Parameter \"' + param + '\" not found.'); }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates and returns a deep copy of the command Header data.\n     * @returns {Header} The deep copy of command header.\n     * @hidden\n     */\n    private headerCopy(): Header {\n        const header: Header = new Header();\n        header.c = this.header.c.slice(0);\n\n        for (const key in this.header) {\n            header[key] = (typeof this.header[key] === 'string') ? this.header[key].slice(0) : this.header[key];\n        }\n\n        return header;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/command.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { ServerChooser } from './server-chooser.interface';\nimport { Authenticator } from './authenticator.interface';\n\n\n/**\n * Represents a simple object that contains a URI string value and an optional object that implements the \n * [[Authenticator]] interface.\n */\nexport interface ChooserItem {\n    uri: string;\n    authenticator?: Authenticator;\n}\n\n\n/**\n * This is a simple server chooser that implements the [[ServerChooser]] interface. It keeps a list of AMPS instance \n * URIs and Authenticators, and advances to the next one when a failure occurs. You can add any number of URIs to the \n * [[DefaultServerChooser]].\n *\n * *To use the [[DefaultServerChooser]], you add the URIs for the server to choose from, then set the chooser to the \n * [[Client]]:*\n * \n * ```javascript\n * var chooser = new amps.DefaultServerChooser();\n * chooser.add('wss://server:9005/amps/nvfix');\n * chooser.add('wss://server-two:9005/amps/nvfix');\n *\n * var client = new amps.Client('showchooser');\n * client.serverChooser(chooser);\n *\n * client\n *     .connect()\n *     .then(...)\n *     .catch(...);\n * ```\n */\nexport class DefaultServerChooser implements ServerChooser {\n    // Intenal data fields\n    private servers: ChooserItem[];\n    private index: number;\n    private error: Error;\n\n    /**\n     * This is the constructor for the [[DefaultServerChooser ]] class.\n     */\n    constructor() {\n        this.servers = [];\n        this.index = 0;\n        this.error = null;\n    }\n\n    /**\n     * This method adds a URI and an optional authenticator for [[Client]] to choose from.\n     *\n     * ```javascript\n     * chooser.add('wss://server:9005/amps/json');\n     * chooser.add('wss://another_server:9006/amps/json', myAuthenticator);\n     * ```\n     * \n     * @param {string} uri The URI of the server.\n     * @param {Authenticator} authenticator The authenticator object for custom authentication scenarios.\n     * @returns {DefaultServerChooser} The server chooser object.\n     */\n    add(uri: string, authenticator: Authenticator = null): DefaultServerChooser {\n        if (uri.length === 0) {\n            throw new Error('Invalid URI');\n        }\n\n        this.servers.push({uri: uri, authenticator: authenticator});\n\n        return this;\n    }\n\n    /**\n     * This method allows to add as many server choosers as needed. The arguments can be either uri strings or objects\n     * that contain uri key, and optionally, the authenticator key.\n     *\n     * ```javascript\n     * chooser.addAll(\n     *     'wss://server:9005/amps/json',\n     *     {uri: 'wss://extra_server:9007/amps/json'},\n     *     {uri: 'wss://another_server:9003/amps/json', authenticator: myAuthenticator}\n     * );\n     * ```\n     * \n     * @param {...(string | ChooserItem)} options either uri strings or objects that contain uri key, and optionally,\n     * the authenticator key.\n     * @returns {DefaultServerChooser} The server chooser object.\n     */\n    addAll(...options: Array<string | ChooserItem>): DefaultServerChooser {\n        for (const option of options) {\n            if (!option) { throw new Error('Invalid URI option'); }\n            if (typeof option === 'string') { this.add(option); }\n            else { this.add(option.uri, option.authenticator); }\n        }\n        \n        return this;\n    }\n\n    /**\n     * This method returns the current URI chosen. If no URI was chosen yet, returns null.\n     *\n     * @returns {string} The current URI chosen (if any).\n     */\n    getCurrentURI(): string {\n        return (this.servers.length > 0) ? this.servers[this.index].uri : null;\n    }\n\n    /**\n     * This method returns the current authenticator chosen. If no authenticator was chosen yet, returns null.\n     *\n     * @returns {Authenticator} The current authenticator chosen (if any).\n     */\n    getCurrentAuthenticator(): Authenticator {\n        return (this.servers.length > 0) ? this.servers[this.index].authenticator : null;\n    }\n\n    /**\n     * This method is invoked by the [[Client]] to indicate a connection failure occurred.\n     *\n     * @param {Error} error An error object containing an error message.\n     * @param {any} connectionInfo An object of properties associated with the failed connection.\n     */\n    reportFailure(error: Error, connectionInfo: any): void {\n        this.error = error;\n\n        // advancing the index to the next position\n        this.index = (this.index + 1) % this.servers.length;\n    }\n\n    /**\n     * This method is invoked by the [[Client]] to indicate a connection attempt was successful.\n     *\n     * @param {any} connectionInfo An object of properties associated with the successful connection.\n     */\n    reportSuccess(connectionInfo: any): void {\n        this.error = null;\n    }\n\n    /**\n     * This method provides additional detail to be included in an exception thrown by when the AMPS instance(s) are not\n     * available. Called by the [[Client]] when creating an exception.\n     *\n     * @returns {string} A string with information about the connection that failed and the reason for the failure.\n     * When no further information is available, returns an empty string.\n     */\n    getError(): string { return this.error ? this.error.message : ''; }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/default-server-chooser.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { SubscriptionManager } from './subscription-manager.interface';\nimport { Header } from './header';\nimport { Client } from './client';\nimport { Message } from './message';\n\n\n/**\n * [[DefaultSubscriptionManager]] is used to resubscribe and manage client subscriptions in case of a unintended\n * disconnection.\n *\n * ```javascript\n * // create a client\n * let client = new amps.Client('my-client');\n *\n * // Create and assign the subscription manager\n * client.subscriptionManager(new amps.DefaultSubscriptionManager());\n *\n * // ... access the subscription manager later\n * client.subscriptionManager().clear();\n * ```\n */\nexport class DefaultSubscriptionManager implements SubscriptionManager {\n    // Internal state\n    private activeSubs: any;\n    private resumedSubs: any;\n    private resubscribing: boolean;\n\n    /**\n     * This is the constructor for the DefaultSubscriptionManager class.\n     * @param {number} resubscriptionTimeout The maximum time (milliseconds) for the Resubscription to timeout. If\n     * it is equal to zero, it never times out.\n     */\n    constructor(private _resubscriptionTimeout: number = 0) {\n        // Detect negative value and short circuit in this case\n        if (_resubscriptionTimeout < 0) {\n            throw new Error('Invalid value: Cannot use negative argument values');\n        }\n\n        this.activeSubs = {};\n        this.resumedSubs = {};\n        this.resubscribing = false;\n    }\n\n    /**\n     * This method performs the subscription to a topic.\n     *\n     * @param {Header} header The subscription command header with all command data.\n     * @param {function} messageHandler The message handler callback function. Not required in case of 'replace' or\n     * 'pause' subscriptions.\n     */\n    subscribe(header: Header, messageHandler?: (message: Message) => void): void {\n        // short circuit\n        if (!header || (header.sub_id === undefined && header.sids === undefined)) { return; }\n\n        // copy the command object\n        header = DefaultSubscriptionManager.copyHeader(header);\n\n        // have options, such as oof, replace, etc\n        if (header.o) {\n            const subIds = header.sub_id + (header.sids ? ',' + header.sids : '').split(',');\n\n            // subscription header with a 'resume' option set - add it to the 'resumed' subscriptions list\n            if (header.o.indexOf('resume') >= 0) {\n                for (const subId of subIds) {\n                    if (!this.resumedSubs[subId]) {\n                        this.resumedSubs[subId] = {\n                            header: header,\n                            handler: messageHandler\n                        };\n                    }\n                }\n\n                return;\n            }\n            // subscription header with a 'pause' option set - remove it from the 'resumed' list, set 'pause' flag\n            // for any existing subscriptions in the 'active' list\n            else if (header.o.indexOf('pause') >= 0) {\n                for (const subId of subIds) {\n                    // if we have a resumed sub, remove it\n                    if (this.resumedSubs[subId]) {\n                        delete this.resumedSubs[subId];\n                    }\n\n                    if (this.activeSubs[subId]) {\n                        // if there's no 'replace' option set\n                        if (header.o.indexOf('replace') < 0) {\n                            const currentSubOptions = this.activeSubs[subId].o;\n                            this.activeSubs[subId].o = (currentSubOptions ? 'pause,' + currentSubOptions : 'pause');\n                            continue;\n                        }\n                        else {\n                            messageHandler = this.activeSubs[subId].handler;\n                        }\n                    }\n\n                    this.activeSubs[subId] = {\n                        header: header,\n                        handler: messageHandler\n                    };\n                }\n\n                return;\n            }\n        }\n\n        // subscriptions without options\n        const existingSubscription = this.activeSubs[header.sub_id];\n        if (existingSubscription) {\n            messageHandler = existingSubscription.handler;\n        }\n\n        // store the subscription\n        this.activeSubs[header.sub_id] = {\n            header: header,\n            handler: messageHandler\n        };\n    }\n\n    /**\n     * This method unsubcribes from a topic using the subscription id.\n     *\n     * @param {string} subId The subscription id.\n     */\n    unsubscribe(subId: string): void {\n        delete this.activeSubs[subId];\n        delete this.resumedSubs[subId];\n    }\n\n    /**\n     * This method clears all the managed subscriptions so that in case of the disconnection there will be no\n     * subscriptions to restore.\n     */\n    clear(): void {\n        this.activeSubs = {};\n        this.resumedSubs = {};\n    }\n\n    /**\n     * This method sets/gets the resubscription timeout value. It should be bigger or equal to zero. If it\n     * is equal to zero, it never times out.\n     *\n     * @param {number} timeout The timeout value (in milliseconds).\n     * @returns {number} The subscription timeout.\n     */\n    resubscriptionTimeout(timeout: number = 0): number {\n        if (timeout !== undefined) {\n            if (typeof timeout !== 'number' || timeout < 0) {\n                throw new Error('Invalid value');\n            }\n\n            this._resubscriptionTimeout = timeout;\n        }\n\n        return this._resubscriptionTimeout;\n    }\n\n    /**\n     * This method resubscribes to all the stored subscriptions using the [[Client]] object provided.\n     *\n     * @param {Client} client The AMPS client object. It must be connected.\n     */\n    resubscribe(client: Client): void {\n        // short circuit\n        if (client === undefined || client === null || !client || !client.isConnected()) {\n            throw new Error('A connected client must be provided');\n        }\n\n        this.resubscribing = true;\n\n        // send active, then resumed subs\n        Object.keys(this.activeSubs).map(\n            (subId: string) => { this.resubscribeInternal(subId, client, this.activeSubs[subId]); }\n        );\n        Object.keys(this.resumedSubs).map(\n            (subId: string) => { this.resubscribeInternal(subId, client, this.resumedSubs[subId]); }\n        );\n\n        this.resubscribing = false;\n    }\n\n    /**\n     * This is the internal method that wraps the resubscribe logic per subscription so that the public\n     * resubscribe() method looks clear and concise.\n     * @private\n     * @hidden\n     */\n    private resubscribeInternal = (\n        subId: string,\n        client: Client,\n        subscription: {handler(message: Message): void, header: Header}\n    ): void => {\n        const hasOptions = subscription.header.o !== undefined;\n\n        // make sure we're not sending 'replace' again\n        if (hasOptions) {\n            subscription.header.o = subscription.header.o.replace(/replace,?/g, '');\n        }\n\n        // bookmark subscription\n        if (subscription.header.bm) {\n            // if paused, subscribe with the most recent bookmark\n            if (!hasOptions || subscription.header.o.indexOf('pause') < 0) {\n                // get the most recent bookmark from bookmark store and assign it as a new bm value\n                subscription.header.bm = client.bookmarkStore().mostRecent(subscription.header.sub_id);\n            }\n        }\n\n        // assign a command id (should increase)\n        subscription.header.cid = client.nextSubId();\n\n        // send the subscription command\n        client.setMessageHandler(subId, subscription.handler);\n        client.send(subscription.header, undefined, this._resubscriptionTimeout);\n    }\n\n    /**\n     * This is a deep copy method (in order to preserve the message headers).\n     *\n     * @param {Header} header The command header to copy.\n     * @returns {Header} The copy of the original object.\n     * @private\n     * @hidden\n     */\n    private static copyHeader(obj: Header) {\n        const copiedObj: Header = new Header();\n        copiedObj.c = obj.c.slice(0);\n\n        Object.keys(obj).map((key: string) => {\n            copiedObj[key] = (typeof obj[key] === 'string') ? obj[key].slice(0) : obj[key];\n        });\n\n        return copiedObj;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/default-subscription-manager.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { DelayStrategy } from './delay-strategy.interface';\n\n\n/**\n * This is the interface with available parameters to set for a [[ExponentialDelayStrategy]] object.\n */\nexport interface ExponentialDelayStrategyParams {\n    initialDelay?: number;\n    maximumDelay?: number;\n    backoffExponent?: number;\n    maximumRetryTime?: number;\n    jitter?: number;\n}\n\n\n/**\n * [[ExponentialDelayStrategy]] is an implementation that exponentially backs off when reconnecting to the same server,\n * with a maximum time to retry before it gives up entirely.\n *\n * ```javascript\n * // create the strategy with all default values\n * var strategy = new amps.ExponentialDelayStrategy();\n *\n * // set jitter to 3.5, and keep other parameters default\n * var strategy = new amps.ExponentialDelayStrategy({jitter: 3.5});\n *\n * // set all params as arguments...\n * var strategy = new amps.ExponentialDelayStrategy(400, 25000, 1.5, 0, 2.5);\n *\n * // ... or using the object with values\n * var strategy = new amps.ExponentialDelayStrategy({\n *     initialDelay: 400,\n *     maximumDelay: 25000,\n *     backoffExponent: 1.5,\n *     maximumRetryTime: 0,\n *     jitter: 2.5\n * });\n *\n * // ... or using setter methods\n * var strategy = new amps.ExponentialDelayStrategy()\n *     .initialDelay(400)\n *     .maximumDelay(25000)\n *     .backoffExponent(1.5)\n *     .maximumRetryTime(0)\n *     .jitter(2.5);\n *\n *  // Setters can also be used after initialization of the strategy to change values dynamically\n * });\n * ```\n */\nexport class ExponentialDelayStrategy implements DelayStrategy {\n    private static readonly NEGATIVE_VALUE_ERROR: string = 'Invalid value(s): Cannot use negative argument values';\n\n    // data\n    private _initialDelay: number;\n    private _maximumDelay: number;\n    private _backoffExponent: number;\n    private _maximumRetryTime: number;\n    private _jitter: number;\n\n    // state\n    private startTime: number;\n    private firstUri: string = null;\n    private recentUri: string = null;\n    private currentUri: string = null;\n    private currentDelay: number = -1;\n\n    /**\n     * @param {number} initialDelay The time (in milliseconds) to wait before reconnecting to a server for the\n     * first time after a failed connection. The default value is **200** ms.\n     * @param {number} maximumDelay The maximum time to wait for any reconnect attempt (milliseconds).\n     * Exponential backoff will not exceed this maximum. The default value is **20** s.\n     * @param {number} backoffExponent The exponent to use for calculating the next delay time. For example, if\n     * the initial time is 200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.\n     * The default value is **2.0**.\n     * @param {number} maximumRetryTime The maximum time (milliseconds) to allow reconnect attempts to continue\n     * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client\n     * never gives up. The default value is **0**.\n     * @param {number} jitter The amount of 'jitter' to apply when calculating a delay time, measured in multiples\n     * of the initial delay. Jitter is used to reduce the number of simultaneous reconnects that may be issued from\n     * multiple clients. The default value is **1.0**.\n     */\n    constructor(\n        initialDelay?: number,\n        maximumDelay?: number,\n        backoffExponent?: number,\n        maximumRetryTime?: number,\n        jitter?: number\n    )\n\n    /**\n     * -------------\n     * @param {ExponentialDelayStrategyParams} params The object with delay parameters, such as delay, maximumRetryTime,\n     * etc.\n     */\n    constructor(params: ExponentialDelayStrategyParams)\n\n    constructor(\n        initialDelayOrParams?: ExponentialDelayStrategyParams | number,\n        maximumDelay: number = 20000,\n        backoffExponent: number = 2.0,\n        maximumRetryTime: number = 0,\n        jitter: number = 1.0\n\n    ) {\n        // Treat the first argument as a the object with values\n        if (typeof initialDelayOrParams !== 'number' && initialDelayOrParams) {\n            maximumDelay = initialDelayOrParams.maximumDelay;\n            backoffExponent = initialDelayOrParams.backoffExponent;\n            maximumRetryTime = initialDelayOrParams.maximumRetryTime;\n            jitter = initialDelayOrParams.jitter;\n            initialDelayOrParams = initialDelayOrParams.initialDelay;\n        }\n\n        // set values\n        this._initialDelay = (typeof initialDelayOrParams !== 'number' ? 200 : initialDelayOrParams);\n        this._maximumDelay = (typeof maximumDelay !== 'number' ? 20000 : maximumDelay);\n        this._backoffExponent = (typeof backoffExponent !== 'number' ? 2.0 : backoffExponent);\n        this._maximumRetryTime = (typeof maximumRetryTime !== 'number' ? 0 : maximumRetryTime);\n        this._jitter = (typeof jitter !== 'number' ? 1.0 : jitter);\n\n        // Detect negative values and short circuit in this case\n        if (this._initialDelay < 0 ||\n            this._maximumDelay < 0 ||\n            this._backoffExponent < 0 ||\n            this._maximumRetryTime < 0 ||\n            this._jitter < 0) {\n            throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR);\n        }\n\n        // initialize state variables\n        this.reset();\n    }\n\n    /**\n     * This method sets the time (in milliseconds) to wait before reconnecting to a server for the first time after\n     * a failed connection.\n     *\n     * @param {number} initialDelay The time (in milliseconds) to wait before reconnecting to a server for the\n     * first time after a failed connection.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    initialDelay(initialDelay: number = 200): ExponentialDelayStrategy {\n        if (initialDelay < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._initialDelay = initialDelay;\n        this.currentDelay = this._initialDelay;\n\n        return this;\n    }\n\n    /**\n     * This method sets the maximum time to wait between any reconnection attempts.\n     * Exponential backoff will not exceed this maximum.\n     *\n     * @param {number} maximumDelay The maximum time to wait for any reconnect attempt (milliseconds).\n     * Exponential backoff will not exceed this maximum.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    maximumDelay(maximumDelay: number = 20000): ExponentialDelayStrategy {\n        if (maximumDelay < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._maximumDelay = maximumDelay;\n\n        return this;\n    }\n\n    /**\n     *  This method sets the exponent to use for calculating the next delay time. For example if the initial time is\n     *  200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.\n     *\n     * @param {number} backoffExponent The exponent to use for calculating the next delay time. For example, if\n     * the initial time is 200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    backoffExponent(backoffExponent: number = 2.0): ExponentialDelayStrategy {\n        if (backoffExponent < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._backoffExponent = backoffExponent;\n\n        return this;\n    }\n\n    /**\n     * This method sets the time (in millseconds) to allow reconnect attempts to continue without a successful\n     * connection, before \"giving up\" and abandoning the connection attempt. 0 means never give up.\n     *\n     * @param {number} maximumRetryTime The maximum time (milliseconds) to allow econnect attempts to continue\n     * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client\n     * never gives up.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    maximumRetryTime(maximumRetryTime: number = 0): ExponentialDelayStrategy {\n        if (maximumRetryTime < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._maximumRetryTime = maximumRetryTime;\n\n        return this;\n    }\n\n    /**\n     * This method sets the jitter factor used to add randomness to the delay time. Jitter is represented as a multiple\n     * of the initial delay time;\n     * a random number from `[ 0, (JITTER * INITIAL_DELAY) )` is added to nonzero time delays.\n     *\n     * @param {number} jitter The amount of 'jitter' to apply when calculating a delay time, measured in\n     * multiples of the initial delay. Jitter is used to reduce the number of simultaneous reconnects that may be\n     * issued from multiple clients.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    jitter(jitter: number = 1.0): ExponentialDelayStrategy {\n        if (jitter < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._jitter = jitter;\n\n        return this;\n    }\n\n    /**\n     * This method returns the time (in milliseconds) that the client should delay before connecting to the given\n     * server URI.\n     *\n     * @param {string} uri The URI of the server.\n     * @returns {number} The time (in milliseconds) that the client should delay.\n     */\n    getConnectWaitDuration(uri: string): number {\n        const currentTime = new Date().getTime();\n\n        // exceeded time check\n        if (this._maximumRetryTime > 0) {\n            // maximum retry time is exceeded\n            if (this.startTime >= 0 && this._maximumRetryTime <= (currentTime - this.startTime)) {\n                throw new Error('Maximum Retry Time Exceeded');\n            }\n        }\n\n        let finalValue: number;\n\n        // next server in the chain or the first launch - return 0\n        if (uri !== this.recentUri && uri !== this.firstUri) {\n            // first launch\n            if (!this.firstUri) {\n                this.firstUri = uri;\n                this.startTime = currentTime;\n            }\n\n            finalValue = 0;\n        }\n        // wrapped circle or the same server again - return a new non-zero value\n        else {\n            // calculate the delay\n            this.currentDelay = (this.currentDelay < 0) ?\n                this._initialDelay :\n                Math.min(this._maximumDelay, (this.currentDelay * this._backoffExponent));\n\n            // calculate the jittered value\n            finalValue = Math.round(this.currentDelay + Math.random() * this._jitter * this._initialDelay);\n\n            // adjust it if it's too big by mirroring the delta: ex: 15005 => 14995\n            if (finalValue > this._maximumDelay) {\n                finalValue = 2 * this._maximumDelay - finalValue;\n\n                // make sure the final value is not smaller than the minimum delay (in case of a huge jitter value)\n                if (finalValue < this._initialDelay) { finalValue = this._initialDelay; }\n            }\n        }\n\n        // next this will be the recent uri\n        this.recentUri = uri;\n\n        return finalValue;\n    }\n\n    /**\n     * This method resets the state of this reconnect delay. AMPS calls this method when a connection is established.\n     */\n    reset(): void {\n        this.startTime = -1;\n        this.firstUri = null;\n        this.recentUri = null;\n        this.currentUri = null;\n        this.currentDelay = -1;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/exponential-delay-strategy.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { DelayStrategy } from './delay-strategy.interface';\n\n\n/**\n * This is the interface with available parameters to set for a [[FixedDelayStrategy]] object.\n */\nexport interface FixedDelayStrategyParams {\n    delay?: number;\n    maximumRetryTime?: number;\n}\n\n\n/**\n * [[FixedDelayStrategy]] is a reconnect delay strategy implementation that waits a fixed amount of time before retrying\n * a connection.\n *\n * ```javascript\n * // create the fixed strategy with all default values\n * var strategy = new amps.FixedDelayStrategy();\n *\n * // set the maximum retry time to 15 seconds, leave the default delay value\n * var strategy = new amps.FixedDelayStrategy({maximumRetryTime: 15000});\n *\n * // set all params as arguments...\n * var strategy = new amps.FixedDelayStrategy(2000, 45000);\n *\n * // ... or using the object with values\n * var strategy = new amps.FixedDelayStrategy({\n *     delay: 2000,\n *     maximumRetryTime: 45000\n * });\n * ```\n */\nexport class FixedDelayStrategy implements DelayStrategy {\n    // Internal data\n    private delay: number;\n    private maximumRetryTime: number;\n    private startTime: number;\n    private firstUri: string;\n    private recentUri: string;\n\n    /**\n     * @param {number} delay The time (in milliseconds) to wait before reconnecting to a server after a failed\n     * connection. The default value is **200** ms.\n     * @param {number} maximumRetryTime The maximum time (milliseconds) to allow reconnect attempts to continue\n     * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client\n     * never gives up. The default value is **0**.\n     */\n    constructor(delay?: number, maximumRetryTime?: number);\n\n    /**\n     * ---------\n     * @param {FixedDelayStrategyParams} params The object with delay parameters, such as delay and maximumRetryTime.\n     */\n    constructor(params: FixedDelayStrategyParams);\n\n    constructor(delayOrParams?: FixedDelayStrategyParams | number, maximumRetryTime: number = 0) {\n        // Treat the first argument as a the object with values\n        if (typeof delayOrParams !== 'number' && delayOrParams) {\n            maximumRetryTime = delayOrParams.maximumRetryTime;\n            delayOrParams = delayOrParams.delay;\n        }\n\n        // set values\n        this.delay = (typeof delayOrParams !== 'number' ? 200 : delayOrParams);\n        this.maximumRetryTime = (typeof maximumRetryTime !== 'number' ? 0 : maximumRetryTime);\n\n        // Detect negative values and short circuit in this case\n        if (this.delay < 0 || this.maximumRetryTime < 0) {\n            throw new Error('Invalid value(s): Cannot use negative argument values');\n        }\n\n        // initialize other internal variables\n        this.reset();\n    }\n\n    /**\n     * This method returns the time (in milliseconds) that the client should delay before connecting to the given\n     * server URI.\n     *\n     * @param {string} uri The URI of the server.\n     * @returns {number} The time (in milliseconds) that the client should delay.\n     */\n    getConnectWaitDuration(uri: string): number {\n        const currentTime = new Date().getTime();\n\n        // exceeded time check\n        if (this.maximumRetryTime > 0) {\n            // maximum retry time is exceeded\n            if (this.startTime >= 0 && this.maximumRetryTime <= (currentTime - this.startTime)) {\n                throw new Error('Maximum Retry Time Exceeded');\n            }\n        }\n\n        let finalValue: number;\n\n        // next server in the chain or the first launch - return 0\n        if (uri !== this.recentUri && uri !== this.firstUri) {\n            // first launch\n            if (!this.firstUri) {\n                this.firstUri = uri;\n                this.startTime = currentTime;\n            }\n\n            finalValue = 0;\n        }\n        else {\n            finalValue = this.delay;\n        }\n\n        // next this will be the recent uri\n        this.recentUri = uri;\n\n        return finalValue;\n    }\n\n    /**\n     * This method resets the state of this reconnect delay. AMPS calls this method when a connection is established.\n     */\n    reset(): void {\n        this.startTime = -1;\n        this.firstUri = null;\n        this.recentUri = null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/fixed-delay-strategy.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport * as BigInteger from 'big-integer';\nimport { BookmarkStore } from './bookmark-store.interface';\nimport { Client } from './client';\nimport { Message } from './message';\n\n\n\n/**\n * This is the internal class that encapsulates a bookmark object (which consists of a publisher id and a sequence\n * number).\n *\n * @param {string} rawBookmark The string of a format: \"10357694053628526720|1490901822670001000|\".\n * @returns {Bookmark} the bookmark object.\n * @private\n */\nclass Bookmark {\n    pubId: string = null;\n    sequenceNumber: BigInteger = null;\n    raw: string;\n    discarded: boolean = false;\n\n    constructor(rawBookmark: string) {\n        this.raw = rawBookmark;\n\n        if (rawBookmark.length > 1) {\n            // regular bookmark\n            if (rawBookmark.charAt(rawBookmark.length - 1) === '|') {\n                const parts = rawBookmark.split('|');\n                this.pubId = parts[0];\n                this.sequenceNumber = BigInteger(parts[1]);\n            }\n            // ELSE: Timestamp bookmark\n        }\n        else {\n            this.sequenceNumber = BigInteger.zero;\n        }\n    }\n}\n\n\nclass Subscription {\n    // internal data\n    private publishers: {[key: string]: BigInteger} = {};\n    private _bookmarks: Bookmark[] = [];\n    private bookmarkMap: {[key: string]: number} = {};\n    private _noPersistedAcks: boolean;\n\n    private lastPersisted: Bookmark = new Bookmark('0');\n    private lastDiscarded: Bookmark = null;\n\n    constructor(noPersAcks: boolean = false) {\n        this._noPersistedAcks = noPersAcks;\n    }\n\n    bookmarks(): Bookmark[] {\n        return this._bookmarks;\n    }\n\n    persisted(rawBookmark: string): void {\n        const bookmark = new Bookmark(rawBookmark);\n\n        if (this.lastPersisted &&\n            !this._noPersistedAcks &&\n            bookmark.pubId === this.lastPersisted.pubId && \n            bookmark.sequenceNumber.lesserOrEquals(this.lastPersisted.sequenceNumber)) {\n            return;\n        }\n\n        this.lastPersisted = bookmark;\n    }\n\n    isDiscarded(message: Message): boolean {\n        const bmIndex = this.bookmarkMap[message.bm];\n\n        // if we have the index for this bookmark already\n        if (bmIndex !== undefined) {\n            const bookmark = this._bookmarks[bmIndex];\n\n            // found the bookmark and it's not discarded\n            if (bookmark && !bookmark.discarded) {\n                return false;\n            }\n\n            if (!bookmark) {\n                delete this.bookmarkMap[message.bm];\n            }\n\n            return true;\n        }\n\n        // parse the message bookmark in order to have pubId and SeqNo and check if we have it stored in publishers\n        const messageBookmark = new Bookmark(message.bm);\n        const publisherSeqNo = this.publishers[messageBookmark.pubId];\n\n        if (publisherSeqNo === undefined || publisherSeqNo.lesser(messageBookmark.sequenceNumber)) {\n            this.publishers[messageBookmark.pubId] = messageBookmark.sequenceNumber;\n            return false;\n        }\n\n        // last attempt - trying to find it in the list of bookmarks\n        for (let i = 0; i < this._bookmarks.length; i++) {\n            const currentBookmark = this._bookmarks[i];\n\n            // found it!\n            if (currentBookmark &&\n                currentBookmark.pubId === messageBookmark.pubId &&\n                currentBookmark.sequenceNumber.equals(messageBookmark.sequenceNumber)) {\n                return currentBookmark.discarded;\n            }\n        }\n\n        // tried everything at this point, so it's discarded for sure\n        return true;\n    }\n\n    mostRecent(): string {\n        this.updateBookmarkMap();\n\n        let useLastDiscarded = this.lastDiscarded !== null;\n        let useLastPersisted = this.lastPersisted !== null;\n\n        if (useLastDiscarded) {\n            if (this._bookmarks.length && useLastPersisted) {\n                useLastDiscarded = false;\n            }\n            else {\n                // Only use one if they are the same publisher\n                if (useLastPersisted && (this.lastPersisted.pubId === this.lastDiscarded.pubId)) {\n                    useLastPersisted = this.lastPersisted.sequenceNumber.lesser(this.lastDiscarded.sequenceNumber);\n                    useLastDiscarded = !useLastPersisted;\n                }\n            }\n        }\n\n        // build the most recent list\n        let recentList = '';\n\n        if (useLastDiscarded) {\n            recentList += this.lastDiscarded.raw;\n        }\n\n        // If we don't have a last persisted or a last discarded OR we are expecting persisted acks but haven't\n        // received one yet, then we should try to build a list of bookmarks based on publishers we have seen\n        // so far, if any, or return EPOCH value.\n        const publisherKeys = Object.keys(this.publishers);\n        if ((!useLastPersisted && !useLastDiscarded) ||\n            (this.lastPersisted && this.lastPersisted.raw === Client.Bookmarks.EPOCH)) {\n\n            if (publisherKeys.length === 0) {\n                // Set last persisted to EPOCH and return it\n                if (this.lastPersisted === null) {\n                    this.lastPersisted = new Bookmark(Client.Bookmarks.EPOCH);\n                }\n\n                return this.lastPersisted.raw;\n            }\n\n            if (recentList.length > 0) {\n                recentList = '';\n            }\n\n            // build and return the bookmark list from the publishers map\n            const publisherBookmarksList = publisherKeys.map((key: string) => {\n                return key + '|' + this.publishers[key].toString() + '|';\n            }).join(',');\n\n            if (recentList.length > 0) { recentList += ','; }\n            recentList += publisherBookmarksList;\n\n            return recentList;\n        }\n\n        if (useLastPersisted) {\n            if (recentList.length > 0) { recentList += ','; }\n            recentList += this.lastPersisted.raw;\n        }\n\n        return recentList;\n    }\n\n    log(rawBookmark: string): BigInteger {\n        let bmIndex = this.bookmarkMap[rawBookmark];\n        if (bmIndex !== undefined) {\n            return this._bookmarks[bmIndex].sequenceNumber;\n        }\n\n        // add the bookmark as a parsed object\n        const bookmark = new Bookmark(rawBookmark);\n        this._bookmarks.push(bookmark);\n\n        // obtain its index and store in the map\n        bmIndex = this._bookmarks.length - 1;\n        this.bookmarkMap[rawBookmark] = bmIndex;\n\n        return bookmark.sequenceNumber;\n    }\n\n    discard(rawBookmark: string): void {\n        const bmIndex = this.bookmarkMap[rawBookmark];\n        if (bmIndex === undefined) { return; }\n\n        let currentBookmark = this._bookmarks[bmIndex];\n        currentBookmark.discarded = true;\n\n        // if this message is the first in the list, find all discarded messages in the row, make the new \n        // lastDiscarded value and remove all previous entries in the list\n        // Ex: [D-1, D-2, D-3, D-4, D-5, N, N, N, D, N] => [N, N, N, D, N], lastDiscarded = 5\n        if (bmIndex === 0) {\n            let cutUpto = 0;\n            while (\n                currentBookmark.discarded && \n                (!this.lastPersisted && this._noPersistedAcks || \n                    currentBookmark.sequenceNumber.lesserOrEquals(this.lastPersisted.sequenceNumber)) &&\n                cutUpto < this._bookmarks.length) {\n                currentBookmark = this._bookmarks[cutUpto++];\n                this.lastDiscarded = currentBookmark;\n            }\n\n            this._bookmarks.splice(0, cutUpto);\n            this.updateBookmarkMap();\n        }\n    }\n\n    noPersistedAcks(): void {\n        this._noPersistedAcks = true;\n    }\n\n    // internal methods\n    private updateBookmarkMap() {\n        this.bookmarkMap = {};\n\n        for (let i = 0; i < this._bookmarks.length; i++) {\n            const bookmark =  this._bookmarks[i];\n            if (bookmark) { this.bookmarkMap[bookmark.raw] = i; }\n        }\n    }\n}\n\n\n/**\n * Bookmark store is used by the [[Client]] to provide resumable subscriptions and client-side duplicate message\n * handling using in-memory storage.\n *\n * ```javascript\n * // create the bookmark store\n * var bookmarkStore = new amps.MemoryBookmarkStore();\n *\n * // create the client instance and assign the bookmark store to it\n * var client = new amps.Client('my-client');\n * client.bookmarkStore(bookmarkStore);\n *\n * // ... access the bookmark store later\n * client.bookmarkStore().purge();\n * ```\n */\nexport class MemoryBookmarkStore implements BookmarkStore {\n    // Internal state\n    private subscriptionsInfo: { [key: string]: Subscription; } = {};\n\n    /**\n     * This method is called internally by the [[Client]] to log a bookmark to the persistent log.\n     *\n     * @param {Message} message The message to bookmark.\n     * @returns {BigInteger} The corresponding bookmark sequence number for this bookmark.\n     */\n    log(message: Message): BigInteger {\n        return this.findSubscription(message.sub_id ? message.sub_id : message.sids).log(message.bm);\n    }\n\n    /**\n     * This method is called when you want to mark the message object as discarded, indicating that the application has\n     * completed processing the message. Marking a message as discarded means that the message will not be replayed when\n     * the subcription resumes.\n     *\n     * @param {Message} message The message object.\n     */\n    discard(message: Message): void;\n\n    /**\n     * ------------\n     * This method is called when you want to mark the message specified by the subscription ID and the bookmark\n     * sequence number as discarded, indicating that the application has completed processing the message.\n     * Marking a message as discarded means that the message will not be replayed when the subcription resumes.\n     *\n     * @param {string} subId The subscription id.\n     * @param {string} bookmark The bookmark field value in a message.\n     */\n    discard(subId: string, bookmark: string): void;\n\n    discard(messageOrSubId: string | Message, bookmark?: string): void {\n        // single argument: message\n        if (typeof messageOrSubId !== 'string') {\n            if (messageOrSubId.s === undefined) {\n                bookmark = messageOrSubId.bm;\n\n                if (!bookmark) {\n                    throw new Error('Invalid bookmark value has been provided');\n                }\n            }\n\n            messageOrSubId = (messageOrSubId.sub_id ? messageOrSubId.sub_id : messageOrSubId.sids);\n        }\n\n        this.findSubscription(messageOrSubId).discard(bookmark);\n    }\n\n    /**\n     * This method is called when you want to return the most recent bookmark from the log that ought to be used for\n     * (re-)subscriptions.\n     *\n     * @param {string} subId The subscription id.\n     * @returns {string} The most recent bookmark.\n     */\n    mostRecent(subId: string): string {\n        return this.findSubscription(subId).mostRecent();\n    }\n\n    /**\n     * This method is called for each arriving message to determine if the application has already processed and\n     * discarded this message. Returns 'true' if the bookmark is in the log and marked as discarded and should therefore\n     * not be reprocessed. Otherwise, returns 'false'. Generally, isDiscarded is called by the\n     * [[Client]] however, if needed it can be called by the application as well.\n     *\n     * @param {Message} message The message to check.\n     * @returns {boolean} `true` if the bookmark is in the log and marked as discarded and should therefore\n     * not be reprocessed. Otherwise, returns `false`.\n     */\n    isDiscarded(message: Message): boolean {\n        return this.findSubscription((message.sub_id ? message.sub_id : message.sids)).isDiscarded(message);\n    }\n\n    /**\n     * This method is called when you want to purge the contents of this store. If the subId is not provided, removes\n     * any tracking history associated with publishers and received messages. Otherwise, removes history for that subId\n     * only.\n     *\n     * @param {string} subId The identifier of the subscription to purge.\n     */\n    purge(subId?: string): void {\n        if (subId !== undefined) { delete this.subscriptionsInfo[subId]; }\n        else { this.subscriptionsInfo = {}; }\n    }\n\n    /**\n     * This method is called when you want to retrieve the sequence number of the oldest bookmark in the store.\n     *\n     * @param {string} subId The identifier of the subscription.\n     * @returns {BigInteger} The sequence number of the oldest bookmark in the store. 0 if not found/doesn't exist\n     */\n    oldestBookmarkSeq(subId: string): BigInteger {\n        try {\n            return this.findSubscription(subId).bookmarks()[0].sequenceNumber;\n        }\n        catch (err) {}\n\n        return BigInteger(0);\n    }\n\n    /**\n     * This method is called internally by the [[Client]] to mark a message as safely persisted by AMPS to all of its\n     * sync replication destinations.\n     *\n     * @param {string} subId The identifier of the subscription.\n     * @param {string} bookmark A raw bookmark string.\n     */\n    persisted(subId: string, bookmark: string): void {\n        this.findSubscription(subId).persisted(bookmark);\n    }\n\n    /**\n     * This method notifies the bookmark store that the subscription won't receive persisted acks.\n     *\n     * @param {string} subId The subscription id.\n     */\n    noPersistedAcks(subId: string): void {\n        this.findSubscription(subId).noPersistedAcks();\n    }\n\n    // internal methods\n    private findSubscription(subId: string): Subscription {\n        let subscription = this.subscriptionsInfo[subId];\n\n        if (!subscription) {\n            // create new subscription record\n            subscription = new Subscription();\n            this.subscriptionsInfo[subId] = subscription;\n        }\n\n        return subscription;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/memory-bookmark-store.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport * as BigInteger from 'big-integer';\nimport { PublishStore } from './publish-store.interface';\nimport { Header } from './header';\nimport { Message } from './message';\n\n\n/**\n * [[MemoryPublishStore]] represents the default implementation of the in-memory publish store. The AMPS client uses \n * publish stores for recovery purposes. The store is responsible for maintaining the state of published messages and \n * recovering that state in the event of a disconnection.\n */\nexport class MemoryPublishStore implements PublishStore {\n    private messageQueue: {sequence: BigInteger, header: Header, data: any}[] = [];\n    private _lastPersisted: BigInteger = null;\n    private _lowestUnpersisted: BigInteger = null;\n\n    /**\n     * Store the provided message. The sequence of the message is a key that the client can later use to replay the\n     * operation or remove the operation from the store. Implementations may assume that the sequence increases\n     * monotonically.\n     *\n     * @param {Message} message The message that contains fields like command name, topic name, data, etc.\n     */\n    store(message: Message): void {\n        // Validation first\n        if (message.c !== 'publish' && message.c !== 'delta_publish' && message.c !== 'sow_delete') {\n            throw new Error('Invalid message type to store');\n        }\n\n        if (this.messageQueue.length > 0 && \n            this.messageQueue[this.messageQueue.length - 1].sequence.compare(message.s) >= 0) {\n            // Invalid: sequence is not increasing\n            throw new Error('Sequence id is not increasing');\n        }\n\n        // store the message\n        this.messageQueue.push({sequence: BigInteger(message.s), header: message, data: message.data});\n\n        // remove data field from message\n        delete message.data;\n    }\n\n    /**\n     * This method replays all messages in the store using the provided message sender.\n     *\n     * @param {function} messageSender The sender that will re-send the messages.\n     */\n    replay(messageSender: (header: Header, data?: any, timeout?: number) => void): void {\n        for (const messageItem of this.messageQueue) {\n            messageSender(messageItem.header, messageItem.data);\n        }\n    }\n\n    /**\n     * This method replays the message with the specified sequenceId.\n     *\n     * @param {function} messageSender The sender that will re-send the message.\n     * @param {BigInteger} sequenceId The sequence id of the message to replay.\n     */\n    replaySingle(messageSender: (header: Header, data?: any, timeout?: number) => void, sequenceId: BigInteger): void {\n        const index = this.findQueueIndex(sequenceId);\n        if (index < 0) { return; }\n        \n        const messageItem = this.messageQueue[index];\n        messageSender(messageItem.header, messageItem.data);\n    }\n\n    /**\n     * This method discards all operations up to the index provided.\n     *\n     * @param {BigInteger} sequenceId The sequence id to keep. All previous sequence numbers will be discarded.\n     */\n    discardUpTo(sequenceId: BigInteger): void {\n        // determine the index of the last message to release\n        const cutBefore = this.findQueueIndex(sequenceId);\n        if (this.messageQueue.length === 0 || cutBefore < 0) { return; }\n\n        // set last persisted\n        if (this._lastPersisted === null || this._lastPersisted.compare(sequenceId) < 0) {\n            this._lastPersisted = sequenceId;\n        }\n\n        // release messages with sequence id < sequenceId not including sequenceId\n        this.messageQueue.splice(0, cutBefore + 1);\n\n        // adjust flags\n        if (this.messageQueue.length > 0) {\n            this._lowestUnpersisted = this.messageQueue[0].sequence;\n        }\n        else {\n            this._lowestUnpersisted = null;\n        }\n    }\n\n    /**\n     * This method returns the number of messages in the store.\n     *\n     * @returns {number} The number of messages in the store.\n     */\n    unpersistedCount(): number {\n        return this.messageQueue.length;\n    }\n\n    /**\n     * This method returns the oldest sequence in the store.\n     *\n     * @returns {BigInteger} The oldest sequence number in the store.\n     */\n    lowestUnpersisted(): BigInteger {\n        return this._lowestUnpersisted;\n    }\n\n    /**\n     * This method returns the last persisted sequence id in the store.\n     *\n     * @returns {BigInteger} The sequence number of the last discarded message.\n     */\n    lastPersisted() {\n        return this._lastPersisted;\n    }\n\n\n    // internal methods\n    /**\n     * This method finds the index of the sequence number in the message queue using classic binary search.\n     * No need to take care of duplicates since we assume there is none. Since it's possible to have missing chains in\n     * this list, we're looking for the last sequence id that is <= sequenceId rather than looking for a strict match.\n     *\n     * @param {BigInteger} sequenceId The sequence number to find.\n     * @returns {number} The index found. If the sequence is not in the queue, returns -1. Not found in this case means\n     * it's either bigger or smaller than all sequence numbers in the list\n     * @private\n     * @hidden\n     */\n    private findQueueIndex(sequenceId: BigInteger): number {\n        let start = 0;\n        let end = this.messageQueue.length;\n        const last = end - 1;\n        let found = -1;\n\n        // short cicuit\n        if (end === 0 || this.messageQueue[0].sequence.compare(sequenceId) > 0) { return found; }\n\n        let mid;\n        while (start < end) {\n            mid = Math.floor((start + end) / 2);\n\n            if (this.messageQueue[mid].sequence.compare(sequenceId) > 0) {\n                end = mid;\n            }\n            else if (this.messageQueue[mid].sequence.compare(sequenceId) <= 0 && \n                     (mid === last || this.messageQueue[mid + 1].sequence.compare(sequenceId) > 0)) {\n                found = mid; \n                break;\n            }\n            else {\n                start = mid + 1;\n            }\n        }\n\n        return found;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/memory-publish-store.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport * as BigInteger from 'big-integer';\nimport { Header } from './header';\n\n\n/**\n * This is a class that encapsulates a message header. The message header is exposed via `message.header` field of\n * the [[Message]] class:\n *\n * ```javascript\n * function messageHander(message) {\n *     if (message.header.command() === 'sow') {\n *         console.log(message.header.groupSequenceNumber());\n *         console.log(message.data);\n *     }\n * }\n * ```\n * @notice Not all messages populate all headers. The *Command Reference* provides detailed description of the headers \n * returned on specific messages and what they contain.\n */\nexport class MessageHeader {\n    private _sequenceId: BigInteger;\n    constructor(private _header: Header) {}\n\n    /**\n     * Returns the command name, e.g. 'publish', 'sow_and_subscribe', which is one of the followng:\n     * - ack\n     * - publish\n     * - delta_publish\n     * - subscribe\n     * - delta_subscribe\n     * - oof\n     * - sow\n     * - sow_and_subscribe\n     * - sow_and_delta_subscribe\n     * - sow_delete\n     * - unsubscribe\n     *\n     * Returns the command name.\n     * @returns {string} The command name value.\n     */\n    command(): string { return this._header.c; }\n\n    /**\n     * Returns the command id.\n     * @returns {string} The command id value.\n     */\n    commandId(): string { return this._header.cid; }\n\n    /**\n     * Returns the query id.\n     * @returns {string} The query id.\n     */\n    queryId(): string { return this._header.query_id; }\n\n    /**\n     * Returns the subscription id.\n     * @returns {string} The subscription id.\n     */\n    subId(): string { return this._header.sub_id; }\n\n    /**\n     * Returns the acknowledgement type for the given command. Multiple ack types are comma-delimited.\n     * @returns {string} The acknowledgement message type.\n     */\n    ackType(): string { return this._header.a; }\n\n    /**\n     * Returns the number of records to return. Note: If TopN is not equally divisible by the batch size, then more\n     * records will be returned so that the total number of records is equally divisible by the batch size setting.\n     * @returns {number} The top N value.\n     */\n    topN(): number { return this._header.top_n; }\n\n    /**\n     * Returns the specified number of messages that are batched together when returning a query result.\n     * @returns {number} The batch size value.\n     */\n    batchSize(): number { return this._header.bs; }\n\n    /**\n     * Returns the topic value.\n     * @returns {string} The topic value.\n     */\n    topic(): string { return this._header.t; }\n\n    /**\n     * Returns a client-originated identifier used to mark a location in journaled messages.\n     * @returns {string} The bookmark value.\n     */\n    bookmark(): string { return this._header.bm; }\n\n    /**\n     * Returns a comma-delimited list of options on a specific command.\n     * @returns {string} The options value.\n     */\n    options(): string { return this._header.o ? this._header.o : this._header.opts; }\n\n    /**\n     * Returns the correlation id: opaque token set by an application and returned with the message. Must be\n     * `base64` encoded characters only.\n     * @returns {string} The correlationId value.\n     */\n    correlationId(): string { return this._header.x; }\n\n    /**\n     * Returns the SOW topic key(s) by which to order SOW query.\n     * @returns {string} The orderBy value.\n     */\n    orderBy(): string { return this._header.orderby; }\n\n    /**\n     * Returns the sow key value.\n     * A SOW key will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in\n     * on a subscription when the published message matches a record in the SOW.\n     *\n     * Format:\n     *\n     * - string containing the digits of an unsigned long for AMPS-generated SOW keys\n     *\n     * OR\n     *\n     * - arbitrary string in the base64 character set for user-provided SOW keys.\n     * @returns {string} The sow key value.\n     */\n    sowKey(): string { return this._header.k; }\n\n    /**\n     * Returns the sowKeys as a comma-delimited value.\n     * @returns {string} The sowKeys value.\n     */\n    sowKeys(): string { return this._header.sow_keys; }\n\n    /**\n     * Returns the Message expiration value (in seconds).\n     * @returns {number} The Message expiration value.\n     */\n    expiration(): number { return this._header.e; }\n\n    /**\n     * Returns the client name value.\n     * Used to identify a client. Useful for publishers that wish to identify the source of a publish, client status\n     * messages and for client heartbeats.\n     * @returns {string} The client name value.\n     */\n    clientName(): string { return this._header.client_name; }\n\n    /**\n     * Returns an integer that corresponds to the publish message sequence number. For more information see the\n     * *Replication* section in the *User Guide*.\n     * @returns {BigInteger} The sequenceId value.\n     */\n    sequenceId(): BigInteger {\n        if (this._header.s !== undefined) { return BigInteger(this._header.s); }\n        return undefined;\n    }\n\n    /**\n     * Returns a comma-separated list of SubIds sent from AMPS engine to identify which client subscriptions match a\n     * given `publish` message.\n     * @returns {string} The subIds (comma-delimited) value.\n     */\n    subIds(): string { return this._header.sids; }\n\n    /**\n     * Returns the content filter value.\n     * @returns {string} The content filter value.\n     */\n    filter(): string { return this._header.filter ? this._header.filter : this._header.f; }\n\n    /**\n     * Returns the message timestamp set by the server in a ISO-8601 date-time format.\n     * @returns {string} The timestamp value.\n     */\n    timestamp(): string { return this._header.ts; }\n\n\n    /**\n     * Returns the number of topic matches for the SOW query. Sent in `stats` acknowledgement message.\n     * @returns {string} The topicMatches value.\n     */\n    topicMatches(): number { return this._header.topic_matches; }\n\n    /**\n     * Returns the user id used to identify the user of a command.\n     * @returns {string} The userId value.\n     */\n    userId(): string { return this._header.user_id; }\n\n    /**\n     * Returns the failure message that appears when an acknowledgement returns a status of failure.\n     * @returns {string} The failure reason value.\n     */\n    reason(): string { return this._header.reason; }\n\n    /**\n     * Returns the number of records deleted from the SOW with a `sow_delete` command.\n     * Used in conjunction with the stats acknowledgement.\n     * @returns {string} The recordsDeleted value.\n     */\n    recordsDeleted(): number { return this._header.records_deleted; }\n\n    /**\n     * Returns the number of records inserted into the SOW. Used in conjunction with the stats acknowledgement.\n     * @returns {string} The recordsInserted value.\n     */\n    recordsInserted(): number { return this._header.records_inserted; }\n\n    /**\n     * Returns number of records in the store. The value is returned in the acknowledgement to an SOW query.\n     * @returns {string} The recodsReturned value.\n     */\n    recordsReturned(): number { return this._header.records_returned; }\n\n    /**\n     * Returns the number of records updated in the SOW. Used in conjunction with the stats acknowledgement.\n     * @returns {string} The recodsUpdated value.\n     */\n    recordsUpdated(): number { return this._header.records_updated; }\n\n    /**\n     * For messages from a queue, returns the time at which the lease expires.\n     */\n    leasePeriod(): string { return this._header.lp; }\n\n    /**\n     * Returns the transmission time value.\n     * @returns {string} The transmission time value.\n     */\n    transmissionTime(): string { return this._header.transmission_time; }\n\n    /**\n     * As a part of the acknowledgement to a SOW query, returns the number of matches.\n     */\n    matches(): number { return this._header.matches; }\n\n    /**\n     * Sent with XML formatted message data to indicate the number of bytes used by the message body.\n     */\n    messageLength(): number { return this._header.l; }\n\n    /**\n     * Returns the Group Sequence Number for each batch message of a SOW response.\n     */\n    groupSequenceNumber(): number { return this._header.gseq; }\n\n    /**\n     * Returns the client status when client is monitored for heartbeats.\n     * @returns {string} The client status value.\n     */\n    status(): string { return this._header.status; }\n}\n\n\n/**\n * This is the AMPS Message representation class. Any Message received from AMPS is a [[Message]] object.\n *\n * Message have two main fields: `header` and `data`. The `header` property is used to access message header fields,\n * such as command type, message length, sow key, etc. The `data` fields contains the message payload.\n *\n * ```javascript\n * function messageHandler(message) {\n *     // print out the command type\n *     console.log(message.header.command());\n *\n *     // get the subscription id of the message\n *     console.log(message.header.subId());\n *\n *     // print out message data\n *     console.log(message.data);\n *\n * }\n * ```\n *\n * @see [[MessageHeader]] for the list of available header methods.\n */\nexport class Message extends Header {\n    /**\n     * Message data. Contains message payload parsed according with its message type and the [[TypeHelper]] used for\n     * that type.\n     */\n    data: any;\n\n    /**\n     * Message header fields, such as `command()`, `subId()`, `filter()`, etc.\n     */\n    header: MessageHeader;\n\n    /**\n     * The constructor basically prepares the header field so that a user can have acess methods for header fields.\n     * @private\n     * @hidden\n     */\n    constructor() {\n        super();\n        this.header = new MessageHeader(this);\n    }\n\n    /**\n     * This is the method that initializes messages that are created from simple objects\n     * @hidden\n     */\n    static fromObject(messageObject: any): Message {\n        // A bit of black magic to convert a simple dict into an object of class Message\n        messageObject.header = new MessageHeader(messageObject);\n\n        return messageObject as Message;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/message.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\ndeclare function unescape(s: string): string;\ndeclare function escape(s: string): string;\n\n\n/**\n * This is the interface for custom type helpers. Any custom type helper should implement this interface in\n * order to be compatible with the TypeHelper engine.\n */\nexport interface ITypeHelper {\n    /**\n     * This method is used to serialize data in order send it to the server. All data chuncks should be converted into\n     * an array of strings.\n     *\n     * @param data The data to serialize.\n     * @returns Serialized data as an array of strings.\n     */\n    serialize(data: any): string[];\n\n    /**\n     * This method deserializes data from the Server into a format that will be consumed by the message handler.\n     * It can be any format as long as the consumer of the data is aware of it.\n     *\n     * @param data The data to deserialize.\n     * @returns Deserialized data.\n     */\n    deserialize(data: any): any;\n\n    /**\n     * For composite helper only.\n     * @hidden\n     */\n    helpers?: ITypeHelper[];\n}\n\n\n/**\n * This is a default implementation of the FIX/NVFIX type helper. Messages are converted into JavaScript objects.\n * Repeating groups will take on their last value and ordering of fields isn’t preserved. It is possible to set a\n * custom delimiter for messages, hy default it is `\\x01`.\n *\n * [[TypeHelper]] class already provides instances of this class for types `fix` and `nvfix`.\n */\nexport class FixTypeHelper implements ITypeHelper {\n    private _delimiter: string;\n\n    /**\n     * This is the constructor of the FixNvfixTypeHelper class.\n     * @param delimiter Optional delimiter value.\n     */\n    constructor(delimiter: string = '\\x01') {\n        this._delimiter = delimiter;\n    }\n\n    /**\n     * @hidden\n     */\n    serialize(data: any): string[] {\n        // already formatted fix/nvfix string\n        if (typeof data === 'string') { return [data]; }\n\n        // otherwise, we assume it's an object with keys and values\n        return [Object.keys(data)\n            .map((key: string) => key + '=' + data[key])\n            .join(this._delimiter) + this._delimiter];\n    }\n\n    /**\n     * @hidden\n     */\n    deserialize(data: any): any {\n        const parsedData: {[key: string]: string} = {};\n\n        decodeURIComponent(escape(TypeHelper.Uint8ToString(new Uint8Array(data))))\n            .split(this._delimiter)\n            .filter((keyValue: string) => keyValue.length > 0)\n            .map((keyValue: string) => {\n                const keyValueTuple = keyValue.split('=');\n                const key = keyValueTuple[0];\n\n                // no '=' inside of the value\n                if (keyValueTuple.length === 2) {\n                    parsedData[key] = keyValueTuple[1];\n                }\n                else {\n                    parsedData[key] = keyValue.slice(key.length + 1);\n                }\n            });\n\n        return parsedData;\n    }\n\n    /**\n     * This method sets the delimiter value for the helper.\n     *\n     * ```javascript\n     * // set a custom delimiter\n     * amps.TypeHelper.helper('nvfix').delimiter('%01');\n     * ```\n     *\n     * @param delimiter The new delimiter value.\n     * @returns The helper object.\n     */\n    delimiter(delimiter: string): FixTypeHelper;\n\n    /**\n     * ------\n     * This method returns the delimiter value of the helper.\n     *\n     * ```javascript\n     * // get the current delimiter value\n     * var delimiter = amps.TypeHelper.helper('fix').delimiter();\n     * ```\n     *\n     * @returns The delimiter value.\n     */\n    delimiter(): string;\n    delimiter(delimiter?: string): FixTypeHelper | string {\n        if (typeof delimiter !== 'undefined') {\n            this._delimiter = delimiter;\n            return this;\n        }\n\n        return this._delimiter;\n    }\n}\n\n\n// Internal: type wrapper for type helper objects\ninterface TypeHelperInstance {\n    [key: string]: ITypeHelper;\n}\n\n\n/**\n * This is a helper class that is used to register custom message types in order for the client to support them.\n * By default, the [[Client]] supports the following message types:\n * * __JSON__\n * * __FIX__  / __NVFIX__ - via [[FixTypeHelper]] class.\n * * __Binary__\n * \n * __Composite__ message types can be created using [[TypeHelper.compositeHelper]] method.\n * \n * See [[TypeHelper.helper]] for examples on how to implement support for new types or custom type helpers for existing\n * message types.\n */\nexport class TypeHelper {\n    // Internal data\n    private static instance: TypeHelperInstance;\n\n    private static getInstance(): TypeHelperInstance {\n        if (!TypeHelper.instance) {\n            TypeHelper.instance = TypeHelper.createInstance();\n        }\n\n        return TypeHelper.instance;\n    }\n\n    private static createInstance(): TypeHelperInstance {\n        const jsonTypeHelper: ITypeHelper = {\n            serialize: (data) => {\n                if (typeof data === 'string') { return [data]; }\n                return [JSON.stringify(data)];\n            },\n            deserialize: (data: string | Uint8Array): any  => {\n                if (typeof data === 'string') {\n                    return JSON.parse(data);\n                } else {\n                    // Binary buffer, need to decode utf8\n                    return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(data)));\n                }\n            }\n        };\n\n        const binaryTypeHelper: ITypeHelper = {\n            serialize: (data) => { return [data]; },\n            deserialize: (data) => { return data; }\n        };\n\n        return {\n            'json': jsonTypeHelper,\n            'binary': binaryTypeHelper,\n            'fix': new FixTypeHelper(),\n            'nvfix': new FixTypeHelper()\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    static littleEndianSizeBuffer(size: number): Uint32Array {\n        const result = new Uint32Array(1);\n\n        result[0] = size;\n\n        return result;\n    }\n\n    /**\n     * @hidden\n     */\n    static bigEndianSizeBuffer(size: number): Uint32Array {\n        const result = new Uint32Array(1);\n\n        result[0] = ((size & 0x000000FF) << 24)\n            | ((size & 0x0000FF00) << 8)\n            | ((size & 0x00FF0000) >>> 8)\n            | ((size & 0xFF000000) >>> 24);\n\n        return result;\n    }\n\n    /**\n     * @hidden\n     */\n    static Uint8ToString(uint8Array: Uint8Array): string {\n        const CHUNK_SZ = 0x8000;\n\n        const chars: string[] = [];\n        for (let i = 0; i < uint8Array.length; i += CHUNK_SZ) {\n            chars.push(String.fromCharCode.apply(null, uint8Array.subarray(i, i + CHUNK_SZ)));\n        }\n\n        return chars.join('');\n    }\n\n    private static convertToArrayBuffers(data: any): any {\n        const result: any = [];\n\n        for (const item of data) {\n            if (item.constructor === String) {\n                // Need to convert to an ArrayBuffer\n                const encoded = unescape(encodeURIComponent(item));\n                const arrayified = new Uint8Array(encoded.length);\n\n                for (let i = 0; i < encoded.length; ++i) {\n                    arrayified[i] = encoded.charCodeAt(i);\n                }\n\n                result.push(arrayified);\n            }\n            else {\n                result.push(item);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * This method provides a helper for parsing messages of different types. If a helper was provided by a user,\n     * registers it for future use.\n     *\n     * #### Create a custom helper for XML messages:\n     * ```javascript\n     * var xmlTypeHelper = {\n     *     serialize: function(data) {\n     *         return [new XMLSerializer().serializeToString(data)];\n     *     },\n     *     deserialize: function(data) {\n     *         if (data.constructor === String) {\n     *             return new DOMParser().parseFromString(data);\n     *         } \n     *         else {\n     *             // Binary buffer, need to decode utf8\n     *             return new DOMParser().parseFromString(\n     *                 decodeURIComponent(escape(Uint8ToString(data)))\n     *             );\n     *         }\n     *     }\n     * };\n     *\n     * // Register the above XML custom helper for parsing all XML messages automatically\n     * amps.TypeHelper.helper('xml', xmlTypeHelper);\n     * ```\n     *\n     * #### In case the custom parsing behavior is expected, it is possible to override the default type helper:\n     * ```javascript\n     * // create a JSON type helper that does not parse JSON data into native JS objects keeping it as a string\n     * var jsonHelper = {\n     *     serialize: function(data) {\n     *         return [data];\n     *     },\n     *     deserialize: function(data) {\n     *         return JSON.stringify(data);\n     *     }\n     * };\n     *\n     * // override the default type helper\n     * amps.TypeHelper.helper('json', jsonHelper);\n     * ```\n     *\n     * #### Register the json-json-json-binary composite message type with the type helper:\n     * ```javascript\n     * amps.TypeHelper.helper(\n     *     'compositejjjbl',\n     *     amps.TypeHelper.compositeHelper('json', 'json', 'json', 'binary')\n     * );\n     * ```\n     *\n     * #### Set the custom delimiter for NVFIX format:\n     * ```javascript\n     * amps.TypeHelper.helper('nvfix').delimiter('%01');\n     * ```\n     *\n     * #### Register the custom helper for NVFIX format:\n     * ```javascript\n     * var nvfixTypeHelper = {\n     *     serialize: function(data) {\n     *         // already formatted fix/nvfix string\n     *         if (typeof data === 'string') {\n     *             return [data];\n     *         }\n     *\n     *         // otherwise, we assume it's an object with keys and values\n     *         return [\n     *             Object.keys(data).map(function(key) {\n     *                 return key + '=' + data[key];\n     *             }).join('\\x01') + '\\x01'\n     *         ];\n     *     },\n     *     deserialize: function(data) {\n     *         var parsedData = {};\n     *         String.fromCharCode.apply(null, new Int8Array(data))\n     *             .split('\\x01')\n     *             .slice(0, -1)\n     *             .map(function(keyValue) {\n     *                  var keyValueTuple = keyValue.split('=');\n     *                  var key = keyValueTuple[0];\n     *\n     *                  // no '=' inside of the value\n     *                  if (keyValueTuple.length === 2) {\n     *                      parsedData[key] = keyValueTuple[1];\n     *                  }\n     *                  else {\n     *                      parsedData[key] = keyValue.slice(key.length + 1);\n     *                  }\n     *             });\n     *\n     *         return parsedData;\n     *     }\n     * };\n     *\n     * // Register the above NVFIX custom helper for parsing all NVFIX messages automatically\n     * amps.TypeHelper.helper('nvfix', nvfixTypeHelper);\n     * ```\n     *\n     * @param {string} messageType The type of message to handle.\n     * @param {ITypeHelper} newHelper A helper object with predefined functions that can be provided for custom\n     * parsing/handling of a message type.\n     * @returns {ITypeHelper} The helper object assigned/registered.\n     */\n    public static helper(messageType: string, newHelper?: ITypeHelper): ITypeHelper {\n        const instance = TypeHelper.getInstance();\n\n        if (newHelper !== undefined) {\n            instance[messageType] = newHelper;\n            return newHelper;\n        }\n\n        if (instance[messageType] !== undefined) {\n            return instance[messageType];\n        }\n\n        return instance.binary;\n    }\n\n    /**\n     * This method is used to create composite message types from other types, such as JSON, XML, etc.\n     *\n     * ```javascript\n     * // Register the json-xml-json-binary composite message type with the type helper\n     * amps.TypeHelper.helper(\n     *     'compositejxjb',\n     *     amps.TypeHelper.compositeHelper('json', 'xml', 'json', 'binary')\n     * );\n     * ```\n     *\n     * @param {...string} messageType Previously registered types of messages.\n     * @returns {ITypeHelper} A created [[ITypeHelper]]-compatible object.\n     */\n    public static compositeHelper(...messageTypes: string[]): ITypeHelper {\n        // Generate all the type base helpers that are included in this composite helper\n        const helpers = messageTypes.map(item => TypeHelper.helper(item));\n\n        return {\n            // The list of types this composite helps with\n            helpers: helpers,\n            serialize: (data) => {\n                if (data.length > helpers.length) {\n                    throw 'too many elements to serialize';\n                }\n\n                let result: any = [];\n                for (let i = 0; i < data.length; ++i) {\n                    const part = TypeHelper.convertToArrayBuffers(helpers[i].serialize(data[i]));\n                    result = result.concat(TypeHelper.bigEndianSizeBuffer(part[0].length), part);\n                }\n\n                return result;\n            },\n            deserialize: (data) => {\n                const result = [];\n                let position = 0;\n                let index = 0;\n\n                while (data.byteLength - position > 0) {\n                    const sizeBuffer = new Uint8Array(data, position, 4);\n                    position += 4;\n\n                    const bytes = (sizeBuffer[0] << 24) |\n                        (sizeBuffer[1] << 16) |\n                        (sizeBuffer[2] << 8) |\n                        (sizeBuffer[3]);\n\n                    result.push(helpers[index].deserialize(new Uint8Array(data, position, bytes)));\n\n                    position += bytes;\n                    ++index;\n                }\n\n                return result;\n            }\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/type-helper.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\n'use strict';\n\nimport * as BigInteger from 'big-integer';\nimport { Client } from './client';\nimport { Header } from './header';\nimport { Command } from './command';\nimport { Message } from './message';\nimport { ServerChooser } from './server-chooser.interface';\nimport { DefaultServerChooser, ChooserItem } from './default-server-chooser';\nimport { SubscriptionManager } from './subscription-manager.interface';\nimport { DefaultSubscriptionManager } from './default-subscription-manager';\nimport { DelayStrategy } from './delay-strategy.interface';\nimport { ExponentialDelayStrategy, ExponentialDelayStrategyParams } from './exponential-delay-strategy';\nimport { FixedDelayStrategy, FixedDelayStrategyParams } from './fixed-delay-strategy';\nimport { BookmarkStore } from './bookmark-store.interface';\nimport { MemoryBookmarkStore } from './memory-bookmark-store';\nimport { PublishStore } from '././publish-store.interface';\nimport { MemoryPublishStore } from './memory-publish-store';\nimport { ITypeHelper, TypeHelper } from './type-helper';\nimport { Authenticator } from './authenticator.interface';\n\n\nexport {\n    // Main classes\n    Client,\n    Command,\n    Header,\n    Message,\n    TypeHelper,\n    ITypeHelper,\n    Authenticator,\n\n    // HAClient classes\n    BigInteger,\n    ServerChooser,\n    DefaultServerChooser,\n    SubscriptionManager,\n    DefaultSubscriptionManager,\n    DelayStrategy,\n    ExponentialDelayStrategy,\n    ExponentialDelayStrategyParams,\n    FixedDelayStrategy,\n    FixedDelayStrategyParams,\n    BookmarkStore,\n    MemoryBookmarkStore,\n    PublishStore,\n    MemoryPublishStore\n};\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/amps.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { Authenticator } from './authenticator.interface';\n\n\n/**\n * @hidden\n */\nexport class DefaultAuthenticator implements Authenticator {\n    authenticate(login: string, password: string): Promise<string> {\n        return new Promise(resolve => resolve(password));\n    }\n\n    retry(login: string, password: string): Promise<string> {\n        return new Promise(resolve => resolve(password));\n    }\n\n    completed(login: string, password: string, reason: string) {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/default-authenticator.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * @hidden\n */\nexport interface URIParserOtions {\n    source?: string;\n    protocol?: string;\n    authority?: string;\n    userInfo?: string;\n    user?: string;\n    password?: string;\n    host?: string;\n    port?: string;\n    relative?: string;\n    path?: string;\n    directory?: string;\n    file?: string;\n    query?: string;\n    queryKey?: {[key: string]: string};\n    anchor?: string;\n}\n\ninterface URIParser {\n    (uri: string): any;\n    options: any;\n}\n\n/* tslint:disable */\nvar parseUri = <URIParser>function(str) {\n    let o: any = this.parseUri.options,\n        m: any = o.parser[o.strictMode ? 'strict' : 'loose'].exec(str),\n        uri: any = {},\n        i: number = 14;\n\n    while (i--) {\n        uri[o.key[i]] = m[i] || '';\n    }\n\n    uri[o.q.name] = {};\n    uri[o.key[12]].replace(o.q.parser, ($0: any, $1: any, $2: any) => {\n        if ($1) {\n            uri[o.q.name][$1] = $2;\n        }\n    });\n\n    return uri;\n};\n/* tslint:enable */\n\n// parseUri 1.2.2 (c) Steven Levithan <stevenlevithan.com> MIT License\nparseUri.options = {\n    strictMode: false,\n    key: [\n        'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative',\n        'path', 'directory', 'file', 'query', 'anchor'\n    ],\n    q: {name: 'queryKey', parser: /(?:^|&)([^&=]*)=?([^&]*)/g},\n    parser: {\n        /* tslint:disable */\n        strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n        loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/\n        /* tslint:enable */\n    }\n};\n\n\n/**\n * @hidden\n */\nexport class Helpers {\n    static parseUri: (uri: string) => URIParserOtions = parseUri;\n}\n\n\n// Detecting the environment\n/* tslint:disable */\ndeclare var window: {\n    fin?: any;\n    process?: any;\n}\n/* tslint:enable */\n\nlet isBrowser = false;\n\n// Openfin check\nconst isFin = (typeof window !== 'undefined') && window.fin && window.fin.desktop; // jshint ignore:line\n\n// Node js check\nlet isNode = false;\ntry { isNode = Object.prototype.toString.call(global.process) === '[object process]'; } catch (e) {}\n\n// Electron check\n/* tslint:disable */\nlet isElectron = (typeof window !== 'undefined') && window.process && window.process.versions && window.process.versions.electron; // jshint ignore:line\n/* tslint:enable */\n\n// Worker environment\n/* tslint:disable */\nlet isWebWorker = !isNode && (typeof window === 'undefined') && (typeof module !== 'undefined') && (typeof module.exports !== 'undefined'); // jshint ignore:line\n/* tslint:enable */\n\n// else Browser environment\nisBrowser = !isFin && !isNode && !isElectron;\n\n\n/**\n * Browser environment detected.\n */\nexport const IS_BROWSER = isBrowser;\n\n/**\n * Node.js (and derivatives) environment detected.\n */\nexport const IS_NODE = isNode;\n\n/**\n * OpenFin environment detected.\n */\nexport const IS_OPENFIN = isFin;\n\n/**\n * Electron environment detected.\n */\nexport const IS_ELECTRON = isElectron;\n\n/**\n * WebWorker context detected.\n */\nexport const IS_WEBWORKER = isWebWorker;\n\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/helpers.ts","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/buildin/module.js\n// module id = 15\n// module chunks = 0 1"],"sourceRoot":""}