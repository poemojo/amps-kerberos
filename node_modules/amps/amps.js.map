{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap a14d4b6bf1cfe30b8eb4","webpack:///../~/big-integer/BigInteger.js","webpack:///../src/header.ts","webpack:///../src/client.ts","webpack:///../src/command.ts","webpack:///../src/default-server-chooser.ts","webpack:///../src/default-subscription-manager.ts","webpack:///../src/exponential-delay-strategy.ts","webpack:///../src/fixed-delay-strategy.ts","webpack:///../src/memory-bookmark-store.ts","webpack:///../src/memory-publish-store.ts","webpack:///../src/message.ts","webpack:///../src/type-helper.ts","webpack:///../src/amps.ts","webpack:///../src/default-authenticator.ts","webpack:///../src/helpers.ts","webpack:///../~/webpack/buildin/module.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA,8DAA8D;AAC9D;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,8DAA8D;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;;AAEA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;;AAEA;AACA,iDAAiD,cAAc,EAAE;AACjE;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,KAAK,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6DAA6D;AACpG;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACA;AACA;AACA;;;;;;;;;;AC1sCA,2EAA2E;AAC3E,EAAE;AACF,yEAAyE;AACzE,EAAE;AACF,qEAAqE;AACrE,uEAAuE;AACvE,wEAAwE;AACxE,wEAAwE;AACxE,oEAAoE;AACpE,0EAA0E;AAC1E,yEAAyE;AACzE,mDAAmD;AACnD,EAAE;AACF,sEAAsE;AACtE,sEAAsE;AACtE,sEAAsE;AACtE,sEAAsE;AACtE,mEAAmE;AACnE,sEAAsE;AACtE,sEAAsE;AACtE,uEAAuE;AACvE,wEAAwE;AACxE,EAAE;AACF,4EAA4E;;AAG5E;;;;GAIG;AACH;IAAA;IA+VA,CAAC;IAAD,aAAC;AAAD,CAAC;AA/VY,wBAAM;;;;;;;;AC/BnB,2EAA2E;AAC3E,EAAE;AACF,yEAAyE;AACzE,EAAE;AACF,qEAAqE;AACr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","file":"./../bundle/amps.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"amps\"] = factory();\n\telse\n\t\troot[\"amps\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a14d4b6bf1cfe30b8eb4","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        LOG_MAX_INT = Math.log(MAX_INT);\r\n\r\n    function Integer(v, radix) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 ? parseValue(v) : parseBase(v, radix);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a,b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n            if (isPrecise(a.value * this.value)) {\r\n                return new SmallInteger(a.value * this.value);\r\n            }\r\n            return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n            if (a.value === 0) return Integer[0];\r\n            if (a.value === 1) return this;\r\n            if (a.value === -1) return this.negate();\r\n            return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    function square(a) {\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < l; j++) {\r\n                a_j = a[j];\r\n                product = a_i * a_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n              quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        var value = n.value;\r\n        if (value === 0) return false;\r\n        if (value === 1) return true;\r\n        if (value === 2) return this.isEven();\r\n        return this.mod(n).equals(Integer[0]);\r\n    };\r\n    SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(25)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    BigInteger.prototype.isPrime = function () {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs(),\r\n            nPrev = n.prev();\r\n        var a = [2, 3, 5, 7, 11, 13, 17, 19],\r\n            b = nPrev,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2);\r\n        for (i = 0; i < a.length; i++) {\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.equals(Integer[1]) || x.equals(nPrev)) continue;\r\n            for (t = true, d = b; t && d.lesser(nPrev) ; d = d.multiply(2)) {\r\n                x = x.square().mod(n);\r\n                if (x.equals(nPrev)) t = false;\r\n            }\r\n            if (t) return false;\r\n        }\r\n        return true;\r\n    };\r\n    SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        // use the Fermat primality test\r\n        for (var i = 0; i < t; i++) {\r\n            var a = bigInt.randBetween(2, n.minus(2));\r\n            if (!a.modPow(n.prev(), n).isUnit()) return false; // definitely composite\r\n        }\r\n        return true; // large chance of being prime\r\n    };\r\n    SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.equals(bigInt.zero)) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.equals(1)) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n\r\n    var powersOfTwo = [1];\r\n    while (powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return ((typeof n === \"number\" || typeof n === \"string\") && +Math.abs(n) <= BASE) ||\r\n            (n instanceof BigInteger && n.value.length <= 1);\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (n) {\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (n) {\r\n        var remQuo;\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        n = +n;\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero()) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xBits = [], yBits = [];\r\n        var xStop = false, yStop = false;\r\n        while (!xStop || !yStop) {\r\n            if (xRem.isZero()) { // virtual sign extension for simulating two's complement\r\n                xStop = true;\r\n                xBits.push(xSign ? 1 : 0);\r\n            }\r\n            else if (xSign) xBits.push(xRem.isEven() ? 1 : 0); // two's complement for negative numbers\r\n            else xBits.push(xRem.isEven() ? 0 : 1);\r\n\r\n            if (yRem.isZero()) {\r\n                yStop = true;\r\n                yBits.push(ySign ? 1 : 0);\r\n            }\r\n            else if (ySign) yBits.push(yRem.isEven() ? 1 : 0);\r\n            else yBits.push(yRem.isEven() ? 0 : 1);\r\n\r\n            xRem = xRem.over(2);\r\n            yRem = yRem.over(2);\r\n        }\r\n        var result = [];\r\n        for (var i = 0; i < xBits.length; i++) result.push(fn(xBits[i], yBits[i]));\r\n        var sum = bigInt(result.pop()).negate().times(bigInt(2).pow(result.length));\r\n        while (result.length) {\r\n            sum = sum.add(bigInt(result.pop()).times(bigInt(2).pow(result.length)));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value, x = typeof v === \"number\" ? v | LOBMASK_I : v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = Math.min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low);\r\n        if (range.isSmall) return low.add(Math.round(Math.random() * range));\r\n        var length = range.value.length - 1;\r\n        var result = [], restricted = true;\r\n        for (var i = length; i >= 0; i--) {\r\n            var top = restricted ? range.value[i] : BASE;\r\n            var digit = truncate(Math.random() * top);\r\n            result.unshift(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        result = arrayToSmall(result);\r\n        return low.add(typeof result === \"number\" ? new SmallInteger(result) : new BigInteger(result, false));\r\n    }\r\n    var parseBase = function (text, base) {\r\n        var length = text.length;\r\n        if (2 <= base && base <= 36) {\r\n            if (length <= LOG_MAX_INT / Math.log(base)) {\r\n                return new SmallInteger(parseInt(text, base));\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var i;\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i].toLowerCase(),\r\n                charCode = c.charCodeAt(0);\r\n            if (48 <= charCode && charCode <= 57) digits.push(parseValue(c));\r\n            else if (97 <= charCode && charCode <= 122) digits.push(parseValue(c.charCodeAt(0) - 87));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\");\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit) {\r\n        var v = digit.value;\r\n        if (typeof v === \"number\") v = [v];\r\n        if (v.length === 1 && v[0] <= 35) {\r\n            return \"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(v[0]);\r\n        }\r\n        return \"<\" + v + \">\";\r\n    }\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return \"0\";\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return \"0\";\r\n            if (n.isNegative()) return new Array(1 - n).join(\"10\");\r\n            return \"1\" + new Array(+n).join(\"01\");\r\n        }\r\n        var minusSign = \"\";\r\n        if (n.isNegative() && base.isPositive()) {\r\n            minusSign = \"-\";\r\n            n = n.abs();\r\n        }\r\n        if (base.equals(1)) {\r\n            if (n.isZero()) return \"0\";\r\n            return minusSign + new Array(+n + 1).join(1);\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(stringify(digit));\r\n        }\r\n        out.push(stringify(left));\r\n        return minusSign + out.reverse().join(\"\");\r\n    }\r\n\r\n    BigInteger.prototype.toString = function (radix) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBase(this, radix);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n    SmallInteger.prototype.toString = function (radix) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBase(this, radix);\r\n        return String(this.value);\r\n    };\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return +this.toString();\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n\r\n    function parseStringValue(v) {\r\n            if (isPrecise(+v)) {\r\n                var x = +v;\r\n                if (x === truncate(x))\r\n                    return new SmallInteger(x);\r\n                throw \"Invalid integer: \" + v;\r\n            }\r\n            var sign = v[0] === \"-\";\r\n            if (sign) v = v.slice(1);\r\n            var split = v.split(/e/i);\r\n            if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n            if (split.length === 2) {\r\n                var exp = split[1];\r\n                if (exp[0] === \"+\") exp = exp.slice(1);\r\n                exp = +exp;\r\n                if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n                var text = split[0];\r\n                var decimalPlace = text.indexOf(\".\");\r\n                if (decimalPlace >= 0) {\r\n                    exp -= text.length - decimalPlace - 1;\r\n                    text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n                }\r\n                if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n                text += (new Array(exp + 1)).join(\"0\");\r\n                v = text;\r\n            }\r\n            var isValid = /^([0-9][0-9]*)$/.test(v);\r\n            if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n            var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n            while (max > 0) {\r\n                r.push(+v.slice(min, max));\r\n                min -= l;\r\n                if (min < 0) min = 0;\r\n                max -= l;\r\n            }\r\n            trim(r);\r\n            return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = new SmallInteger(i);\r\n        if (i > 0) Integer[-i] = new SmallInteger(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/big-integer/BigInteger.js\n// module id = 0\n// module chunks = 0 1","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * This is the underlying class for [[Message]] / [[Command]] headers. It represents raw parameter names as they are\n * sent to / received from the server.\n * @hidden\n */\nexport class Header {\n    /**\n     * @hidden\n     */\n    [key: string]: any;\n\n    /**\n     * Command to be executed. Can be one of:\n     *\n     * - publish\n     * - subscribe\n     * - subscribe\n     * - sow_and_subscribe\n     * - sow_delete\n     * - unsubscribe\n     * - flush\n     * - heartbeat\n     * - start_timer\n     * - stop_timer\n     * - logon\n     * \n     * @deprecated Use [[MessageHeader.command]] method instead.\n     */\n    c: string;\t                    // command\n\n    /**\n     * Acknowledgement type for the given command.\n     * \n     * @deprecated Use [[MessageHeader.ackType]] method instead.\n     */\n    a: string;\t                    // ackType\n\n    /**\n     * Password used to authenticate with an AMPS server.\n     * @hidden\n     */\n    pw: string;\t                // password\n\n    /**\n     * A client-originated identifier used to mark a location in journaled messages.\n     * \n     * @deprecated Use [[MessageHeader.bookmark]] method instead.\n     */\n    bm: string;\t                // bookmark\n\n    /**\n     * Specifies the number of messages that are batched together when returning a query result.\n     * \n     * @deprecated Use [[MessageHeader.batchSize]] method instead.\n     */\n    bs: number;\t                // batchSize\n\n    /**\n     * Used to identify a client. Useful for publishers that wish to identify the source of a publish, client status\n     * messages and for client heartbeats. Can be set with `logon` command.\n     * \n     * @deprecated Use [[MessageHeader.clientName]] method instead.\n     */\n    client_name: string;\t \t    // clientName\n\n    /**\n     * Client-specified command id. The command id is returned by the engine in responses to commands to allow the\n     * client to correlate the response to the command.\n     * \n     * @deprecated Use [[MessageHeader.commandId]] method instead.\n     */\n    cid: string;\t                // commandId\n\n    /**\n     * Opaque token set by an application and returned with the message. Must be `base64` encoded characters only.\n     * \n     * @deprecated Use [[MessageHeader.correlationId]] method instead.\n     */\n    x: string;\t                    // correlationId\n\n    /**\n     * If true, only send raw data to subscriber for a matching publish message, i.e. do not include FIX/NVFIX envelope.\n     * \n     * @hidden\n     */\n    data_only: boolean;\t \t    // dataOnly\n\n    /**\n     * SOW expiration time (in seconds) if used in publish.\n     * \n     * @deprecated Use [[MessageHeader.expiration]] method instead.\n     */\n    e: number;\t                    // expiration\n\n    /**\n     * Content filter expression.\n     * \n     * @deprecated Use [[MessageHeader.filter]] method instead.\n     */\n    filter: string;\t            // filter\n\n    /**\n     * Group Sequence Number returned with each batch message of a SOW response.\n     * \n     * @deprecated Use [[MessageHeader.groupSequenceNumber]] method instead.\n     */\n    gseq: number;\t \t            // groupSequenceNumber\n\n    /**\n     * Heartbeat command. Can be one of:\n     *\n     * - start\n     * - stop\n     * - beat\n     * \n     * @hidden\n     */\n    heartbeat: string;\t \t        // heartbeat\n\n    /**\n     * For messages from a queue, the time at which the lease expires.\n     * \n     * @deprecated Use [[MessageHeader.leasePeriod]] method instead.\n     */\n    lp: string;\t                // leasePeriod\n\n    /**\n     * Returned in the acknowledgement to a SOW query that indicates number of matches.\n     * \n     * @deprecated Use [[MessageHeader.matches]] method instead.\n     */\n    matches: number;\t \t        // matches\n\n    /**\n     * Sent with XML formatted message data to indicate the number of bytes used by the message body.\n     * \n     * @deprecated Use [[MessageHeader.messageLength]] method instead.\n     */\n    l: number;\t                    // messageLength\n\n    /**\n     * Specifies the maximum number of messages within a batch publish. Must be greater than zero.\n     * \n     * @hidden\n     */\n    max_msgs: number;\t \t        // maximumMessages\n\n    /**\n     * \tA comma-delimited list of options on a specific command. Also has an alias: `opts`.\n     * \n     * @deprecated Use [[MessageHeader.options]] method instead.\n     */\n    o: string;\t                    // options\n\n    /**\n     * The SOW topic key by which to order SOW query.\n     * \n     * @deprecated Use [[MessageHeader.orderBy]] method instead.\n     */\n    orderby: string;\t \t        // orderBy\n\n    /**\n     * SOW Query identifier set by client to identify a query.\n     * \n     * @deprecated Use [[MessageHeader.queryId]] method instead.\n     */\n    query_id: string;\t \t        // queryId\n\n    /**\n     * The failure message that appears when an acknowledgement returns a status of failure.\n     * \n     * @deprecated Use [[MessageHeader.reason]] method instead.\n     */\n    reason: string;\t \t        // reason\n\n    /**\n     * Used in conjunction with the stats acknowledgement, this is the number of records deleted from the SOW with a\n     * `sow_delete` command.\n     * \n     * @deprecated Use [[MessageHeader.recordsDeleted]] method instead.\n     */\n    records_deleted: number;\t \t// recordsDeleted\n\n    /**\n     * Used in conjunction with the stats acknowledgement, this is the number of records inserted into the SOW.\n     * \n     * @deprecated Use [[MessageHeader.recordsInserted]] method instead.\n     */\n    records_inserted: number;\t \t// recordsInserted\n\n    /**\n     * Returned in the acknowledgement to an SOW query that indicates number of records in the store.\n     * \n     * @deprecated Use [[MessageHeader.recordsReturned]] method instead.\n     */\n    records_returned: number;\t \t// recordsReturned\n\n    /**\n     * Used in conjunction with the stats acknowledgement, this is the number of records updated in the SOW.\n     * \n     * @deprecated Use [[MessageHeader.recordsUpdated]] method instead.\n     */\n    records_updated: number;\t \t// recordsUpdated\n\n    /**\n     * An integer that corresponds to the publish message sequence number. For more information see the *Replication*\n     * section in the *User Guide*. It is actually a big integer, but since it's received in the JSON header and is\n     * parsed before we can wrap it in the [[BigInteger]] object, it's treated as a string to prevent rounding issues\n     * with JavaScript.\n     * \n     * @deprecated Use [[MessageHeader.sequenceId]] method instead.\n     */\n    s: string;\t                    // sequenceId\n\n    /**\n     * If true, empty messages that are published will be forwarded to matching subscriptions.\n     * \n     * @hidden\n     */\n    send_empty: boolean;\t \t    // sendEmpty\n\n    /**\n     * Option to instruct AMPS that a client would like to receive the SowKey(s) back.\n     * \n     * @hidden\n     */\n    send_keys: boolean;\t \t    // sendKeys\n\n    /**\n     * If true, Out-of-Focus messages are sent for the SOW query.\n     * \n     * @hidden\n     */\n    send_oof: boolean;\t \t        // sendOOF\n\n    /**\n     * A SowKey will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in\n     * on a subscription when the published message matches a record in the SOW. A `publish` command may contain a SOW\n     * key if the SOW for the topic is configured to accept user-provided SOW keys.\n     *\n     * Format:\n     *\n     * - string containing the digits of an unsigned long for AMPS-generated SOW keys\n     *\n     * OR\n     *\n     * - arbitrary string in the base64 character set for user-provided SOW keys.\n     * \n     * @deprecated Use [[MessageHeader.sowKey]] method instead.\n     */\n    k: string;\t                    // sowKey\n\n    /**\n     * Comma-separated list of SowKey values.\n     * \n     * @deprecated Use [[MessageHeader.sowKeys]] method instead.\n     */\n    sow_keys: string;\t \t        // sowKeys\n\n    /**\n     * Used to indicate client status when client is monitored for heartbeats. Can be one of:\n     *\n     * - stopped\n     * - alive\n     * - timed out\n     * - error\n     * \n     * @deprecated Use [[MessageHeader.status]] method instead.\n     */\n    status: string;\t \t        // status\n\n    /**\n     * The subscription identifier set by server when processing a subscription.\n     * \n     * @deprecated Use [[MessageHeader.subId]] method instead.\n     */\n    sub_id: string;\t \t        // subscriptionId\n\n    /**\n     * Comma-separated list of SubIds sent from AMPS engine to identify which client subscriptions match a given\n     * `publish` message.\n     * \n     * @deprecated Use [[MessageHeader.subIds]] method instead.\n     */\n    sids: string;\t \t            // subscriptionIds\n\n    /**\n     * Used in conjunction with the heartbeat interval to set the timeout interval for a publisher.\n     * \n     * @hidden\n     */\n    timeout_interval: number;\t \t// timeoutInterval\n\n    /**\n     * Message timestamp set by the server in a ISO-8601 date-time format.\n     * \n     * @deprecated Use [[MessageHeader.timestamp]] method instead.\n     */\n    ts: string;\t                // timestamp\n\n    /**\n     * The number of records to return. Note: If TopN is not equally divisible by the batch size, then more records will\n     * be returned so that the total number of records is equally divisible by the batch size setting.\n     * \n     * @deprecated Use [[MessageHeader.topN]] method instead.\n     */\n    top_n: number;\t \t            // topN\n\n    /**\n     * Returned in the acknowledgement to an SOW query that indicates number of topic matches.\n     * \n     * @deprecated Use [[MessageHeader.topicMatches]] method instead.\n     */\n    topic_matches: number;\t \t    // topicMatches\n\n    /**\n     * Transmission timestamp set by client in the ISO-8601 date-time format.\n     * \n     * @hidden\n     */\n    transmission_time: string;     // transmissionTime\n\n    /**\n     * If false, subscription identifiers will not be sent for a matched message.\n     * \n     * @hidden\n     */\n    send_subscription_ids: boolean; // sendSubscriptionIds\n\n    /**\n     * The Topic value.\n     * \n     * @deprecated Use [[MessageHeader.topic]] method instead.\n     */\n    t: string;\t                    // topic\n\n    /**\n     * Use SOAP XML namespaces in all messages from the AMPS engine.\n     * \n     * @hidden\n     */\n    use_ns: boolean;\t \t        // useNamespaces\n\n    /**\n     * Used to identify the user id of a command.\n     * \n     * @deprecated Use [[MessageHeader.userId]] method instead.\n     */\n    user_id: string;\t \t        // userId\n\n    /**\n     * contains the version of the AMPS server.\n     * \n     * @deprecated Use [[MessageHeader.version]] method instead.\n     */\n    version: string;\t            // version\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/header.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\n'use strict';\n\nimport * as BigInteger from 'big-integer';\nimport { Helpers, IS_NODE, IS_ELECTRON, IS_BROWSER } from './helpers';\nimport { Header } from './header';\nimport { Command, CommandParams } from './command';\nimport { Message } from './message';\nimport { ITypeHelper, TypeHelper } from './type-helper';\nimport { ServerChooser } from './server-chooser.interface';\nimport { DelayStrategy } from './delay-strategy.interface';\nimport { BookmarkStore } from './bookmark-store.interface';\nimport { PublishStore } from './publish-store.interface';\nimport { MemoryPublishStore } from './memory-publish-store';\nimport { MemoryBookmarkStore } from './memory-bookmark-store';\nimport { SubscriptionManager } from './subscription-manager.interface';\nimport { DefaultSubscriptionManager } from './default-subscription-manager';\nimport { Authenticator } from './authenticator.interface';\nimport { DefaultAuthenticator } from './default-authenticator';\nimport { DefaultServerChooser } from './default-server-chooser';\nimport { ExponentialDelayStrategy } from './exponential-delay-strategy';\nimport { FixedDelayStrategy } from './fixed-delay-strategy';\n\n\n// Conditional imports: Node.js-like environment requires WebSocket and (optionally) Promise\nconst W3WebSocket = (IS_NODE || IS_ELECTRON) ? (eval('require')('websocket')).w3cwebsocket : WebSocket;\nif (IS_BROWSER && (typeof Promise === 'undefined')) {\n    throw new Error('Promise support is required. Please include es6-promise library');\n}\n\n\nexport class Client {\n    // static data\n    private static seqRegex: RegExp = /\"s\":(\\d+),/;\n    private static maxBacklogRegex: RegExp = /max_backlog=(\\d+)/;\n\n    public static readonly Bookmarks: {[key: string]: string} = {\n        MOST_RECENT: 'recent',\n        EPOCH: '0',\n        NOW: '0|1|'\n    };\n\n    public static readonly ConnectionStateListener: {[key: string]: number} = {\n        Disconnected: 0,\n        Shutdown: 1,\n        Connected: 2,\n        LoggedOn: 4,\n        PublishReplayed: 8,\n        HeartbeatInitiated: 16,\n        Resubscribed: 32,\n        UNKNOWN: 16834\n    };\n\n    // Private data\n    private _name: string = null;\n    private username: string;\n    private password: string;\n    private _logonOptions: string;\n    private _logonCorrelationId: string = null;\n    private sequenceId: BigInteger;\n    private _serverVersion: string = null;\n    private _serverIntVersion: number = 0;\n    private _nextSubId: number = 1;\n    private subscriptions: any = {};\n    private connection: WebSocket = null;\n    private _isConnected: boolean = false;\n    private typeHelper: ITypeHelper = null;\n    private _disconnectHandler: (client: Client, error: Error) => void = null;\n    private _transportFilter: (data: any, outgoing?: boolean) => void = null;\n    private _stateListenerId: number = 1;\n    private _connectionStateListeners: {[key: number]: (connectionState: number) => void} = {};\n    private _serverChooser: ServerChooser = null;\n    private _delayStrategy: DelayStrategy = null;\n    private _publishStore: PublishStore = null;\n    private _bookmarkStore: BookmarkStore = null;\n    private _subscriptionManager: SubscriptionManager = null;\n    private timeouts: {[key: string]: any} = {};\n    private _autoAck: boolean = false;\n\n    private _ackBatch: {\n        toAck: {[key: string]: string[]},  // { 'topic1': ['bm1', 'bm2', ...], ... }\n        ackBatchSize: number,\n        ackTimeout?: number,\n        ackTimeoutTimerId?: any\n    } = {toAck: {}, ackTimeout: undefined, ackBatchSize: 0};\n\n    private _heartbeat: {\n        interval?: number;\n        timeout?: number;\n        timeoutId?: any;\n        timestamp?: Date;\n        onHeartbeatAbsence?(): void;\n    } = null;\n\n    private messageState: {\n        inGroup: boolean;\n        currentSow: any;\n        mergedHeader: boolean;\n        recordsRemaining: number;\n        publishHeader?: Message;\n    } = {inGroup: false, currentSow: null, mergedHeader: false, recordsRemaining: 0, publishHeader: null};\n\n    // Assigning the default error handler\n    private _errorHandler: (error: Error) => void = (error: Error) => {\n        const prefix = new Date().toISOString() + ' [' + (this._name ? 'client: ' + this._name : 'ERROR') + '] >>>';\n        if (error.name && error.message) { console.error(prefix, error.name + ':', error.message); }\n        else { console.error(prefix, error); }\n    };\n\n    /**\n     * @param {string} name Unique name for the client (important for queues and sow). It is strongly recommended to\n     * set a client name, but if it's not set, it'll be assigned automatically.\n     */\n    constructor(name?: string) {\n        this._name = name ? name : 'AMPS-JavaScript-' + new Date().getTime();\n    }\n\n    /**\n     * This is a convenience static method that creates a memory-backed client that tracks\n     * bookmarks and subscriptions in memory. Subscriptions are automatically restored after a reconnection using\n     * [[DefaultSubscriptionManager]] object. [[MemoryBookmarkStore]] is enabled for bookmarks, [[MemoryPublishStore]]\n     * is enabled for publishing messages.\n     *\n     * @param {string} name Unique name for the client (important for queues and sow). It is strongly recommended to\n     * set a client name, but if it's not set, it'll be assigned automatically.\n     * @returns {Client} a highly available [[Client]] instance.\n     */\n    public static createMemoryBacked(name?: string): Client {\n        return new Client(name)\n            .subscriptionManager(new DefaultSubscriptionManager())\n            .bookmarkStore(new MemoryBookmarkStore())\n            .publishStore(new MemoryPublishStore());\n    }\n\n    /**\n     * This is a private internal method that parses a string with acks (ex: 'processed,completed') into a list of\n     * predefined ackTypes. Clears bad types, duplicates, etc. Returns an empty list if the ack string is empty, null,\n     * or does not contain any valuable information.\n     * @param {string} ackString the string to parse.\n     * @private\n     * @hidden\n     */\n    private static parseAcks(ackString: string): string[] {\n        if (typeof ackString !== 'string') { return []; }\n\n        // non-string, null, undefined, etc.\n        const acksInfo: {[key: string]: boolean} = {\n            received: false,\n            processed: false,\n            completed: false,\n            persisted: false,\n            stats: false\n        };\n\n        ackString.split(',').map(ack => { if (acksInfo[ack] !== undefined) { acksInfo[ack] = true; } });\n        return Object.keys(acksInfo).filter(ack => acksInfo[ack]);\n    }\n\n    /**\n     * This is a private internal method that sends a batch ack message.\n     * @param {string} topic The topic value.\n     * @returns 0 if no actual ack command were sent, 1 otherwise.\n     * @private\n     * @hidden\n     */\n    private _ack = (topic: string): number => {\n        const bookmarks = this._ackBatch.toAck[topic];\n\n        if (bookmarks !== undefined && bookmarks.length > 0) {\n            this.execute(new Command('sow_delete').topic(topic).bookmark(bookmarks.join(',')));\n            this._ackBatch.toAck[topic] = [];\n\n            return 1;\n        }\n\n        return 0;\n    }\n\n    /**\n     * This is a private internal method that is invoked upon ackTimeout timer event.\n     * @private\n     * @hidden\n     */\n    private _onAckTimer = (): void => {\n        // if auto ack is off, short circuit\n        if (!this._autoAck || !this._isConnected) { return; }\n\n        // Acknowledge messages\n        Object.keys(this._ackBatch.toAck).map(topic => this._ack(topic));\n\n        // reset the timer (if it's non-zero)\n        if (this._ackBatch.ackTimeout) {\n            this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), this._ackBatch.ackTimeout);\n        }\n    }\n\n    /**\n     * This is a helper method that creates a command handler for the client.\n     * @param {function} messageHandler A callback for a message/requested ack message\n     * @param {function} resolve a callback for execution report (success)\n     * @param {function} reject a callback for execution report (failure)\n     * @param {string} acks command-required ackType(s).\n     * @param {string} userAcks ackTypes requested by a user.\n     * @param {string} commandName the name of the command.\n     * @param {string} subscriptionId the id of the subscription (can be either a command id or a subscription id).\n     * @private\n     * @hidden\n     */\n    private makeCommandHandler = (\n        messageHandler: (message: Message) => void,\n        resolve: (result: any) => void,\n        reject: (error?: Error | any) => void,\n        systemAcks: string,\n        userAcks: string,\n        commandName: string,\n        subscriptionId: string\n    ): void  => {\n        if (commandName === 'logon') {\n            this.subscriptions[subscriptionId] = (message: Message) => {\n                if (message.c === 'ack') {\n                    if (message.a === 'processed') {\n                        // Detect error/success\n                        const response = {commandId: subscriptionId, message: message};\n\n                        if (message.status === 'failure') {\n                            reject(response);\n                        }\n                        else {\n                            resolve(response);\n                            delete this.subscriptions[subscriptionId];\n                        }\n                    }\n                }\n            };\n\n            return;\n        }\n\n        // Parse the acks into lists of unique values\n        const parsedUserAcks = Client.parseAcks(userAcks);\n        const parsedSystemAcks = Client.parseAcks(systemAcks);\n\n        let resolveCalled = false;\n\n        // If the command is a subscribe type\n        const isSubscribe = [\n            'subscribe', 'sow_and_subscribe', 'delta_subscribe', 'sow_and_delta_subscribe'\n        ].indexOf(commandName) >= 0;\n\n        // non-logon command\n        this.subscriptions[subscriptionId] = (message: Message) => {\n            // cancel the timeout (if any)\n            clearTimeout(this.timeouts[message.cid]);\n            delete this.timeouts[message.cid];\n\n            // Detect an Ack message\n            if (message.c === 'ack') {\n                if (message.a === 'processed') {\n                    // Detect failure/retry/success\n                    if (message.status === 'failure') {\n                        if (reject) { reject(new Error(message.reason)); }\n                    }\n                    // retry case - perhaps need to update the token\n                    else if (message.status === 'retry') {\n                        this.connection.close(4000, 'Authentication token/password must be updated/renewed');\n                        return;\n                    }\n                    else {\n                        if (message.opts !== undefined) {\n                            // try to find max_backlog option, and if found, adjust the batchSize accordingly\n                            const maxBacklogValue = Client.maxBacklogRegex.exec(message.opts)[1];\n\n                            // if we have a max backlog value, we ignore still in favor of timeout (if set)\n                            if (maxBacklogValue !== undefined && !this._ackBatch.ackTimeout) {\n                                if (this._ackBatch.ackBatchSize > +maxBacklogValue) {\n                                    this._ackBatch.ackBatchSize = +maxBacklogValue;\n                                }\n                            }\n                        }\n\n                        if (resolve) { resolve(subscriptionId); }\n                    }\n                }\n\n                const userAckIndex = parsedUserAcks.indexOf(message.a);\n                const ackIndex = parsedSystemAcks.indexOf(message.a);\n\n                // Detect if the message should be reported to the message handler\n                if (userAckIndex >= 0 && messageHandler) {\n                    // Deliver the message\n                    message = Message.fromObject(message);\n                    messageHandler(message);\n                }\n\n                // Delete acks from the delivery lists\n                if (ackIndex >= 0) {\n                    parsedSystemAcks.splice(ackIndex, 1);\n                }\n                if (userAckIndex >= 0) {\n                    parsedUserAcks.splice(userAckIndex, 1);\n                }\n\n                // Delete the handler after getting all the acknowledgment messages in order to not overflow the heap\n                if (parsedUserAcks.length === 0 && parsedSystemAcks.length === 0) {\n                    if (!isSubscribe) {\n                        delete this.subscriptions[subscriptionId];\n                    }\n                }\n            }\n            // Timeout error\n            else if (message.c === 'timeout') {\n                reject({commandId: subscriptionId, message: message});\n            }\n            else if (messageHandler) {\n                // assign a header wrapper\n                message = Message.fromObject(message);\n\n                // a message for a bookmark subscription\n                // detect queue messages\n                const isQueue = message.lp !== undefined;\n\n                if (message.bm && this._bookmarkStore && !isQueue) {\n                    if (!this._bookmarkStore.isDiscarded(message)) {\n                        // log the bookmark\n                        this._bookmarkStore.log(message);\n                        messageHandler(message);\n                    }\n                }\n                // if this is a queue and auto-ack is enabled\n                else if (isQueue && this._autoAck) {\n                    // if the message handler does not throw an exception, ack the message\n                    try {\n                        messageHandler(message);\n                        this.ack(message);\n                    }\n                    catch (err) { this.onError(err); }\n                }\n                else {\n                    // simply deliver the message\n                    messageHandler(message);\n                }\n\n                // if no acks were expected and the first message is an actual message, resolve the command\n                if (resolve && !resolveCalled) {\n                    resolve(subscriptionId);\n                    resolveCalled = true;\n                }\n            }\n        };\n    }\n\n    /**\n     * This internal method invokes the corresponding callback handler (if any), based on id.\n     * @param {string} id the id of the message to handle.\n     * @param {any} message message to handle.\n     * @private\n     * @hidden\n     */\n    private invokeHandler = (id: string, message: any): void => {\n        const handler = this.subscriptions[id];\n\n        // process persisted ack first\n        if (message.c === 'ack' && message.a === 'persisted') {\n            this.persistedAckReceived(message);\n        }\n\n        // deliver the message\n        if (handler) {\n            try {\n                handler(message);\n            }\n            catch (e) {\n                if (this._errorHandler) {\n                    this._errorHandler(e);\n                }\n            }\n        }\n    }\n\n    /**\n     * This internal method reacts to a peristed ack message received in order to update publish and bookmark stores.\n     *\n     * @param {Message} message The persisted ack message.\n     * @private\n     * @hidden\n     */\n    private persistedAckReceived = (message: Message): void => {\n        const sequenceId = BigInteger(message.s);\n\n        // publish store\n        if (this._publishStore && message.s !== undefined) {\n            if (message.status === 'success') {\n                // there is persisted record update for this client, let's discard persisted messages\n                this._publishStore.discardUpTo(sequenceId);\n\n                const lastPersisted = this._publishStore.lastPersisted();\n                if (lastPersisted !== null && this.sequenceId.compare(lastPersisted) <= 0) {\n                    this.sequenceId = lastPersisted;\n                }\n            }\n            // Failure occured, let's replay this single message\n            else {\n                if (sequenceId.compare(0) > 0) {\n                    try {\n                        this._publishStore.replaySingle(this.send, sequenceId);\n                    }\n                    catch (err) {\n                        console.error('Replay error: ', err);\n                    }\n                }\n            }\n        }\n\n        // bookmark store\n        const isQueue = message.lp !== undefined;\n        if (this._bookmarkStore && message.sub_id !== undefined && message.bm !== undefined && !isQueue) {\n            if (message.status === 'success' && this.subscriptions[message.sub_id] !== undefined) {\n                if (message.bm.length > 1) {\n                    // report that all other messages have been persisted\n                    this._bookmarkStore.persisted(message.sub_id, message.bm);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * This internal method is called upon receiving a heartbeat message from the server. It verifies if it's time to\n     * send a heartbeat message by verifiying that the timedelta between current time and last timestamp is > pulse\n     * interval. If the method is forced to do so, the timestamp value is ignored.\n     *\n     * @param {boolean} force If the heartbeat message MUST be sent.\n     * @private\n     * @hidden\n     */\n    private checkAndSendHeartbeat = (force: boolean): void => {\n        if (!this._heartbeat || (this._heartbeat && !this._heartbeat.timestamp)) { return; }\n\n        // timer expired, let's send the HB message (or maybe we just do it)\n        if (force || (new Date().getTime() - this._heartbeat.timestamp.getTime()) > this._heartbeat.interval * 1000) {\n            // assign the new timestamp\n            this._heartbeat.timestamp = new Date();\n\n            // reset the heartbeat timeout timer\n            clearTimeout(this._heartbeat.timeoutId);\n            this._heartbeat.timeoutId = setTimeout(\n                this._heartbeat.onHeartbeatAbsence.bind(this),\n                this._heartbeat.timeout * 1000\n            );\n\n            // Do the beat\n            this.execute(new Command('heartbeat').options('beat'));\n        }\n    }\n\n\n    /**\n     * This internal method is being invoked by the WebSocket connection's onmessage event handler.\n     *\n     * State Machine:\n     *    SOW command\n     *    |- 'ack' failure\n     *    |     |- done\n     *    |- 'ack' success\n     *    |- 'group_begin'\n     *    |- 0 or more of 'sow' batch  (bs contains number of records following)\n     *    |     |- record header\n     *    |     |- record data\n     *    |- 'group_end'\n     *    |- done\n     *\n     * @param event message event from the WebSocket connection.\n     * @private\n     * @hidden\n     */\n    private onMessage = (event: MessageEvent): void => {\n        const state = this.messageState;\n\n        try {\n            let message: any;\n\n            if (!state.recordsRemaining) {\n                // Message body\n                if (state.publishHeader) {\n                    // This event contains data for our last publish.\n                    try {\n                        state.publishHeader.data = this.typeHelper.deserialize(event.data);\n                    }\n                    catch (err) {\n                        // if there was a parsing error, we still need to expect new message after, thus the header = 0\n                        state.publishHeader = null;\n                        throw err;\n                    }\n\n                    const subIds = state.publishHeader.sids.split(',');\n                    for (const subId of subIds) {\n                        this.invokeHandler(subId, state.publishHeader);\n                    }\n\n                    state.publishHeader = null;\n                    return;\n                }\n\n                // Otherwise, this is the message header.\n                message = JSON.parse(event.data);\n                if (message.s !== undefined) {\n                    message.s = Client.seqRegex.exec(event.data)[1];\n                }\n\n                switch (message.c) {\n                    case 'p': case 'publish': case 'oof':\n                        state.publishHeader = message;\n                        this.invokeHandler(message.query_id ? message.query_id : message.cid, message);\n                        break;\n                    case 'sow':\n                        state.currentSow = message;\n                        state.mergedHeader = false;\n                        state.recordsRemaining = message.bs; // batch size\n                        break;\n                    case 'group_begin':\n                        state.inGroup = true;\n                        this.invokeHandler(message.query_id, message);\n                        break;\n                    case 'group_end':\n                        state.inGroup = false;\n                        this.invokeHandler(message.query_id, message);\n                        break;\n                    case 'ack':\n                        this.invokeHandler(message.query_id ? message.query_id : message.cid, message);\n                        break;\n                    case 'heartbeat':\n                        if (this._heartbeat && this._heartbeat.timestamp) {\n                            const timedelta = new Date().getTime() - this._heartbeat.timestamp.getTime();\n                            // if the interval is > than the timeout, let's send HB immediately\n                            if (this._heartbeat && timedelta > this._heartbeat.interval * 1000) {\n                                this.checkAndSendHeartbeat(true);\n                            }\n                        }\n                        return;\n                }\n\n                // just sync heartbeat info (if needed)\n                if (this._heartbeat) {\n                    this.checkAndSendHeartbeat(false);\n                }\n            }\n            else {\n                // SOW Batch Processing Logic - Message header\n                if (!state.mergedHeader) {\n                    message = JSON.parse(event.data);\n                    state.currentSow.k = message.k;\n                    state.currentSow.x = message.x;\n                    state.currentSow.ts = message.ts;\n                    state.mergedHeader = true;\n                }\n                // SOW Batch - Message body\n                else {\n                    // Adjust these before a possible parsing failure\n                    state.mergedHeader = false;\n                    --(state.recordsRemaining);\n\n                    // this can fail, but we're good since we adjusted state machine\n                    state.currentSow.data = this.typeHelper.deserialize(event.data);\n\n                    this.invokeHandler(state.currentSow.query_id, state.currentSow);\n                }\n            }\n        }\n        catch (e) {\n            this.onError({\n                name: '997',\n                message: 'Error ' + e.message + ' encountered while processing message (' + event.data + ') from AMPS',\n                stack: null\n            });\n        }\n    }\n\n    /**\n     * This method returns the server version returned by the AMPS server in the logon acknowledgement.\n     * If logon has not been performed yet, returns null.\n     * @returns The version of the AMPS server.\n     */\n    serverVersion(): string {\n        return this._serverVersion;\n    }\n\n    /**\n     * This method returns the server version returned by the AMPS server in the logon acknowledgement in a form\n     * of an integer XXYYZZWWW. For example, for 5.2.1.22 will be represented as `050201022`.\n     * If logon has not been performed yet, returns 0.\n     * @returns The version of the AMPS server.\n     */\n    serverVersionAsInt(): number {\n        return this._serverIntVersion;\n    }\n\n    /**\n     * This method is a setter/getter for the client's name.\n     * If logon has not been performed yet and the name was not set, returns null.\n     * @param {string} name The name of the AMPS client instance.\n     * @returns The client object if the setter is called. The name of the AMPS\n     * client instance (if any) otherwise.\n     */\n    name(name?: string): Client | string {\n        if (name && name.length > 0) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the client name when connected');\n            }\n\n            this._name = name;\n            return this;\n        }\n\n        return this._name;\n    }\n\n    /**\n     * This static method returns a version of the AMPS client.\n     * @returns The version of this AMPS client.\n     */\n    static version() {\n        return '5.3.0.0.333340.b0dae99';\n    }\n\n    /**\n     * This is the private method that sends commands to an AMPS server. It's allowed to use it outside for\n     * specific purposes such as custom subscription manager implementations. Please reach our specialists if\n     * you're implementing something like that.\n     *\n     * @param {Header} header The header object to send.\n     * @param {any} data The data to send.\n     * @param {number} timeout The timeout in milliseconds to send the message and get a response.\n     * @private\n     * @hidden\n     */\n    send(header: Header, data?: any, timeout?: number): void {\n        if (!this.connection) { throw new Error('Must connect before sending data'); }\n\n        // short circuit - cannot send non-logon commands before connect and logon\n        if (!this._isConnected && header.c !== 'logon') { return; }\n\n        // set the command timeout, if any\n        if (timeout !== undefined && timeout > 0) {\n            this.timeouts[header.cid] = setTimeout(() => this.onTimeout(header.cid), timeout);\n        }\n\n        // serialize the header\n        const serializedHeader: string = JSON.stringify(header);\n        let sizeBuffer;\n\n        // a command without data\n        if (!data) {\n            sizeBuffer = TypeHelper.littleEndianSizeBuffer(1);\n\n            // pass the size to the transport filter, if provided\n            if (this._transportFilter) { this._transportFilter(sizeBuffer, true); }\n            this.connection.send(sizeBuffer);\n\n            // pass data to the transport filter, if provided\n            if (this._transportFilter) { this._transportFilter(serializedHeader, true); }\n            this.connection.send(serializedHeader);\n        }\n        // command with data, probably publish\n        else {\n            // serialize data\n            data = this.typeHelper.serialize(data);\n            sizeBuffer = TypeHelper.littleEndianSizeBuffer(data.length + 1);\n\n            // pass the size to the transport filter, if provided\n            if (this._transportFilter) { this._transportFilter(sizeBuffer, true); }\n            this.connection.send(sizeBuffer);\n\n            // pass data to the transport filter, if provided\n            if (this._transportFilter) { this._transportFilter(serializedHeader, true); }\n            this.connection.send(serializedHeader);\n\n            for (const item of data) {\n                // pass data to the transport filter, if provided\n                if (this._transportFilter) { this._transportFilter(item, true); }\n                this.connection.send(item);\n            }\n        }\n    }\n\n    /**\n     * This is the private event that handles the execution of a command that has been timed out.\n     * @param {string} commandId the id of a command to time out.\n     * @private\n     * @hidden\n     */\n    private onTimeout(commandId: string): void {\n        this.invokeHandler(commandId, {c: 'timeout', reason: 'The command has been timed out.'});\n        delete this.subscriptions[commandId];\n    }\n\n    /**\n     * This is a general method that is executed if an error occured. It reports the error to the client's\n     * connect() execution handler.\n     * @param {Error} err the error to report.\n     * @private\n     * @hidden\n     */\n    private onError(err: Error): void {\n        // Report the general error to the error handler (if any)\n        if (this._errorHandler) {\n            this._errorHandler(err);\n        }\n    }\n\n    /**\n     * This is a method that is only used with external modules like SubscribeManager. Reports the connection\n     * status of the client.\n     *\n     * @returns The connection status.\n     * @hidden\n     */\n    isConnected(): boolean {\n        return this._isConnected;\n    }\n\n    /**\n     * This is a method that is only used with external modules like SubscribeManager. Provides next available id\n     * for a command/message.\n     *\n     * @returns The sub/command id.\n     * @hidden\n     */\n    nextSubId(): string {\n        return (this._nextSubId++).toString();\n    }\n\n    /**\n     * This method replaces a message handler for a subscription. It is only used by a SubscribeManager object.\n     * It is not intended to be used otherwise.\n     *\n     * @param {string} subId The subscription id.\n     * @param {function} messageHandler The message handler function.\n     * @hidden\n     */\n    setMessageHandler(subId: string, messageHandler: (message: Message) => void): void {\n        if (this.subscriptions) {\n            this.subscriptions[subId] = messageHandler;\n        }\n    }\n\n    /**\n     * This is the command execution interface method that allows to send commands that don't have a convenience\n     * method or require\n     * additional settings that are not provided by the convenience methods.\n     * The purpose of the method is to execute Command objects.\n     *\n     * ```javascript\n     * var subscribeCommand = new amps.Command('subscribe')\n     *   .topic('messages')\n     *   .filter('/id > 20');\n     *\n     * client.execute(subscribeCommand, function(message) {\n     *     console.log('message: ', message.data);\n     * }).then(function(commandId) {\n     *     console.log('commandId: ', commandId);\n     * });\n     * ```\n     * @param {Command} command a Command object.\n     * @param {function} handler a callback to report the messages (including ack messages if they were requested).\n     * @param {number} timeout a timeout value for the command execution in milliseconds.\n     * @returns The promise object fullfilled with the command id created.\n     */\n    execute(command: Command, handler?: (message: Message) => void, timeout?: number): Promise<string> {\n        return new Promise((resolve: (commandId: string) => void, reject: (error: Error) => void) => {\n            // set the command id and the initial (empty) ack type\n            command.commandId(this.nextSubId());\n            let systemAckType = '';\n            let notSow = false;\n            let isSubscribe = false;\n            let isPublish = false;\n\n            switch (command.command()) {\n                case 'subscribe':\n                case 'delta_subscribe':\n                    // bookmarked subscription\n                    if (command.bookmark()) {\n                        // bookmark store\n                        if (this._bookmarkStore) {\n                            // request persisted ack\n                            systemAckType = 'persisted,';\n                            const bookmark = command.bookmark();\n                            const bmSubId = command.subId() ? command.subId() : command.commandId();\n\n                            if (bookmark === Client.Bookmarks.MOST_RECENT) {\n                                command.bookmark(this._bookmarkStore.mostRecent(bmSubId));\n                            }\n                            else if (bookmark !== Client.Bookmarks.NOW && bookmark !== Client.Bookmarks.EPOCH) {\n                                const _message = command.toMessage();\n                                this._bookmarkStore.log(_message);\n                                this._bookmarkStore.discard(_message);\n                                this._bookmarkStore.persisted(bmSubId, _message.bm);\n                            }\n                        }\n                        else if (Client.Bookmarks.MOST_RECENT === command.bookmark()) {\n                            command.bookmark(Client.Bookmarks.EPOCH);\n                        }\n                    }\n\n                    // This is a non-sow command\n                    notSow = true;\n\n                    /* falls through */\n                case 'sow_and_subscribe':\n                case 'sow_and_delta_subscribe':\n                    if (!command.subId()) {\n                        command.subId(command.commandId());\n                    }\n\n                    isSubscribe = true;\n                    /* falls through */\n                case 'sow':\n                    if (!notSow && !command.queryId()) {\n                        command.queryId(command.subId() ? command.subId() : command.commandId());\n                    }\n\n                    systemAckType += 'processed';\n\n                    // for SOW only, we get a completed ack so we know when to remove the handler\n                    if (isSubscribe === false) {\n                        systemAckType += ',completed';\n                    }\n\n                    // if a custom batchSize value is not set, it is 10 by default for SOW queries\n                    if (!notSow && command.batchSize() === undefined) {\n                        command.batchSize(10);\n                    }\n\n                    // Assign the handler\n                    this.makeCommandHandler(\n                        handler,\n                        resolve,\n                        reject,\n                        systemAckType,\n                        command.ackType(),\n                        command.command(),\n                        isSubscribe ? (command.queryId() ? command.queryId() : command.subId()) : command.commandId()\n                    );\n\n                    break;\n                case 'unsubscribe':\n                    if (!command.subId()) {\n                        command.subId('all');\n                    }\n\n                    // delete all subscriptions\n                    if (command.subId() === 'all') {\n                        if (this._subscriptionManager) {\n                            this._subscriptionManager.clear();\n                        }\n\n                        this.subscriptions = {};\n                    }\n                    else {\n                        if (this._subscriptionManager) {\n                            this._subscriptionManager.unsubscribe(command.subId());\n                        }\n\n                        delete this.subscriptions[command.subId()];\n                    }\n                    /* falls through */\n                // The below commands can have ack messages received, even though it can only be in the message handler\n                case 'flush':\n                case 'heartbeat':\n                case 'stop_timer':\n                    systemAckType = 'processed';\n                    /* falls through */\n\n                    // Assign the handler\n                    this.makeCommandHandler(\n                        handler,\n                        resolve,\n                        reject,\n                        systemAckType,\n                        command.ackType(),\n                        command.command(),\n                        isSubscribe ? command.subId() : command.commandId()\n                    );\n                    break;\n                case 'sow_delete':\n                case 'delta_publish':\n                case 'publish':\n                    isPublish = true;\n\n                    // if we have a publish store, persist messages\n                    if (this._publishStore) {\n                        systemAckType = 'persisted';\n\n                        // Increment the sequence id for the next publish\n                        this.sequenceId = this.sequenceId.next();\n                        command.sequenceId(this.sequenceId);\n                    }\n                    else { systemAckType = ''; }\n\n                    // Assign the handler (fall through) but only if a user requested an acknowledgment\n                    if (command.ackType() !== undefined) {\n                        this.makeCommandHandler(\n                            handler,\n                            null,\n                            null,\n                            '', // never expect any acks for publish/delta publish in the command handler -\n                                // catch only user-requested acks in onMessage\n                            command.ackType(),\n                            command.command(),\n                            command.commandId()\n                        );\n                    }\n\n                    // Resolve right away\n                    resolve(command.commandId());\n                    break;\n                default: break;\n            }\n\n            // Add user-requested acks (those will be delivered in the message handler as well)\n            if (command.ackType() !== undefined) {\n                command.ackType(systemAckType + ',' + command.ackType());\n            }\n            else if (command.command() !== 'heartbeat') {\n                command.ackType(systemAckType);\n            }\n\n            // Add credentials in case of the logon command\n            if (command.command() === 'logon') {\n                command.ackType('processed');\n\n                if (this._logonCorrelationId) {\n                    command.correlationId(this._logonCorrelationId);\n                }\n\n                command.rawHeader().version = Client.version();\n\n                if (this._logonOptions) {\n                    command.options(this._logonOptions);\n                }\n\n                command.clientName(this._name);\n\n                if (this.username !== undefined) {\n                    command.rawHeader().user_id = this.username;\n\n                    if (this.password !== undefined && this.password.length) {\n                        command.rawHeader().pw = this.password;\n                    }\n                }\n\n                this.makeCommandHandler(\n                    handler,\n                    resolve,\n                    reject,\n                    command.ackType(),\n                    '',\n                    command.command(),\n                    command.commandId()\n                );\n            }\n\n            // store the subscription if we have a subscription manager set\n            if (isSubscribe && this._subscriptionManager) {\n                this._subscriptionManager.subscribe(command.rawHeader(), this.subscriptions[command.commandId()]);\n            }\n\n            // Send the command\n            try {\n                if (isPublish && this._publishStore) {\n                    this._publishStore.store(command.toMessage());\n                }\n\n                if (this.connection) {\n                    this.send(command.rawHeader(), command.data(), timeout);\n                }\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    /**\n     * This method connects the AMPS client to the server. It automatically calls logon() upon successful connection.\n     * If the [[ServerChooser]] is set, arguments are ignored.\n     *\n     * ```javascript\n     * var client = new amps.Client('my-application');\n     *\n     * client.connect('ws://localhost:9100/amps/json')\n     *     .then(function() {\n     *         // now the client is ready to send and receive any commands\n     *         // ...\n     *     })\n     *     .catch(function(err) {\n     *         console.error('Connection error: ', err);\n     *     });\n     * ```\n     *\n     * @param {string} uri The URI containing all required credentials/addresses/types.\n     * @param {Authenticator} authenticator The authenticator object for custom authentication scenarios.\n     * See [[Authenticator]] for details.\n     * @param {string} logonOptions The logon options, such as `pretty``.\n     * @returns The promise object with the result of fullfilling/failing the connection promise.\n     */\n    connect(uri?: string, authenticator?: Authenticator, logonOptions?: string): Promise<Message> {\n        let currentAuthenticator: Authenticator;\n\n        // if there's no server chooser yet, create a default one\n        const noChooser = this._serverChooser === null || this._serverChooser === undefined;\n        if (noChooser) {\n            if (uri) {\n                const chooser = new DefaultServerChooser();\n                chooser.add(uri, authenticator ? authenticator : new DefaultAuthenticator());\n                this._serverChooser = chooser;\n            }\n            else {\n                throw new Error('No Server Chooser or URI Provided');\n            }\n        }\n\n        // if there's no delay strategy set\n        if (!this._delayStrategy) {\n            // HAClient mode: if there's no delay strategy assigned, we're gonna use Exponential Delay with defaults\n            if (!noChooser) {\n                this._delayStrategy = new ExponentialDelayStrategy();\n            }\n            // Else: Classic mode: if there's no chooser and no delay strategy, have classic behavior (don't reconnect)\n        }\n\n        // set the sequence id\n        this.sequenceId = BigInteger(new Date().getTime().toString() + '000000');\n\n        /**\n         * This method is called when the delay timer is fired (i.e. it's time to attempt to create a connection).\n         * @ignore\n         */\n        const onDelayTick = (resolve: () => void, reject: (error: Error) => void): void => {\n            const currentUri = this._serverChooser.getCurrentURI();\n            currentAuthenticator = this._serverChooser.getCurrentAuthenticator();\n            if (!currentAuthenticator) { currentAuthenticator = new DefaultAuthenticator(); }\n\n            const parsedURI = Helpers.parseUri(currentUri);\n\n            // validate the URI\n            const pathComponents = parsedURI.path.split('/');\n            const protocol = pathComponents[1].toLowerCase();\n            let messageType: string;\n\n            if (pathComponents.length > 2) {\n                messageType = pathComponents[2];\n            }\n            else { messageType = ''; }\n\n            if (protocol !== 'amps') {\n                throw new Error('Specification of message type requires amps protocol');\n            }\n\n            // if logon options were supplied\n            if (logonOptions) { this._logonOptions = logonOptions; }\n            if (!this._logonOptions) { this._logonOptions = ''; }\n\n            // parse 'pretty' option (the only one supported ATM)\n            if (parsedURI.queryKey.pretty === 'true' && this._logonOptions.indexOf('pretty') < 0) {\n                if (this._logonOptions.length > 0) {\n                    this._logonOptions += ',pretty';\n                }\n                else {\n                    this._logonOptions = 'pretty';\n                }\n            }\n\n            const connectionUri = parsedURI.source.split('?')[0];\n\n            // Node.js\n            if (IS_NODE || IS_ELECTRON) {\n                const headers: {Authorization?: string} = {};\n\n                if (parsedURI.user.length > 0 || parsedURI.password.length > 0) {\n                    headers.Authorization = 'Basic ' +\n                        new Buffer(parsedURI.user + ':' + parsedURI.password).toString('base64');\n                }\n\n                this.connection = new W3WebSocket(\n                    connectionUri, null, null,\n                    headers, null,\n                    {\n                        maxReceivedFrameSize: 0x10000000000,  // support large messages\n                        assembleFragments: true\n                    }\n                );\n            }\n            // everything else\n            else {\n                this.connection = new W3WebSocket(connectionUri);\n            }\n\n            this.connection.binaryType = 'arraybuffer';\n            this.typeHelper = TypeHelper.helper(messageType);\n\n            this._isConnected = false;\n            this.connection.onopen = () => {\n                this._broadcastStateChange(Client.ConnectionStateListener.Connected);\n\n                this.username = parsedURI.user;\n                this.password = parsedURI.password;\n\n                try { this.connection.send(messageType === 'json' ? 'text' : 'binary'); }\n                // at this point onDelayTick has failed, the connection attempt has failed:\n                // there's no need to handle it in any special way since the onclose method\n                // will be called shortly after\n                catch (err) { return; }\n\n                // Mark as connected and report success to the chooser, and reset the strategy\n                this._serverChooser.reportSuccess(this.connection);\n\n                if (this._delayStrategy) {\n                    this._delayStrategy.reset();\n                }\n\n                // We're done here\n                resolve();\n            };\n\n            this.connection.onclose = (event: CloseEvent) => {\n                // onclose can only be called in case of a connection error, otherwise we null it first\n                let reason = event.reason;\n                if (reason.length === 0) {\n                    switch (event.code) {\n                        case 1002:\n                            reason = 'The endpoint is terminating the connection due to a protocol error.';\n                            break;\n\n                        case 1003:\n                            reason = 'Connection terminated: AMPS received data of a type it cannot accept';\n                            break;\n\n                        case 1006:\n                            reason = 'Connection Failed';\n                            break;\n\n                        case 1007:\n                            reason = `The endpoint is terminating the connection because a message was received that\n                            contained inconsistent data `;\n                            break;\n\n                        case 1009:\n                            reason = 'Connection terminated: a data frame was received that is too large.';\n                            break;\n\n                        case 1011:\n                            reason = `The server is terminating the connection because it encountered an unexpected\n                            condition that prevented it from fulfilling the request.`;\n                            break;\n\n                        default:\n                            reason = 'Unknown error';\n                    }\n                }\n\n                onConnectionError({name: event.code.toString(), message: reason}, resolve, reject);\n            };\n\n            this.connection.onerror = (event: Event) => {};\n\n            this.connection.onmessage = (message: any) => {\n                // pass the incoming message if the transport filter is set\n                if (this._transportFilter) { this._transportFilter(message, false); }\n                this.onMessage(message);\n            };\n        };\n\n        /**\n         * This internal method is called upon a connection error.\n         *\n         * @param {Error} err An error object.\n         * @param {function} resolve Promise-resolving function that needs to be binded to the onDelayTick method.\n         * @param {function} reject Promise-rejecting function that needs to be binded to the onDelayTick method.\n         */\n        const onConnectionError = (err: Error, resolve: (message?: Message) => void, reject: (error: Error) => void):\n        void => {\n            const wasConnected = this._isConnected;\n            this._isConnected = false;\n\n            // report failure to the chooser\n            this._serverChooser.reportFailure(err, this.connection);\n            this._broadcastStateChange(Client.ConnectionStateListener.Disconnected);\n\n            // wipe the previous connection object\n            if (this.connection) {\n                this.connection.onopen = null;\n                this.connection.onmessage = null;\n                this.connection.onerror = null;\n                this.connection.onclose = null;\n                this.connection.close();\n            }\n            this.connection = null;\n\n            // wipe previous subscriptions\n            this.subscriptions = {};\n\n            // reset the state machine\n            this.messageState = {\n                inGroup: false,\n                currentSow: null,\n                mergedHeader: false,\n                recordsRemaining: 0,\n                publishHeader: null\n            };\n\n            let onTimeoutInternal;\n\n            // report disconnection to the disconnect handler instead of reconnecting ourselves\n            if (this._disconnectHandler) {\n                reject(err);\n\n                // report to the error handler as well if the connection error occurs after successful connection\n                if (wasConnected) {\n                    this.onError(err);\n                }\n\n                return this._disconnectHandler(this, err);\n            }\n\n            // if we were connected before\n            if (wasConnected) {\n                // reconnect\n                onTimeoutInternal = () => openConnection().then(beforeLogon).then(logon).then(afterLogon).catch(reject);\n            }\n            // connecting for the first time or attempting to reconnect\n            else {\n                onTimeoutInternal = onDelayTick.bind(null, resolve, reject);\n            }\n\n            // attempting to reconnect/connect after a delay\n            try {\n                if (this._delayStrategy) {\n                    setTimeout(\n                        onTimeoutInternal,\n                        this._delayStrategy.getConnectWaitDuration(this._serverChooser.getCurrentURI())\n                    );\n                }\n                else {\n                    throw err;\n                }\n\n            }\n            // if we're here, that's the RetryTimeExceeded error - that means we're giving up on connecting\n            catch (err) {\n                if (this._delayStrategy) {\n                    this._delayStrategy.reset();\n                }\n\n                // report errors only after successfully connecting at least once\n                if (wasConnected || this._nextSubId > 2) { this.onError(err); }\n\n                this.disconnect();\n                reject(err);\n            }\n        };\n\n        /**\n         * This internal method initiates a new connection.\n         * @ignore\n         */\n        const openConnection = (): Promise<any> => {\n            return new Promise((resolve: () => void, reject: (error: Error) => void) => {\n                // classic mode - no autoreconnect\n                if (!this._delayStrategy) {\n                    onDelayTick(resolve, reject);\n                }\n                else {\n                    setTimeout(() => {\n                        try {\n                            onDelayTick(resolve, reject);\n                        }\n                        // if we're here, that's the critical error - that means we're giving up on connecting\n                        catch (err) {\n                            const error = new Error(err.message + '\\n' + this._serverChooser.getError());\n                            error.name = err.name;\n\n                            this.onError(error);\n\n                            this._delayStrategy.reset();\n                            this.disconnect();\n\n                            reject(error);\n                        }\n                    }, this._delayStrategy.getConnectWaitDuration(this._serverChooser.getCurrentURI()));\n                }\n            });\n        };\n\n        /**\n         * This internal method is being called right before the logon (mainly in order to use authenticator methods).\n         * @ignore\n         */\n        const beforeLogon = (): Promise<any> => {\n            return currentAuthenticator\n                .authenticate(this.username, this.password)\n                .then(passwordHeader => this.password = passwordHeader)\n\n                // if the authentication wasn't successful\n                .catch((err: Error) => {\n                    this.disconnect();\n                    throw err;\n                });\n        };\n\n        /**\n         * This internal method performs the logon command. Upon result, the promise object will be fullfilled.\n         * of failure.\n         * @ignore\n         */\n        const logon = (): Promise<any> => {\n            /**\n             * This internal function is called once the ack for the logon command has been received. It's used for\n             * setting up the serverVersion variable and proceed with the authenticator methods.\n             *\n             * @param {object} message The ack message from the server.\n             * @returns The promise object.\n             * @ignore\n             */\n            const uponLogonAttempt = (result: any): Promise<any> => {\n                const message: Message = result.message;\n\n                return new Promise((resolve: (message: Message) => void, reject: (error: Error) => void) => {\n                    if (message.c === 'ack' && message.a === 'processed') {\n                        switch (message.status) {\n                            case 'success':\n                                if (message.version.indexOf('develop') >= 0) { message.version = '5.3.0.0'; }\n                                this._serverVersion = message.version;\n\n                                const versionParts = message.version.split('.');\n                                this._serverIntVersion =\n                                      +(versionParts[0]) * Math.pow(10, 7)\n                                    + +(versionParts[1]) * Math.pow(10, 5)\n                                    + +(versionParts[2]) * Math.pow(10, 3)\n                                    + +(versionParts[3]);\n\n                                currentAuthenticator.completed(\n                                    this.username,\n                                    this.password,\n                                    message.reason ? message.reason : ''\n                                );\n\n                                resolve(message);\n\n                                break;\n\n                            case 'retry':\n                                currentAuthenticator.retry(message.user_id, message.pw)\n                                    // if the authentication wasn't successful\n                                    .catch((err: Error) => {\n                                        this.disconnect();\n                                        throw err;\n                                    })\n                                    .then((passwordHeader) => {\n                                        this.password = passwordHeader;\n\n                                        logon().then(resolve).catch(reject);\n                                    });\n                                break;\n\n                                // Failure case\n                            default:\n                                reject(Error(message.reason));\n                        }\n                    }\n                });\n            };\n\n            return this.execute(new Command('logon')).then(uponLogonAttempt);\n        };\n\n        /**\n         * This internal method is being called upon successful logon. In case of the heartbeat option enabled, it\n         * sets up and intiates the heartbeat protocol.\n         * @ignore\n         */\n        const afterLogon = (message: Message): Promise<any> => {\n            this._broadcastStateChange(Client.ConnectionStateListener.LoggedOn);\n\n            // add header methods\n            if (message !== undefined) { message = Message.fromObject(message); }\n\n            return new Promise((resolve: (message: Message) => void, reject: (err: Error) => void) => {\n                this._isConnected = true;\n\n                // enable heartbeat mode\n                if (this._heartbeat) {\n                    establishHeartbeat();\n                }\n\n                // if we have a subscription manager restore subscriptions\n                if (this._subscriptionManager) {\n                    this._subscriptionManager.resubscribe(this);\n                    this._broadcastStateChange(Client.ConnectionStateListener.Resubscribed);\n                }\n\n                // if we have a publish store, it's about time to republish not-persisted-yet messages\n                if (this._publishStore) {\n                    // there is persistence record for this client, let's catch up\n                    this._publishStore.discardUpTo(message.header.sequenceId());\n\n                    // after catching up, here's the new sequence id\n                    const lastPersisted = this._publishStore.lastPersisted();\n                    if (lastPersisted !== null && this.sequenceId.compare(lastPersisted) <= 0) {\n                        this.sequenceId = lastPersisted;\n                    }\n\n                    const self = this;\n                    (function replayTry() {\n                        try {\n                            self._publishStore.replay(self.send.bind(self));\n                            self._broadcastStateChange(Client.ConnectionStateListener.PublishReplayed);\n\n                            // reset the ack timeout timer (if set)\n                            if (self._ackBatch.ackTimeout) {\n                                clearTimeout(self._ackBatch.ackTimeoutTimerId);\n                                self._ackBatch.ackTimeoutTimerId = setTimeout(\n                                    self._onAckTimer.bind(self),\n                                    self._ackBatch.ackTimeout\n                                );\n                            }\n\n                            // finally resolve\n                            resolve(message);\n                        }\n                        catch (err) {\n                            if (self.connection && self._isConnected) {\n                                setTimeout(replayTry, 500);\n                            }\n                            // disconnected while replaying (retry again)\n                            else {\n                                onConnectionError(err, resolve, reject);\n                            }\n                        }\n                    })();\n                }\n                else {\n                    // reset the ack timeout timer (if set)\n                    if (this._ackBatch.ackTimeout) {\n                        clearTimeout(this._ackBatch.ackTimeoutTimerId);\n                        this._ackBatch.ackTimeoutTimerId = setTimeout(\n                            this._onAckTimer.bind(this),\n                            this._ackBatch.ackTimeout\n                        );\n                    }\n\n                    // no publish store set, can just proceed\n                    resolve(message);\n                }\n            });\n        };\n\n        /**\n         * This function istablishes the heartbeat mode after a successful logon.\n         * @ignore\n         */\n        const establishHeartbeat = (): void => {\n            this._heartbeat.onHeartbeatAbsence = (): void => {\n                if ((new Date().getTime() - this._heartbeat.timestamp.getTime()) > this._heartbeat.timeout * 1000) {\n                    // clear all timeouts\n                    clearTimeout(this._heartbeat.timeoutId);\n\n                    this._heartbeat.timestamp = null;\n                    this._heartbeat.onHeartbeatAbsence = null;\n\n                    onConnectionError({\n                        name: '4000',\n                        message: 'Heartbeat absence error'\n                    } , () => {}, () => {});\n                }\n            };\n\n            // Starting from here, we have a heartbeat mode with the server enabled\n            this._heartbeat.timestamp = new Date();\n\n            // Initiate the heartbeat procedure\n            this.execute(\n                new Command('heartbeat').ackType('received').options('start,' + this._heartbeat.interval),\n                (message: Message): void => {\n                    if (message.c === 'ack' && message.a === 'received' && message.status === 'success') {\n                        this._broadcastStateChange(Client.ConnectionStateListener.HeartbeatInitiated);\n\n                        // Set heartbeat timeout\n                        if (this._isConnected && this._heartbeat) {\n                            this._heartbeat.timeoutId = setTimeout(\n                                this._heartbeat.onHeartbeatAbsence.bind(this),\n                                this._heartbeat.timeout * 1000\n                            );\n                        }\n                    }\n                }).catch((err: Error): void => {\n                    this.onError({\n                        name: '4000',\n                        message: 'Heartbeat connection error'\n                    });\n                });\n        };\n\n        return openConnection().then(beforeLogon).then(logon).then(afterLogon);\n    }\n\n    /**\n     * This method sets/gets the error handler for all general errors such as connection issues, exceptions, etc.\n     *\n     * ```javascript\n     * var client = new amps.Client().errorHandler(function(err) {\n     *     console.error('err: ', err);\n     * });\n     * ```\n     *\n     * @param {function} errorHandler The callback function that will be invoked in case of a general error.\n     * @returns The client if a setter called, the error handler (if any) otherwise.\n     */\n    errorHandler(): ((error: Error) => void);\n    errorHandler(errorHandler: (error: Error) => void): Client;\n    errorHandler(errorHandler?: (error: Error) => void): ((error: Error) => void) | Client {\n        if (typeof errorHandler === 'function') {\n            this._errorHandler = errorHandler;\n            return this;\n        }\n\n        return this._errorHandler;\n    }\n\n    /**\n     * This method adds a connection state listener that will be called every time a connection state has been changed.\n     *\n     * ```javascript\n     * var client = new amps.Client();\n     * var listenerId = client.addConnectionStateListener(function(state) {\n     *     console.log('state: ', state);\n     * });\n     *\n     * // ... later\n     * client.removeConnectionStateListener(listenerId);\n     * ```\n     *\n     * @param {function} connectionStateListener The callback function that will be invoked in case of a connection\n     * state change.\n     * @returns The unique monotonically increasing listener id that can be used to remove the listener later.\n     */\n    addConnectionStateListener(connectionStateListener: (connectionState: number) => void): number {\n        if (typeof connectionStateListener === 'function') {\n            this._connectionStateListeners[this._stateListenerId] = connectionStateListener;\n            return this._stateListenerId++;\n        }\n\n        throw new Error('Invalid connection state listener object was provided');\n    }\n\n    /**\n     * This method removes a connection state listener with the id provided.\n     *\n     * ```javascript\n     * var client = new amps.Client();\n     * var listenerId = client.addConnectionStateListener(function(state) {\n     *     console.log('state: ', state);\n     * });\n     *\n     * // ... later\n     * client.removeConnectionStateListener(listenerId);\n     * ```\n     *\n     * @param {number} connectionStateListener The callback function that will be invoked in case of a connection\n     * state change.\n     */\n    removeConnectionStateListener(connectionStateListenerId: number): void {\n        if (connectionStateListenerId) {\n            try {\n                delete this._connectionStateListeners[connectionStateListenerId];\n                return;\n            }\n            catch (err) {}\n        }\n\n        throw new Error('The connection state listener was not found');\n    }\n\n    /**\n     * This is a private internal method that broadcasts the connection state change to the subscribers.\n     * @param {number} connectionState the new connection state.\n     * @private\n     * @hidden\n     */\n    private _broadcastStateChange = (connectionState: number): void => {\n        for (const listenerId in this._connectionStateListeners) {\n            if (this._connectionStateListeners[listenerId]) {\n                this._connectionStateListeners[listenerId](connectionState);\n            }\n        }\n    };\n\n    /**\n     * This method sets/gets the disconnect handler that is in case of an unintentional disconnection.\n     *\n     * ```javascript\n     * var disconnectHandler = function(client, err) {\n     *     // when the Client unintentionally disconnects, this method is invoked.\n     *     console.error('err: ', err);\n     * };\n     *\n     * var client = new amps.Client().disconnectHandler(disconnectHandler);\n     * ```\n     *\n     * @param {function} disconnectHandler The callback function that will be invoked in case of a disconnection.\n     * @returns The client if a setter called, the disconnect handler (if any)\n     * otherwise.\n     */\n    disconnectHandler(): ((client: Client, error: Error) => void);\n    disconnectHandler(disconnectHandler: (client: Client, error: Error) => void): Client;\n    disconnectHandler(disconnectHandler?: (client: Client, error: Error) => void):\n    ((client: Client, error: Error) => void) | Client {\n        if (disconnectHandler !== undefined && typeof disconnectHandler === 'function') {\n            this._disconnectHandler = disconnectHandler;\n            return this;\n        }\n\n        return this._disconnectHandler;\n    }\n\n    /**\n     * This method sets/gets the transport filter to observe incoming and outgoing messages in the format they are\n     * sent and received on the network. This allows you to inspect or modify outgoing messages before they are\n     * sent to the network, and incoming messages as they arrive from the network. This can be especially useful\n     * when using SSL connections, since this gives you a way to monitor outgoing network traffic before it is\n     * encrypted, and incoming network traffic after it is decrypted.\n     *\n     * ```javascript\n     * function printingFilter(data, outgoing) {\n     *     if (outgoing) {\n     *         console.log('OUTGOING ---> ', data);\n     *     }\n     *     else {\n     *         console.log('INCOMING ---> ', data);\n     *     }\n     * }\n     *\n     * var client = new amps.Client().transportFilter(printingFilter);\n     * ```\n     *\n     * @param {function} transportFilter The callback function that will be invoked when data is being sent / received.\n     * @returns The client if a setter called, the transport filter method (if any) otherwise.\n     */\n    transportFilter(): ((data: any, outgoing?: boolean) => void);\n    transportFilter(transportFilter: (data: any, outgoing?: boolean) => void): Client;\n    transportFilter(transportFilter?: (data: any, outgoing?: boolean) => void):\n    ((data: any, outgoing?: boolean) => void) | Client {\n        if (transportFilter !== undefined && typeof transportFilter === 'function') {\n            this._transportFilter = transportFilter;\n            return this;\n        }\n\n        return this._transportFilter;\n    }\n\n    /**\n     * This method sets up the heartbeat mode with the server. It sends a command to AMPS that starts or refreshes\n     * a heartbeat timer. When a heartbeat timer is active, AMPS publishes periodic heartbeat messages to AMPS and\n     * expects the client to respond with a heartbeat message. If the client does not provide a heartbeat within the\n     * time specified, AMPS logs an error and disconnects the connection.\n     *\n     * ```javascript\n     * // Initialize a client with the heartbeat of 5 seconds\n     * var client = new amps.Client().heartbeat(5);\n     * ```\n     *\n     * @param {number} interval the heartbeat value in seconds.\n     * @param {number} timeout the timeout value in seconds. By default it is the heartbeat interval value times 2.\n     * @returns The Client object.\n     */\n    heartbeat(interval: number, timeout?: number): Client {\n        // Set up the default timeout value\n        if (timeout === undefined) { timeout = interval * 2; }\n\n        this._heartbeat = {\n            interval: interval,\n            timeout: timeout\n        };\n\n        return this;\n    }\n\n    /**\n     * This method is a setter/getter for the logon options of the client. Logon options can also be set via the\n     * connect() method as an optional argument. Logon options can't be set after the client is connected and logged on.\n     *\n     * ```javascript\n     * // create a client and set the logon options\n     * var client = new amps.Client().logonOptions('pretty,ack_conflation=300ms');\n     *\n     * // ... access the logon options later\n     * console.log(client.logonOptions());\n     * ```\n     *\n     * @param {string} logonOptions The comma-separated string with logon options of the client.\n     * @returns {string | Client} The client if a setter is called. The logon options (if any) otherwise.\n     */\n    logonOptions(): string;\n    logonOptions(logonOptions: string): Client;\n    logonOptions(logonOptions?: string): string | Client {\n        // setter mode\n        if (logonOptions !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the logon options when connected');\n            }\n\n            this._logonOptions = logonOptions;\n            return this;\n        }\n\n        return this._logonOptions;\n    }\n\n    /**\n     * This method is a setter/getter for the server chooser object of the client.\n     * [[ServerChooser]] interface is used to obtain a URI to connect. The chooser can\n     * only be set before the client is connected. Once a server chooser is set, the client is working in the High\n     * Availability mode and uses a [[DelayStrategy]] object to determine a delay between\n     * reconnection attempts. If no delay strategy was provided, the client will use\n     * [[ExponentialDelayStrategy]] with default settings. AMPS provides the\n     * [[DefaultServerChooser]] implementation.\n     *\n     * ```javascript\n     * // create a server chooser and assign URIs\n     * var chooser = new amps.DefaultServerChooser();\n     * chooser.add('wss://localhost:9000/amps/json');\n     * chooser.add('wss://localhost:9100/amps/json');\n     *\n     * // create a client and assign a server chooser to it\n     * var client = new amps.Client().serverChooser(chooser);\n     *\n     * // ... access the chooser object later\n     * client.serverChooser().add('wss://backup_host:9200/amps/json');\n     * ```\n     *\n     * @param {ServerChooser} serverChooser The serverChooser object of the client.\n     * @returns {ServerChooser | Client} The client if a setter is called. The server chooser(if any) otherwise.\n     */\n    serverChooser(): ServerChooser;\n    serverChooser(serverChooser: ServerChooser): Client;\n    serverChooser(serverChooser?: ServerChooser): ServerChooser | Client {\n        // setter mode\n        if (serverChooser !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the server chooser when connected');\n            }\n\n            this._serverChooser = serverChooser;\n            return this;\n        }\n\n        return this._serverChooser;\n    }\n\n    /**\n     * This method is a setter/getter for the DelayStrategy object of the client. AMPS provides\n     * [[FixedDelayStrategy]] and\n     * [[ExponentialDelayStrategy]] strategies that are used to define a delay\n     * between reconnection attempts. It is possible to implement a custom [[DelayStrategy]].\n     * If it is not set, but the server chooser is used, the client will use [[ExponentialDelayStrategy]] with default\n     * settings.\n     *\n     * ```javascript\n     * // create a client and assign a delay strategy to it\n     * var strategy = new amps.ExponentialDelayStrategy();\n     * var client = new amps.Client().delayStrategy(strategy);\n     *\n     * // ... access the delay strategy object later\n     * client.delayStrategy().reset();\n     * ```\n     *\n     * @param {DelayStrategy} delayStrategy The reconnection delay strategy that the client uses.\n     * @returns The client if a setter is called. The\n     * DelayStrategy object (if any) otherwise.\n     */\n    delayStrategy(): DelayStrategy;\n    delayStrategy(delayStrategy: DelayStrategy): Client;\n    delayStrategy(delayStrategy?: DelayStrategy): DelayStrategy | Client {\n        // setter mode\n        if (delayStrategy !== undefined) {\n            this._delayStrategy = delayStrategy;\n            return this;\n        }\n\n        return this._delayStrategy;\n    }\n\n    /**\n     * This method sets a reconnection delay for the client. This is a convenience method that sets up a\n     * [[FixedDelayStrategy]] with a requested delay value.\n     *\n     * ```javascript\n     * // create a client and set a reconnect delay\n     * var client = new amps.Client().reconnectDelay(5000);\n     * ```\n\n     * @param {number} delay=200 The delay between reconnection attempts in milliseconds.\n     * @returns The client object.\n     * @see [[Client.delayStrategy]] for more flexible controls over reconnection logic.\n     */\n    reconnectDelay(delay: number = 200): Client {\n        this._delayStrategy = new FixedDelayStrategy((delay >= 0) ? delay : 200);\n        return this;\n    }\n    /**\n     * This method is a setter/getter for the SubscriptionManager object of the client. AMPS provides\n     * [[DefaultSubscriptionManager]] that is used to restore subscriptions\n     * after an unintended disconnection. It is not set by default.\n     *\n     * ```javascript\n     * // create a client and assign a subscription manager to it\n     * var subscriptionManager = new amps.DefaultSubscriptionManager();\n     * var client = new amps.Client().subscriptionManager(subscriptionManager);\n     *\n     * // ... access the subscription manager object later\n     * client.subscriptionManager().clear();\n     * ```\n     *\n     * @param {SubscriptionManager} subscriptionManager The subscription manager that the client uses.\n     * @returns The client if a setter is called. The SubscriptionManager object (if any) otherwise.\n     */\n    subscriptionManager(): SubscriptionManager;\n    subscriptionManager(subscriptionManager: SubscriptionManager): Client;\n    subscriptionManager(subscriptionManager?: SubscriptionManager): SubscriptionManager | Client {\n        if (subscriptionManager !== undefined) {\n            this._subscriptionManager = subscriptionManager;\n            return this;\n        }\n\n        return this._subscriptionManager;\n    }\n\n    /**\n     * This method is a setter/getter for the logon correlation id of the client. It must be\n     * a valid Base64 string.\n     *\n     * ```javascript\n     * // assign a logon correlation id to the client object\n     * var client = new amps.Client().logonCorrelationId('L2p0vkn2');\n     *\n     * // ... access the logon correlation id later\n     * console.log(client.logonCorrelationId());\n     * ```\n     *\n     * @param {string} logonCorrelationId The logon correlation id of the client.\n     * @returns The client if a setter is called. The logon correlation id (if any) otherwise.\n     */\n    logonCorrelationId(): string;\n    logonCorrelationId(logonCorrelationId: string): Client;\n    logonCorrelationId(logonCorrelationId?: string): string | Client {\n        if (logonCorrelationId !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the logon correlation id when connected');\n            }\n\n            this._logonCorrelationId = logonCorrelationId;\n            return this;\n        }\n\n        return this._logonCorrelationId;\n    }\n\n    /**\n     * This method is a setter/getter for the PublishStore object of the client.\n     * [[PublishStore]] interface is being used to to provide consistent publish\n     * functionality with guaranteed delivery.\n     *\n     * ```javascript\n     * // create a client and assign a publish store to it\n     * var publishStore = new amps.MemoryPublishStore();\n     * var client = new amps.Client().publishStore(publishStore);\n     *\n     * // ... access the publish store later\n     * if (client.publishStore().unpersistedCount() == 0) {\n     *     client.disconnect();\n     * }\n     * ```\n     *\n     * @param {PublishStore} publishStore The PublishStore object of the client.\n     * @returns The client if a setter is called. The PublishStore object (if any) otherwise.\n     */\n    publishStore(): PublishStore;\n    publishStore(publishStore: PublishStore): Client;\n    publishStore(publishStore?: PublishStore): PublishStore | Client {\n        if (publishStore !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the publish store when connected');\n            }\n\n            this._publishStore = publishStore;\n            return this;\n        }\n\n        return this._publishStore;\n    }\n\n    /**\n     * This method is a setter/getter for the BookmarkStore object of the client.\n     * [[BookmarkStore]] interface is being used to to provide resumable subscriptions and\n     * client-side duplicate message handling.\n     *\n     * ```javascript\n     * // create a client and assign a bookmark store to it\n     * var bookmarkStore = new amps.MemoryBookmarkStore();\n     * var client = new amps.Client().bookmarkStore(bookmarkStore);\n     *\n     * // ... access the bookmark store later\n     * client.bookmarkStore().purge();\n     * ```\n     *\n     * @param {BookmarkStore} bookmarkStore The BookmarkStore object of the client.\n     * @returns The client if a setter is called. The BookmarkStore object (if any) otherwise.\n     */\n    bookmarkStore(): BookmarkStore;\n    bookmarkStore(bookmarkStore: BookmarkStore): Client;\n    bookmarkStore(bookmarkStore?: BookmarkStore): BookmarkStore | Client {\n        if (bookmarkStore !== undefined) {\n            if (this._isConnected) {\n                throw new Error('Cannot set the bookmark store when connected');\n            }\n\n            this._bookmarkStore = bookmarkStore;\n            return this;\n        }\n\n        return this._bookmarkStore;\n    }\n\n    /**\n     * This method is a setter/getter for the autoAck option of the client. The AMPS client allows you to specify that\n     * messages should be automatically acknowledged. When this mode is on, AMPS acknowledges the message automatically\n     * if the message handler returns without throwing an exception. It is false by default.\n     *\n     * ```javascript\n     * // create a client and set autoAck to true\n     * var client = new amps.Client().autoAck(true);\n     *\n     * // ... check the autoAck option value later\n     * if (client.autoAck() === true) { ...  }\n     * ```\n     *\n     * @param {boolean} autoAck The new option value (true/false).\n     * @returns {boolean | Client} The client if a setter is called. The autoAck otion value otherwise.\n     */\n    autoAck(): boolean;\n    autoAck(autoAck: boolean): Client;\n    autoAck(autoAck?: boolean): boolean | Client {\n        if (autoAck !== undefined) {\n            this._autoAck = autoAck;\n\n            // Kill the ack timer (if any)\n            clearTimeout(this._ackBatch.ackTimeoutTimerId);\n\n            // connected and just enabled auto acking\n            if (this._isConnected && this._autoAck && this._ackBatch.ackTimeout) {\n                this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), this._ackBatch.ackTimeout);\n            }\n\n            return this;\n        }\n\n        return this._autoAck;\n    }\n\n    /**\n     * This method is a setter/getter for the acknowledgement batch size of the client.\n     *\n     * Batching acknowledgements reduces the number of round-trips to AMPS, which reduces network traffic and\n     * improves overall performance. AMPS sends the batch of acknowledgements when the number of acknowledgements\n     * exceeds a specified size. By default, if not specified otherwise, it is equal to 0. If the batch size value is\n     * greater than 1, the automatic ack timeout will be assigned with the default value of 1000 ms, if not already set.\n     * To override this behavior and disable ack timeouts with the batch size > 1, explicitly set ack timeout value to 0\n     * after setting the batch size.\n     *\n     * ```javascript\n     * // create a client and assign a publish store to it\n     * var client = new amps.Client().ackBatchSize(100);\n     *\n     * // ... get the ack batch size later\n     * if (client.ackBatchSize() > 10) { ... }\n     * ```\n     *\n     * @param {number} ackBatchSize The size of the batch to acknowledge.\n     * @returns The client if a setter is called. The acknowledgement batch size otherwise.\n     */\n    ackBatchSize(): number;\n    ackBatchSize(ackBatchSize: number): Client;\n    ackBatchSize(ackBatchSize?: number): number | Client {\n        if (typeof ackBatchSize === 'number') {\n            if (ackBatchSize < 0) { throw new Error('Invalid acknowledgement batch size value'); }\n\n            this._ackBatch.ackBatchSize = ackBatchSize;\n\n            // if auto ack is enabled\n            if (this._autoAck) {\n                // if we're connected\n                if (this._isConnected) {\n                    // if the size of batch is full enough, let's ack the batches\n                    Object.keys(this._ackBatch.toAck).map(topic => {\n                        const currentBookmarks = this._ackBatch.toAck[topic] || [];\n                        if (this._ackBatch.ackBatchSize <= currentBookmarks.length) {\n                            this._ack(topic);\n                        }\n                    });\n                }\n\n                // If no ackTimeout set, and the batch size > 1, establish the default timeout value (1000)\n                if (ackBatchSize > 1 && this._ackBatch.ackTimeout === undefined) {\n                    this._ackBatch.ackTimeout = 1000;\n\n                    if (this._isConnected) {\n                        // since we're connected and just established a new timeout value, start timer as well\n                        clearTimeout(this._ackBatch.ackTimeoutTimerId);\n                        this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), 1000);\n                    }\n                }\n            }\n\n            return this;\n        }\n\n        return this._ackBatch.ackBatchSize;\n    }\n\n    /**\n     * This method is a setter/getter for the acknowledgement batch timeout of the client.\n     *\n     * Batching acknowledgements reduces the number of round-trips to AMPS, which reduces network traffic and\n     * improves overall performance. AMPS sends the batch of acknowledgements when the amount of time since the last\n     * batch was sent exceeds a specified timeout.\n     *\n     * ```javascript\n     * // create a client and assign a acknowledgment batch timeout to it\n     * var client = new amps.Client().ackTimeout(100);\n     *\n     * // ... get the ack batch timeout later\n     * if (client.ackTimeout() > 1000) { ... }\n     * ```\n     *\n     * @param {number} ackTimeout The amount in milliseconds of time since the last batch acknowledgement. If set to\n     * 0, there will be no timeout.\n     * @returns The client if a setter is called. The acknowledgement batch timeout value (if any) otherwise.\n     */\n    ackTimeout(): number;\n    ackTimeout(ackTimeout: number): Client;\n    ackTimeout(ackTimeout?: number): number | Client {\n        if (typeof ackTimeout === 'number') {\n            if (ackTimeout < 0) { throw new Error('Invalid acknowledgment batch timeout value'); }\n\n            this._ackBatch.ackTimeout = ackTimeout;\n\n            // kill the previous timer (if any)\n            clearTimeout(this._ackBatch.ackTimeoutTimerId);\n\n            // start calling the onAckTick method with the new timeout value\n            if (this._autoAck && this._isConnected && ackTimeout > 0) {\n                this._ackBatch.ackTimeoutTimerId = setTimeout(this._onAckTimer.bind(this), ackTimeout);\n            }\n\n            return this;\n        }\n\n        return this._ackBatch.ackTimeout;\n    }\n\n    /**\n     * This method disconnects the client from an AMPS server (if the connection existed).\n     * @returns The promise object.\n     */\n    disconnect(): Promise<any> {\n        this._broadcastStateChange(Client.ConnectionStateListener.Shutdown);\n\n        return new Promise((resolve: () => void, reject: (error: Error) => void) => {\n            const destroyConnection = () => {\n                this._isConnected = false;\n\n                // take care of heartbeat\n                if (this._heartbeat) {\n                    clearTimeout(this._heartbeat.timeoutId);\n                    this._heartbeat.timestamp = null;\n                    delete this._heartbeat.onHeartbeatAbsence;\n\n                    this._heartbeat = null;\n                }\n\n                // delete all timeouts\n                for (const timeoutId in this.timeouts) {\n                    clearTimeout(this.timeouts[timeoutId]);\n                    delete this.timeouts[timeoutId];\n                }\n\n                // delete all subscriptions\n                for (const subId in this.subscriptions) {\n                    delete this.subscriptions[subId];\n                }\n\n                // reset message state machine\n                this.messageState = {\n                    inGroup: false,\n                    currentSow: null,\n                    mergedHeader: false,\n                    recordsRemaining: 0,\n                    publishHeader: null\n                };\n\n                // reset next id\n                this._nextSubId = 1;\n\n\n                // reset the to ack map\n                this._ackBatch.toAck = {};\n\n                // if still connected\n                if (this.connection) {\n                    // null connection-related stuff\n                    this.username = null;\n                    this.password = null;\n                    this.connection.onclose = null;\n                    this.connection.onopen = null;\n                    this.connection.onerror = null;\n\n                    // close the connection\n                    this.connection.close(1000, 'Disconnect from the client');\n                    this.connection = null;\n                }\n\n                this.sequenceId = null;\n                this._serverChooser = null;\n                this._delayStrategy = null;\n                this.subscriptionManager = null;\n\n                // resolve the promise\n                resolve();\n            };\n\n            // reset ack batch settings\n            this._autoAck = false;\n            this._ackBatch.ackBatchSize = 0;\n            clearTimeout(this._ackBatch.ackTimeoutTimerId);\n            this._ackBatch.ackTimeout = undefined;\n\n            // send the acks that are not sent yet\n            const ackTopics = Object.keys(this._ackBatch.toAck);\n            if (ackTopics.length > 0) {\n                let ackCommandsSent = 0;\n\n                for (const topic of ackTopics) {\n                    ackCommandsSent += this._ack(topic);\n                }\n\n                if (ackCommandsSent > 0) {\n                    this.flush().then(() => destroyConnection()).catch(reject);\n                }\n                else { destroyConnection(); }\n            }\n            else { destroyConnection(); }\n        });\n    }\n\n    /**\n     * This method performs the publish command.\n     * The publish command is the primary way to inject messages into the AMPS processing stream. A publish command\n     * received by AMPS will be forwarded to other connected clients with matching subscriptions.\n     *\n     * ```javascript\n     * client.publish('topic', {id: 1});\n     * ```\n     *\n     * @param {string} topic the topic to publish data.\n     * @param data the data to publish to a topic.\n     * @param {object} params an object with params, like: &#123;expiration: 30, ...&#125;\n     */\n    publish(topic: string, data: any, params?: CommandParams): void {\n        this._publishInternal('publish', topic, data, params);\n    }\n\n    /**\n     * This method delta publishes a message to a SOW topic.\n     *\n     * ```javascript\n     * client.deltaPublish('topic', {id: 1, text: 'Hello, World'});\n     * ```\n     *\n     * @param {string} topic the topic to publish data.\n     * @param data the data to publish to a topic.\n     * @param {object} params an object with params, like: &#123;expiration: 30, ...&#125;\n     */\n    deltaPublish(topic: string, data: any, params?: CommandParams): void {\n        this._publishInternal('delta_publish', topic, data, params);\n    }\n\n    private _publishInternal = (pubType: string, topic: string, data: any, params?: CommandParams): void => {\n        // if params are used - let's send it through the execute interface (full mode)\n        if (params) {\n            this.execute(new Command(pubType).topic(topic).data(data).addParams(params));\n            return;\n        }\n        const header: any = {c: pubType, t: topic};\n\n        // if we have a publish store, persist messages\n        if (this._publishStore) {\n            header.a = 'persisted';\n\n            // Increment the sequence id for the next publish\n            this.sequenceId = this.sequenceId.next();\n            header.s = this.sequenceId.toString();\n\n            // store the message\n            this._publishStore.store({...header, data: data});\n        }\n        else if (!this.connection || !this._isConnected) {\n            throw new Error('Must connect before sending data');\n        }\n\n        if (this.connection && this._isConnected) {\n            const serializedHeader: string = JSON.stringify(header);\n            let sizeBuffer;\n\n            // serialize data\n            data = this.typeHelper.serialize(data);\n            sizeBuffer = TypeHelper.littleEndianSizeBuffer(data.length + 1);\n\n            try {\n                // pass the size to the transport filter, if provided\n                if (this._transportFilter) { this._transportFilter(sizeBuffer, true); }\n                this.connection.send(sizeBuffer);\n\n                // pass data to the transport filter, if provided\n                if (this._transportFilter) { this._transportFilter(serializedHeader, true); }\n                this.connection.send(serializedHeader);\n\n                if (data.length === 1) {\n                    if (this._transportFilter) { this._transportFilter(data[0], true); }\n                    this.connection.send(data[0]);\n                }\n                else {\n                    for (const item of data) {\n                        // pass data to the transport filter, if provided\n                        if (this._transportFilter) { this._transportFilter(item, true); }\n                        this.connection.send(item);\n                    }\n                }\n            } catch (err) {}  // only connection error can occur ATM, and it's handled already\n        }\n    }\n\n    /**\n     * This method performs the __flush__ command. It sends a command to AMPS that returns an acknowledgement when all\n     * previous messages from this client have been received and processed. This command helps applications that use\n     * AMPS determine when AMPS has received all of the messages that have been sent, making it safe for the client\n     * to exit.\n     *\n     * ```javascript\n     * client.publish('topic', {id: 1});\n     * client.publish('topic', {id: 2});\n     * client.flush().then(...).catch(...);\n     * ```\n     *\n     * @param {number} timeout the flush timeout in milliseconds.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    flush(timeout?: number): Promise<{}> {\n        return new Promise((resolve: () => void, reject: (error: Error) => void) => {\n            this.execute(\n                new Command('flush').ackType('completed').clientName(this._name),\n                (message: Message) => {\n                    if (message.c === 'ack' && message.a === 'completed' && message.status === 'success') {\n                        resolve();\n                    }\n                    else {\n                        reject(new Error(message.reason));\n                    }\n                },\n                timeout\n            ).catch(reject);\n        });\n    }\n\n    /**\n     * This method performs the __subscribe__ command. The __subscribe__ command is the primary way to retrieve messages\n     * from the AMPS processing stream. A client can issue a __subscribe__ command on a topic to receive all published\n     * messages to that topic in the future. Additionally, content filtering can be used to choose which messages the\n     * client is interested in receiving.\n     *\n     * ```javascript\n     * client.subscribe(function(message) { console.log(message); }, 'topic')\n     *     .then(function(subscriptionId) { console.log(subscriptionId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in subscribe.\n     * @param {string} filter The filter argument in subscribe.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    subscribe(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler argument in subscribe must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in subscribe must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('subscribe')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the __sow__ command. The __sow__ command is use to query the contents of a previously\n     * defined SOW Topic. A __sow__ command can be used to query an entire SOW Topic, or a filter can be used to further\n     * refine the results found inside a SOW Topic. For more information, see the State of the World and SOW Queries\n     * chapters in the AMPS User Guide.\n     *\n     * ```javascript\n     * client.sow(function(message) { console.log(message); }, 'sow-topic')\n     *     .then(function(subscriptionId) { console.log(subscriptionId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns  The Promise object with the results of execution of the command.\n     */\n    sow(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in sow must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler argument in sow must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('sow')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the __sow_and_subscribe__ command. A __sow_and_subscribe__ command is used to combine the\n     * functionality of __sow__ and a __subscribe__ command in a single command. The __sow_and_subscribe__ command is\n     * used\n     *\n     * * to query the contents of a SOW topic (this is the __sow__ command); and\n     * * to place a subscription such that any messages matching the subscribed SOW topic and query filter will\n     *      be published to the AMPS client (this is the __subscribe__ command). As with the __subscribe__ command,\n     *      publish messages representing updates to SOW records will contain only information that has changed.\n     *\n     * ```javascript\n     * client.sowAndSubscribe(function(message) { ... }, 'sow-topic')\n     *     .then(function(subId) { console.log(subId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    sowAndSubscribe(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_and_subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler arg in sow_and_subscribe must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow_and_subscribe must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('sow_and_subscribe')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the __delta_subscribe__ command. The __delta_subscribe__ command is like the __subscribe__\n     * command except that subscriptions placed through __delta_subscribe__ will receive only messages that have changed\n     * between the SOW record and the new update. If __delta_subscribe__ is used on a record which does not currently\n     * exist in the SOW or if it is used on a topic which does not have a SOW-topic store defined, then\n     * __delta_subscribe__ behaves like a __subscribe__ command.\n     *\n     * ```javascript\n     * client.deltaSubscribe(function(message) { ... }, 'topic')\n     *     .then(function(subId) { console.log(subId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    deltaSubscribe(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in delta_subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler arg in delta_subscribe must be a function, not a \"' + (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in delta_subscribe be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('delta_subscribe')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the __sow_and_delta_subscribe__ command.\n     * A __sow_and_delta_subscribe__ command is used to combine the functionality of commands __sow__ and a\n     * __delta_subscribe__ in a single command. The __sow_and_delta_subscribe__ command is used\n     *\n     * * to query the contents of a SOW topic (this is the __sow__ command); and\n     * * to place a subscription such that any messages matching the subscribed SOW topic and query filter\n     *   will be published to the AMPS client (this is the __delta_subscribe__ command).\n     *\n     * As with the __delta_subscribe__ command, publish messages representing updates to SOW records will contain only\n     * the information that has changed. If a __sow_and_delta_subscribe__ is issued on a record that does not currently\n     * exist in the SOW topic, or if it is used on a topic that does not have a SOW-topic store defined,\n     * then a __sow_and_delta_subscribe__ will behave like a __sow_and_subscribe__ command.\n     *\n     * ```javascript\n     * client.sowAndDeltaSubscribe(function(message) { ... }, 'sow-topic')\n     *     .then(function(subId) { console.log(subId); })\n     *     .catch(function(err) { console.error('err: ', err); });\n     * ```\n     *\n     * @param {function} onMessage a message handler that will be called each time a message is received.\n     * @param {string} topic The topic argument in sow.\n     * @param {string} filter The filter argument in sow.\n     * @param {CommandParams} params The params like ackType, bookmark, commandId, etc in an object.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    sowAndDeltaSubscribe(\n        onMessage: (message: Message) => void,\n        topic: string,\n        filter?: string,\n        params?: CommandParams\n    ): Promise<string> {\n        if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_and_delta_subscribe must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (typeof onMessage !== 'function') {\n            throw 'The message handler arg in sow_and_delta_subscribe must be a function, not a \"' +\n                (typeof onMessage) + '\"';\n        }\n        if (filter === undefined || filter === null) {\n            filter = '';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow_and_delta_subscribe must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return this.execute(\n            new Command('sow_and_delta_subscribe')\n                .topic(topic)\n                .filter(filter)\n                .addParams(params),\n            onMessage\n        );\n    }\n\n    /**\n     * This method performs the unsubscribe command. The unsubscribe command unsubscribes the client from the topic\n     * which messages the client is is no more interested in receiving. If not subscription id is provided, the client\n     * will unsubscribe from all subscriptions.\n     *\n     * ```javascript\n     * client.unsubscribe();  // unsubscribe from all\n     * client.unsubscribe('123');\n     * ```\n     *\n     * @param {string} subId The id of the subscription.\n     * @returns The Promise object with the results of execution of the command.\n     */\n    unsubscribe(subId?: string): Promise<string> {\n        if (subId === undefined || subId === null) { subId = 'all'; }\n        if (typeof subId !== 'string') {\n            throw 'The subId argument in unsubscribe must be a string, not a \"' + (typeof subId) + '\"';\n        }\n\n        return this.execute(new Command('unsubscribe').subId(subId).ackType('received'));\n    }\n\n    /**\n     * This method ACKs a message queue message using the message object.\n     *\n     * ```javascript\n     * client.ack(queueMessage);\n     * ```\n     *\n     * @param {Message} message AMPS message object.\n     * @param {string} options A comma separated list of values indicating additional options, such as `cancel`,\n     * `expire`, or `lease_extension=60s`.\n     */\n    ack(message: Message, options?: string): void;\n\n    /**\n     * --------\n     * This method ACKs a message queue message using the topic and bookmark values.\n     *\n     * ```javascript\n     * client.ack('queue-topic', '12290412031115262887|1484244707000000008|');\n     * ```\n     *\n     * @param {string} topic The topic of the message to ack.\n     * @param {string} bookmark The bookmark of the message to ack.\n     * @param {string} options A comma separated list of values indicating additional options, such as `cancel`,\n     * `expire`, or `lease_extension=60s`.\n     */\n    ack(topic: string, bookmark: string, options?: string): void;\n    ack(topicOrMessage: string | Message, bookmark?: string, options?: string): void {\n        // data required\n        let topic;\n\n        // message case\n        if (typeof topicOrMessage !== 'string') {\n            // if it's not a queue message, simply do nothing\n            if (topicOrMessage.lp === undefined) { return; }\n\n            topic = topicOrMessage.t;\n\n            // In this case, options is actually in the bookmark field\n            options = bookmark;\n\n            bookmark = topicOrMessage.bm;\n        }\n        // topic/bookmark case\n        else if (typeof topicOrMessage === 'string') {\n            topic = topicOrMessage;\n\n            if (typeof bookmark !== 'string') {\n                throw 'The bookmark argument in ack() must be a string, not a \"' + (typeof bookmark) + '\"';\n            }\n        }\n        else {\n            throw 'Either a message object or a topic and bookmark strings should be provided in ack()';\n        }\n\n        // if there's no topic or bookmark -- there's nothing to acknowledge\n        if (topic === undefined || topic.length === 0 || bookmark === undefined || bookmark.length === 0) { return; }\n\n        // if the batch size is 0 or 1, or it has options, then ack() the message right away\n        if (this._ackBatch.ackBatchSize <= 1 || (typeof options === 'string' && options.length > 0)) {\n            const command = new Command('sow_delete').topic(topic).bookmark(bookmark);\n\n            // We have options, let's append them\n            if (typeof options === 'string' && options.length > 0) {\n                command.options(options);\n            }\n\n            this.execute(command);\n        }\n        else {\n            // add the new bookmark to the list of bookmarks to ack for this topic\n            let bookmarks = this._ackBatch.toAck[topic];\n\n            if (bookmarks === undefined) {\n                bookmarks = [];\n                this._ackBatch.toAck[topic] = bookmarks;\n            }\n\n            bookmarks.push(bookmark);\n\n            // Enough messages in the batch, let's ack\n            if (bookmarks.length >= this._ackBatch.ackBatchSize) {\n                this._ack(topic);\n            }\n        }\n    }\n\n    /**\n     * This method executes a SOW delete with a filter.\n     *\n     * ```javascript\n     * client\n     *     .sowDelete('sow-topic', '/status = \"obsolete\"')\n     *     .then(function(message) {\n     *         console.log(message.header.ackType(), ': ',  message.header.status());\n     *     });\n     * ```\n     *\n     * @param {string} topic The topic to execute the SOW delete against.\n     * @param {string} filter The filter. To delete all records, set a filter that is always true: `1 = 1`\n     * @param {string} options A comma separated list of values indicating additional processing options.\n     * @returns {Promise<Message>} The promise object with the results of execution of the command.\n     */\n    sowDelete(topic: string, filter: string, options?: string): Promise<Message> {\n        if (topic === undefined || topic === null || topic === '') {\n            throw 'A non-null, defined, non-empty topic argument must be provided';\n        }\n        else if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_delete must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (filter === undefined || filter === null || filter === '') {\n            throw 'A non-null, defined, non-empty filter argument must be provided';\n        }\n        else if (typeof filter !== 'string') {\n            throw 'The filter argument in sow_delete must be a string, not a \"' + (typeof filter) + '\"';\n        }\n\n        return new Promise((resolve: (message: Message) => void, reject: (error: Error) => void) => {\n            // build the command object\n            const command = new Command('sow_delete').topic(topic).filter(filter).ackType('stats');\n\n            // Assign options, if any\n            if (options !== undefined && options !== null) {\n                command.options(options);\n            }\n\n            this.execute(command, resolve).catch(reject);\n        });\n    }\n\n    /**\n     * This method deletes a message from a SOW, using data supplied to locate a SOW entry with matching keys.\n     *\n     * ```javascript\n     * var topic = sowMessage.header.topic();\n     * var data = sowMessage.data;\n     *\n     * client\n     *     .sowDeleteByData(topic, data)\n     *     .then(function(message) {\n     *         console.log(message.header.ackType(), ': ',  message.header.status());\n     *     });\n     * ```\n     *\n     * @param {string} topic The topic to execute the SOW delete against.\n     * @param {any} data The A message data whose keys match the message to be deleted in the server’s SOW.\n     * @returns {Promise<Message>} The promise object with the results of execution of the command.\n     */\n    sowDeleteByData(topic: string, data: any): Promise<Message> {\n        if (topic === undefined || topic === null || topic === '') {\n            throw 'A non-null, defined, non-empty topic argument must be provided';\n        }\n        else if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_delete must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (data === undefined || data === null || data === '') {\n            throw 'A non-null, defined, non-empty data argument must be provided';\n        }\n\n        return new Promise((resolve: (message: Message) => void, reject: (error: Error) => void) => {\n            this.execute(\n                new Command('sow_delete').topic(topic).data(data).ackType('stats'),\n                resolve\n            ).catch(reject);\n        });\n    }\n\n    /**\n     * This method executes a SOW delete with sow keys (supplied as a comma-separated values in a string). SOW keys are\n     * provided in the header of a SOW message, and are the internal identifier AMPS uses for that SOW message.\n     *\n     * ```javascript\n     * var topic = sowMessage1.header.topic();\n     * var keys = sowMessage1.header.sowKey() + ',' + sowMessage2.header.sowKey();\n     *\n     * client\n     *     .sowDeleteByKeys(topic, keys)\n     *     .then(function(message) {\n     *         console.log(message.header.ackType(), ': ',  message.header.status());\n     *     });\n     * ```\n     *\n     * @param {string} topic The topic to execute the SOW delete against.\n     * @param {string} keys A comma separated list of SOW keys to be deleted. SOW keys are provided in the header of\n     * a SOW message, and are the internal identifier AMPS uses for that SOW message.\n     * @returns {Promise<Message>} The promise object with the results of execution of the command.\n     */\n    sowDeleteByKeys(topic: string, keys: string): Promise<Message> {\n        if (topic === undefined || topic === null || topic === '') {\n            throw 'A non-null, defined, non-empty topic argument must be provided';\n        }\n        else if (typeof topic !== 'string') {\n            throw 'The topic argument in sow_delete must be a string, not a \"' + (typeof topic) + '\"';\n        }\n        if (keys === undefined || keys === null || keys === '') {\n            throw 'A non-null, defined, non-empty keys argument must be provided';\n        }\n        else if (typeof keys !== 'string') {\n            throw 'The keys argument in sow_delete must be a string, not a \"' + (typeof keys) + '\"';\n        }\n\n        return new Promise((resolve: (message: Message) => void, reject: (error: Error) => void) => {\n            this.execute(\n                new Command('sow_delete').topic(topic).sowKeys(keys).ackType('stats'),\n                resolve\n            ).catch(reject);\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/client.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport * as BigInteger from 'big-integer';\nimport { Header } from './header';\nimport { Message } from './message';\n\n\n/**\n * Interface for objects that represent a collection of valid key-value pairs\n * of parameters that can be set withing a convenience method like [[Client.subscribe]], [[Client.sow]], etc.\n *\n * See [[Command]] class for detailed descriptions of the parameters.\n */\nexport interface CommandParams {\n    [key: string]: any;\n\n    command?: string;\n    commandId?: string;\n    queryId?: string;\n    subId?: string;\n    ackType?: string;\n    data?: any;\n    topN?: number;\n    batchSize?: number;\n    topic?: string;\n    filter?: string;\n    bookmark?: string;\n    options?: string;\n    correlationId?: string;\n    orderBy?: string;\n    sowKey?: string;\n    sowKeys?: string;\n    expiration?: number;\n    sequenceId?: BigInteger;\n    subIds?: string;\n}\n\n\n/**\n * The Command class encapsulates the AMPS Command entity. The JavaScript client sends [[Command]] objects to the server\n * and receives [[Message]] objects from the server.\n */\nexport class Command {\n    /**\n     * index type (for adding options through addParams() method)\n     * @hidden\n     */\n    [key: string]: any;\n\n    private static readonly commandTypes: string[] = [\n        'logon',\n        'publish',\n        'delta_publish',\n        'subscribe',\n        'delta_subscribe',\n        'sow',\n        'sow_and_subscribe',\n        'sow_and_delta_subscribe',\n        'sow_delete',\n        'unsubscribe',\n        'flush',\n        'heartbeat',\n        'start_timer',\n        'stop_timer'\n    ];\n\n    // command fields\n    private header: Header;\n    private _data: any = null;\n\n    /**\n     * @param {string} command The name of the command.\n     */\n    constructor(command: string) {\n        if (Command.commandTypes.indexOf(command) < 0) {\n            throw new Error('Invalid command name');\n        }\n\n        this.header = new Header();\n        this.header.c = command;\n    }\n\n    /**\n     * This method returns the 'raw' header of the command as an object with key-value pairs.\n     * @hidden\n     */\n    rawHeader(): Header { return this.header; }\n\n    /**\n     * This method returns a command converted into a message.\n     * @hidden\n     */\n    toMessage(): Message {\n        const message: Message = (this.header as Message);\n        if (this._data) {\n            message.data = this._data;\n        }\n\n        return message;\n    }\n\n    /**\n     * Sets the command e.g. 'publish', 'sow_and_subscribe', to be executed.\n     * The following commands are available:\n     * - publish\n     * - delta_publish\n     * - subscribe\n     * - delta_subscribe\n     * - sow\n     * - sow_and_subscribe\n     * - sow_and_delta_subscribe\n     * - sow_delete\n     * - unsubscribe\n     *\n     * @param {string} value The command name value.\n     * @returns {Command} The updated Command object.\n     */\n    command(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the Command name.\n     * @returns {string} The Command name value.\n     */\n    command(): string;\n\n    command(value?: string): Command | string {\n        if (value !== undefined) {\n            if (Command.commandTypes.indexOf(value) < 0) {\n                throw new Error('Invalid command name');\n            }\n\n            this.header.c = value;\n            return this;\n        }\n\n        return this.header.c;\n    }\n\n    /**\n     * Sets the Client-specified command id. The command id is returned by the engine in responses to commands to allow\n     * the client to correlate the response to the command.\n     * @param {string} value The command id value.\n     * @returns {Command} The updated Command object.\n     */\n    commandId(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the command id.\n     * @returns {string} The command id value.\n     */\n    commandId(): string;\n\n    commandId(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.cid = value;\n            return this;\n        }\n\n        return this.header.cid;\n    }\n\n    /**\n     * Sets the SOW Query identifier set by client to identify a query.\n     * @param {string} value The query id.\n     * @returns {Command} The updated Command object.\n     */\n    queryId(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the query id.\n     * @returns {string} The query id.\n     */\n    queryId(): string;\n\n    queryId(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.query_id = value;\n            return this;\n        }\n\n        return this.header.query_id;\n    }\n\n    /**\n     * Sets the subscription identifier set by server when processing a subscription.\n     * @param {string} value The subscription id.\n     * @returns {Command} The updated Command object.\n     */\n    subId(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the subscription id.\n     * @returns {string} The subscription id.\n     */\n    subId(): string;\n\n    subId(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.sub_id = value;\n            return this;\n        }\n\n        return this.header.sub_id;\n    }\n\n    /**\n     * Sets the acknowledgements requested for the command. Multiple ack types should be comma-delimited.\n     * The acknowledgement messages will be delivered to the message handler.\n     * @param {string} value The acknowledgement message type(s).\n     * @returns {Command} The updated Command object.\n     */\n    ackType(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the acknowledgement message type(s).\n     * @returns {string} The acknowledgement message type(s).\n     */\n    ackType(): string;\n\n    ackType(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.a = value;\n            return this;\n        }\n\n        return this.header.a;\n    }\n\n    /**\n     * Sets the command data (message payload). Makes sense only for `publish`, `delta_publish`, and `sow_delete`\n     * commands.\n     * @param {any} value The Command data (message payload).\n     * @returns {Command} The updated Command object.\n     */\n    data(value: any): Command;\n\n    /**\n     * ---------\n     * Returns the Command data (message payload).\n     * @returns {any} The Command data (message payload).\n     */\n    data(): any;\n\n    data(value?: any): Command | any {\n        if (value !== undefined) {\n            this._data = value;\n            return this;\n        }\n\n        return this._data;\n    }\n\n    /**\n     * Sets the number of records to return.\n     * Note: If `TopN` is not equally divisible by the `BatchSize` value, then more records will be returned so that the\n     * total number of records is equally divisible by the `BatchSize` setting.\n     * @param {number} value The top N value.\n     * @returns {Command} The updated Command object.\n     */\n    topN(value: number): Command;\n\n    /**\n     * ---------\n     * Returns the top N value.\n     * @returns {number} The top N value.\n     */\n    topN(): number;\n\n    topN(value?: number): Command | number {\n        if (value !== undefined) {\n            this.header.top_n = value;\n            return this;\n        }\n\n        return this.header.top_n;\n    }\n\n    /**\n     * Sets the number of messages that are batched together when returning a query result. If it's not set, it is\n     * `10` by default.\n     * @param {number} value The batch size value.\n     * @returns {Command} The updated Command object.\n     */\n    batchSize(value: number): Command;\n\n    /**\n     * ---------\n     * Returns the batch size value.\n     * @returns {number} The batch size value.\n     */\n    batchSize(): number;\n\n    batchSize(value?: number): Command | number {\n        if (value !== undefined) {\n            this.header.bs = value;\n            return this;\n        }\n\n        return this.header.bs;\n    }\n\n    /**\n     * Sets the topic value.\n     * @param {string} value The topic value.\n     * @returns {Command} The updated Command object.\n     */\n    topic(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the topic value.\n     * @returns {string} The topic value.\n     */\n    topic(): string;\n\n    topic(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.t = value;\n            return this;\n        }\n\n        return this.header.t;\n    }\n\n    /**\n     * Sets the content filter expression.\n     * @param {string} value The filter value.\n     * @returns {Command} The updated Command object.\n     */\n    filter(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the filter value.\n     * @returns {string} The filter value.\n     */\n    filter(): string;\n\n    filter(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.filter = value;\n            return this;\n        }\n\n        return this.header.filter;\n    }\n\n    /**\n     * Sets the client-originated identifier used to mark a location in journaled messages.\n     * @param {string} value The bookmark value.\n     * @returns {Command} The updated Command object.\n     */\n    bookmark(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the bookmark value.\n     * @returns {string} The bookmark value.\n     */\n    bookmark(): string;\n\n    bookmark(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.bm = value;\n            return this;\n        }\n\n        return this.header.bm;\n    }\n\n    /**\n     * Sets the (comma-delimited) string of options on a specific Command.\n     * @param {string} value The options (comman-delimited) string value.\n     * @returns {Command} The updated Command object.\n     */\n    options(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the options (comma-delimited) string value.\n     * @returns {string} The options (comma-delimited) string value.\n     */\n    options(): string;\n\n    options(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.o = value;\n            return this;\n        }\n\n        return this.header.o;\n    }\n\n    /**\n     * Sets the opaque token set by an application and returned with the message.\n     * @param {string} value The correlationId value.\n     * @returns {Command} The updated Command object.\n     */\n    correlationId(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the correlationId value.\n     * @returns {string} The correlationId value.\n     */\n    correlationId(): string;\n\n    correlationId(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.x = value;\n            return this;\n        }\n\n        return this.header.x;\n    }\n\n    /**\n     * Sets the SOW topic key(s) by which to order SOW query.\n     * @param {string} value The orderBy value.\n     * @returns {Command} The updated Command object.\n     */\n    orderBy(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the orderBy value.\n     * @returns {string} The orderBy value.\n     */\n    orderBy(): string;\n\n    orderBy(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.orderby = value;\n            return this;\n        }\n\n        return this.header.orderby;\n    }\n\n    /**\n     * Sets the sow key value.\n     * A SOW key will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in\n     * on a subscription when the published message matches a record in the SOW.\n     *\n     * Format:\n     *\n     * - string containing the digits of an unsigned long for AMPS-generated SOW keys\n     *\n     * OR\n     *\n     * - arbitrary string in the base64 character set for user-provided SOW keys.\n     * @param {string} value The sow key value.\n     * @returns {Command} The updated Command object.\n     */\n    sowKey(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the sow key value.\n     * @returns {string} The sow key value.\n     */\n    sowKey(): string;\n\n    sowKey(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.k = value;\n            return this;\n        }\n\n        return this.header.k;\n    }\n\n    /**\n     * Sets the sowKeys as a comma-delimited value.\n     * @param {string} value The sow keys value.\n     * @returns {Command} The updated Command object.\n     */\n    sowKeys(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the sowKeys value.\n     * @returns {string} The sowKeys value.\n     */\n    sowKeys(): string;\n\n    sowKeys(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.sow_keys = value;\n            return this;\n        }\n\n        return this.header.sow_keys;\n    }\n\n    /**\n     * Sets the SOW expiration time (in seconds) if used in `publish`.\n     * @param {number} value The command expiration value (in seconds).\n     * @returns {Command} The updated Command object.\n     */\n    expiration(value: number): Command;\n\n    /**\n     * ---------\n     * Returns the command expiration value (in seconds).\n     * @returns {number} The command expiration value.\n     */\n    expiration(): number;\n\n    expiration(value?: number): Command | number {\n        if (value !== undefined) {\n            this.header.e = value;\n            return this;\n        }\n\n        return this.header.e;\n    }\n\n    /**\n     * Sets the client name value. It is used to identify a client. Useful for publishers that wish to identify the\n     * source of a publish, client status messages and for client heartbeats. If it's not set, it'll be taken from the\n     * [[Client]] object.\n     * @param {string} value The client name value.\n     * @returns {Command} The updated Command object.\n     * @hidden\n     */\n    clientName(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the client name value.\n     * @returns {string} The client name value.\n     * @hidden\n     */\n    clientName(): string;\n\n    clientName(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.client_name = value;\n            return this;\n        }\n\n        return this.header.client_name;\n    }\n\n    /**\n     * Sets the sequenceId value. SequenceId is an integer that corresponds to the publish message sequence number. For\n     * more information see the **Replication** section in the **User Guide**.\n     * @param {BigInteger} value The sequenceId value.\n     * @returns {Command} The updated Command object.\n     */\n    sequenceId(value: BigInteger): Command;\n\n    /**\n     * ---------\n     * Returns the sequenceId value.\n     * @returns {BigInteger} The sequenceId value.\n     */\n    sequenceId(): BigInteger;\n\n    sequenceId(value?: BigInteger): Command | BigInteger {\n        if (value !== undefined) {\n            this.header.s = value.toString();\n            return this;\n        }\n\n        return BigInteger(this.header.s);\n    }\n\n    /**\n     * Sets the subIds - a comma-separated list of subscription ids sent from AMPS engine to identify which client \n     * subscriptions match a given `publish` message.\n     * @param {string} value The subIds (comma-delimited) value.\n     * @returns {Command} The updated Command object.\n     */\n    subIds(value: string): Command;\n\n    /**\n     * ---------\n     * Returns the subIds (comma-delimited) value.\n     * @returns {string} The subIds (comma-delimited) value.\n     */\n    subIds(): string;\n\n    subIds(value?: string): Command | string {\n        if (value !== undefined) {\n            this.header.sids = value;\n            return this;\n        }\n\n        return this.header.sids;\n    }\n\n    /**\n     * Parses an object with params into a set of command parameters. For example,\n     * an object &#123; expiration: 30, filter: '/age > 20' &#125; will be equivalent to make a command using\n     * new amps.Command().expiration(30).filter('/age > 20');\n     * @param {object} [params] An object with params.\n     * @returns {Command} The updated Command object.\n     * @hidden\n     */\n    addParams(params?: CommandParams): Command {\n        if (params === null || params === undefined) { return this; }\n\n        const paramKeys = Object.keys(params);\n\n        for (let i = 0; i < paramKeys.length; ++i) {\n            const param = paramKeys[i];\n            try { this[param](params[param]); }\n            catch (err) { throw new Error('Parameter \"' + param + '\" not found.'); }\n        }\n\n        return this;\n    }\n\n    /**\n     * This method creates and returns a deep copy of the command Header data.\n     * @returns {Header} The deep copy of command header.\n     * @hidden\n     */\n    private headerCopy(): Header {\n        const header: Header = new Header();\n        header.c = this.header.c.slice(0);\n\n        for (const key in this.header) {\n            header[key] = (typeof this.header[key] === 'string') ? this.header[key].slice(0) : this.header[key];\n        }\n\n        return header;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/command.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { ServerChooser } from './server-chooser.interface';\nimport { Authenticator } from './authenticator.interface';\n\n\n/**\n * Represents a simple object that contains a URI string value and an optional object that implements the \n * [[Authenticator]] interface.\n */\nexport interface ChooserItem {\n    uri: string;\n    authenticator?: Authenticator;\n}\n\n\n/**\n * This is a simple server chooser that implements the [[ServerChooser]] interface. It keeps a list of AMPS instance \n * URIs and Authenticators, and advances to the next one when a failure occurs. You can add any number of URIs to the \n * [[DefaultServerChooser]].\n *\n * *To use the [[DefaultServerChooser]], you add the URIs for the server to choose from, then set the chooser to the \n * [[Client]]:*\n * \n * ```javascript\n * var chooser = new amps.DefaultServerChooser();\n * chooser.add('wss://server:9005/amps/nvfix');\n * chooser.add('wss://server-two:9005/amps/nvfix');\n *\n * var client = new amps.Client('showchooser');\n * client.serverChooser(chooser);\n *\n * client\n *     .connect()\n *     .then(...)\n *     .catch(...);\n * ```\n */\nexport class DefaultServerChooser implements ServerChooser {\n    // Intenal data fields\n    private servers: ChooserItem[];\n    private index: number;\n    private error: Error;\n\n    /**\n     * This is the constructor for the [[DefaultServerChooser ]] class.\n     */\n    constructor() {\n        this.servers = [];\n        this.index = 0;\n        this.error = null;\n    }\n\n    /**\n     * This method adds a URI and an optional authenticator for [[Client]] to choose from.\n     *\n     * ```javascript\n     * chooser.add('wss://server:9005/amps/json');\n     * chooser.add('wss://another_server:9006/amps/json', myAuthenticator);\n     * ```\n     * \n     * @param {string} uri The URI of the server.\n     * @param {Authenticator} authenticator The authenticator object for custom authentication scenarios.\n     * @returns {DefaultServerChooser} The server chooser object.\n     */\n    add(uri: string, authenticator: Authenticator = null): DefaultServerChooser {\n        if (uri.length === 0) {\n            throw new Error('Invalid URI');\n        }\n\n        this.servers.push({uri: uri, authenticator: authenticator});\n\n        return this;\n    }\n\n    /**\n     * This method allows to add as many server choosers as needed. The arguments can be either uri strings or objects\n     * that contain uri key, and optionally, the authenticator key.\n     *\n     * ```javascript\n     * chooser.addAll(\n     *     'wss://server:9005/amps/json',\n     *     {uri: 'wss://extra_server:9007/amps/json'},\n     *     {uri: 'wss://another_server:9003/amps/json', authenticator: myAuthenticator}\n     * );\n     * ```\n     * \n     * @param {...(string | ChooserItem)} options either uri strings or objects that contain uri key, and optionally,\n     * the authenticator key.\n     * @returns {DefaultServerChooser} The server chooser object.\n     */\n    addAll(...options: Array<string | ChooserItem>): DefaultServerChooser {\n        for (const option of options) {\n            if (!option) { throw new Error('Invalid URI option'); }\n            if (typeof option === 'string') { this.add(option); }\n            else { this.add(option.uri, option.authenticator); }\n        }\n        \n        return this;\n    }\n\n    /**\n     * This method returns the current URI chosen. If no URI was chosen yet, returns null.\n     *\n     * @returns {string} The current URI chosen (if any).\n     */\n    getCurrentURI(): string {\n        return (this.servers.length > 0) ? this.servers[this.index].uri : null;\n    }\n\n    /**\n     * This method returns the current authenticator chosen. If no authenticator was chosen yet, returns null.\n     *\n     * @returns {Authenticator} The current authenticator chosen (if any).\n     */\n    getCurrentAuthenticator(): Authenticator {\n        return (this.servers.length > 0) ? this.servers[this.index].authenticator : null;\n    }\n\n    /**\n     * This method is invoked by the [[Client]] to indicate a connection failure occurred.\n     *\n     * @param {Error} error An error object containing an error message.\n     * @param {any} connectionInfo An object of properties associated with the failed connection.\n     */\n    reportFailure(error: Error, connectionInfo: any): void {\n        this.error = error;\n\n        // advancing the index to the next position\n        this.index = (this.index + 1) % this.servers.length;\n    }\n\n    /**\n     * This method is invoked by the [[Client]] to indicate a connection attempt was successful.\n     *\n     * @param {any} connectionInfo An object of properties associated with the successful connection.\n     */\n    reportSuccess(connectionInfo: any): void {\n        this.error = null;\n    }\n\n    /**\n     * This method provides additional detail to be included in an exception thrown by when the AMPS instance(s) are not\n     * available. Called by the [[Client]] when creating an exception.\n     *\n     * @returns {string} A string with information about the connection that failed and the reason for the failure.\n     * When no further information is available, returns an empty string.\n     */\n    getError(): string { return this.error ? this.error.message : ''; }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/default-server-chooser.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { SubscriptionManager } from './subscription-manager.interface';\nimport { Header } from './header';\nimport { Client } from './client';\nimport { Message } from './message';\n\n\n/**\n * [[DefaultSubscriptionManager]] is used to resubscribe and manage client subscriptions in case of a unintended\n * disconnection.\n *\n * ```javascript\n * // create a client\n * let client = new amps.Client('my-client');\n *\n * // Create and assign the subscription manager\n * client.subscriptionManager(new amps.DefaultSubscriptionManager());\n *\n * // ... access the subscription manager later\n * client.subscriptionManager().clear();\n * ```\n */\nexport class DefaultSubscriptionManager implements SubscriptionManager {\n    // Internal state\n    private activeSubs: any;\n    private resumedSubs: any;\n    private resubscribing: boolean;\n\n    /**\n     * This is the constructor for the DefaultSubscriptionManager class.\n     * @param {number} resubscriptionTimeout The maximum time (milliseconds) for the Resubscription to timeout. If\n     * it is equal to zero, it never times out.\n     */\n    constructor(private _resubscriptionTimeout: number = 0) {\n        // Detect negative value and short circuit in this case\n        if (_resubscriptionTimeout < 0) {\n            throw new Error('Invalid value: Cannot use negative argument values');\n        }\n\n        this.activeSubs = {};\n        this.resumedSubs = {};\n        this.resubscribing = false;\n    }\n\n    /**\n     * This method performs the subscription to a topic.\n     *\n     * @param {Header} header The subscription command header with all command data.\n     * @param {function} messageHandler The message handler callback function. Not required in case of 'replace' or\n     * 'pause' subscriptions.\n     */\n    subscribe(header: Header, messageHandler?: (message: Message) => void): void {\n        // short circuit\n        if (!header || (header.sub_id === undefined && header.sids === undefined)) { return; }\n\n        // copy the command object\n        header = DefaultSubscriptionManager.copyHeader(header);\n\n        // have options, such as oof, replace, etc\n        if (header.o) {\n            const subIds = header.sub_id + (header.sids ? ',' + header.sids : '').split(',');\n\n            // subscription header with a 'resume' option set - add it to the 'resumed' subscriptions list\n            if (header.o.indexOf('resume') >= 0) {\n                for (const subId of subIds) {\n                    if (!this.resumedSubs[subId]) {\n                        this.resumedSubs[subId] = {\n                            header: header,\n                            handler: messageHandler\n                        };\n                    }\n                }\n\n                return;\n            }\n            // subscription header with a 'pause' option set - remove it from the 'resumed' list, set 'pause' flag\n            // for any existing subscriptions in the 'active' list\n            else if (header.o.indexOf('pause') >= 0) {\n                for (const subId of subIds) {\n                    // if we have a resumed sub, remove it\n                    if (this.resumedSubs[subId]) {\n                        delete this.resumedSubs[subId];\n                    }\n\n                    if (this.activeSubs[subId]) {\n                        // if there's no 'replace' option set\n                        if (header.o.indexOf('replace') < 0) {\n                            const currentSubOptions = this.activeSubs[subId].o;\n                            this.activeSubs[subId].o = (currentSubOptions ? 'pause,' + currentSubOptions : 'pause');\n                            continue;\n                        }\n                        else {\n                            messageHandler = this.activeSubs[subId].handler;\n                        }\n                    }\n\n                    this.activeSubs[subId] = {\n                        header: header,\n                        handler: messageHandler\n                    };\n                }\n\n                return;\n            }\n        }\n\n        // subscriptions without options\n        const existingSubscription = this.activeSubs[header.sub_id];\n        if (existingSubscription) {\n            messageHandler = existingSubscription.handler;\n        }\n\n        // store the subscription\n        this.activeSubs[header.sub_id] = {\n            header: header,\n            handler: messageHandler\n        };\n    }\n\n    /**\n     * This method unsubcribes from a topic using the subscription id.\n     *\n     * @param {string} subId The subscription id.\n     */\n    unsubscribe(subId: string): void {\n        delete this.activeSubs[subId];\n        delete this.resumedSubs[subId];\n    }\n\n    /**\n     * This method clears all the managed subscriptions so that in case of the disconnection there will be no\n     * subscriptions to restore.\n     */\n    clear(): void {\n        this.activeSubs = {};\n        this.resumedSubs = {};\n    }\n\n    /**\n     * This method sets/gets the resubscription timeout value. It should be bigger or equal to zero. If it\n     * is equal to zero, it never times out.\n     *\n     * @param {number} timeout The timeout value (in milliseconds).\n     * @returns {number} The subscription timeout.\n     */\n    resubscriptionTimeout(timeout: number = 0): number {\n        if (timeout !== undefined) {\n            if (typeof timeout !== 'number' || timeout < 0) {\n                throw new Error('Invalid value');\n            }\n\n            this._resubscriptionTimeout = timeout;\n        }\n\n        return this._resubscriptionTimeout;\n    }\n\n    /**\n     * This method resubscribes to all the stored subscriptions using the [[Client]] object provided.\n     *\n     * @param {Client} client The AMPS client object. It must be connected.\n     */\n    resubscribe(client: Client): void {\n        // short circuit\n        if (client === undefined || client === null || !client || !client.isConnected()) {\n            throw new Error('A connected client must be provided');\n        }\n\n        this.resubscribing = true;\n\n        // send active, then resumed subs\n        Object.keys(this.activeSubs).map(\n            (subId: string) => { this.resubscribeInternal(subId, client, this.activeSubs[subId]); }\n        );\n        Object.keys(this.resumedSubs).map(\n            (subId: string) => { this.resubscribeInternal(subId, client, this.resumedSubs[subId]); }\n        );\n\n        this.resubscribing = false;\n    }\n\n    /**\n     * This is the internal method that wraps the resubscribe logic per subscription so that the public\n     * resubscribe() method looks clear and concise.\n     * @private\n     * @hidden\n     */\n    private resubscribeInternal = (\n        subId: string,\n        client: Client,\n        subscription: {handler(message: Message): void, header: Header}\n    ): void => {\n        const hasOptions = subscription.header.o !== undefined;\n\n        // make sure we're not sending 'replace' again\n        if (hasOptions) {\n            subscription.header.o = subscription.header.o.replace(/replace,?/g, '');\n        }\n\n        // bookmark subscription\n        if (subscription.header.bm) {\n            // if paused, subscribe with the most recent bookmark\n            if (!hasOptions || subscription.header.o.indexOf('pause') < 0) {\n                // get the most recent bookmark from bookmark store and assign it as a new bm value\n                subscription.header.bm = client.bookmarkStore().mostRecent(subscription.header.sub_id);\n            }\n        }\n\n        // assign a command id (should increase)\n        subscription.header.cid = client.nextSubId();\n\n        // send the subscription command\n        client.setMessageHandler(subId, subscription.handler);\n        client.send(subscription.header, undefined, this._resubscriptionTimeout);\n    }\n\n    /**\n     * This is a deep copy method (in order to preserve the message headers).\n     *\n     * @param {Header} header The command header to copy.\n     * @returns {Header} The copy of the original object.\n     * @private\n     * @hidden\n     */\n    private static copyHeader(obj: Header) {\n        const copiedObj: Header = new Header();\n        copiedObj.c = obj.c.slice(0);\n\n        Object.keys(obj).map((key: string) => {\n            copiedObj[key] = (typeof obj[key] === 'string') ? obj[key].slice(0) : obj[key];\n        });\n\n        return copiedObj;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/default-subscription-manager.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { DelayStrategy } from './delay-strategy.interface';\n\n\n/**\n * This is the interface with available parameters to set for a [[ExponentialDelayStrategy]] object.\n */\nexport interface ExponentialDelayStrategyParams {\n    initialDelay?: number;\n    maximumDelay?: number;\n    backoffExponent?: number;\n    maximumRetryTime?: number;\n    jitter?: number;\n}\n\n\n/**\n * [[ExponentialDelayStrategy]] is an implementation that exponentially backs off when reconnecting to the same server,\n * with a maximum time to retry before it gives up entirely.\n *\n * ```javascript\n * // create the strategy with all default values\n * var strategy = new amps.ExponentialDelayStrategy();\n *\n * // set jitter to 3.5, and keep other parameters default\n * var strategy = new amps.ExponentialDelayStrategy({jitter: 3.5});\n *\n * // set all params as arguments...\n * var strategy = new amps.ExponentialDelayStrategy(400, 25000, 1.5, 0, 2.5);\n *\n * // ... or using the object with values\n * var strategy = new amps.ExponentialDelayStrategy({\n *     initialDelay: 400,\n *     maximumDelay: 25000,\n *     backoffExponent: 1.5,\n *     maximumRetryTime: 0,\n *     jitter: 2.5\n * });\n *\n * // ... or using setter methods\n * var strategy = new amps.ExponentialDelayStrategy()\n *     .initialDelay(400)\n *     .maximumDelay(25000)\n *     .backoffExponent(1.5)\n *     .maximumRetryTime(0)\n *     .jitter(2.5);\n *\n *  // Setters can also be used after initialization of the strategy to change values dynamically\n * });\n * ```\n */\nexport class ExponentialDelayStrategy implements DelayStrategy {\n    private static readonly NEGATIVE_VALUE_ERROR: string = 'Invalid value(s): Cannot use negative argument values';\n\n    // data\n    private _initialDelay: number;\n    private _maximumDelay: number;\n    private _backoffExponent: number;\n    private _maximumRetryTime: number;\n    private _jitter: number;\n\n    // state\n    private startTime: number;\n    private firstUri: string = null;\n    private recentUri: string = null;\n    private currentUri: string = null;\n    private currentDelay: number = -1;\n\n    /**\n     * @param {number} initialDelay The time (in milliseconds) to wait before reconnecting to a server for the\n     * first time after a failed connection. The default value is **200** ms.\n     * @param {number} maximumDelay The maximum time to wait for any reconnect attempt (milliseconds).\n     * Exponential backoff will not exceed this maximum. The default value is **20** s.\n     * @param {number} backoffExponent The exponent to use for calculating the next delay time. For example, if\n     * the initial time is 200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.\n     * The default value is **2.0**.\n     * @param {number} maximumRetryTime The maximum time (milliseconds) to allow reconnect attempts to continue\n     * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client\n     * never gives up. The default value is **0**.\n     * @param {number} jitter The amount of 'jitter' to apply when calculating a delay time, measured in multiples\n     * of the initial delay. Jitter is used to reduce the number of simultaneous reconnects that may be issued from\n     * multiple clients. The default value is **1.0**.\n     */\n    constructor(\n        initialDelay?: number,\n        maximumDelay?: number,\n        backoffExponent?: number,\n        maximumRetryTime?: number,\n        jitter?: number\n    )\n\n    /**\n     * -------------\n     * @param {ExponentialDelayStrategyParams} params The object with delay parameters, such as delay, maximumRetryTime,\n     * etc.\n     */\n    constructor(params: ExponentialDelayStrategyParams)\n\n    constructor(\n        initialDelayOrParams?: ExponentialDelayStrategyParams | number,\n        maximumDelay: number = 20000,\n        backoffExponent: number = 2.0,\n        maximumRetryTime: number = 0,\n        jitter: number = 1.0\n\n    ) {\n        // Treat the first argument as a the object with values\n        if (typeof initialDelayOrParams !== 'number' && initialDelayOrParams) {\n            maximumDelay = initialDelayOrParams.maximumDelay;\n            backoffExponent = initialDelayOrParams.backoffExponent;\n            maximumRetryTime = initialDelayOrParams.maximumRetryTime;\n            jitter = initialDelayOrParams.jitter;\n            initialDelayOrParams = initialDelayOrParams.initialDelay;\n        }\n\n        // set values\n        this._initialDelay = (typeof initialDelayOrParams !== 'number' ? 200 : initialDelayOrParams);\n        this._maximumDelay = (typeof maximumDelay !== 'number' ? 20000 : maximumDelay);\n        this._backoffExponent = (typeof backoffExponent !== 'number' ? 2.0 : backoffExponent);\n        this._maximumRetryTime = (typeof maximumRetryTime !== 'number' ? 0 : maximumRetryTime);\n        this._jitter = (typeof jitter !== 'number' ? 1.0 : jitter);\n\n        // Detect negative values and short circuit in this case\n        if (this._initialDelay < 0 ||\n            this._maximumDelay < 0 ||\n            this._backoffExponent < 0 ||\n            this._maximumRetryTime < 0 ||\n            this._jitter < 0) {\n            throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR);\n        }\n\n        // initialize state variables\n        this.reset();\n    }\n\n    /**\n     * This method sets the time (in milliseconds) to wait before reconnecting to a server for the first time after\n     * a failed connection.\n     *\n     * @param {number} initialDelay The time (in milliseconds) to wait before reconnecting to a server for the\n     * first time after a failed connection.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    initialDelay(initialDelay: number = 200): ExponentialDelayStrategy {\n        if (initialDelay < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._initialDelay = initialDelay;\n        this.currentDelay = this._initialDelay;\n\n        return this;\n    }\n\n    /**\n     * This method sets the maximum time to wait between any reconnection attempts.\n     * Exponential backoff will not exceed this maximum.\n     *\n     * @param {number} maximumDelay The maximum time to wait for any reconnect attempt (milliseconds).\n     * Exponential backoff will not exceed this maximum.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    maximumDelay(maximumDelay: number = 20000): ExponentialDelayStrategy {\n        if (maximumDelay < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._maximumDelay = maximumDelay;\n\n        return this;\n    }\n\n    /**\n     *  This method sets the exponent to use for calculating the next delay time. For example if the initial time is\n     *  200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.\n     *\n     * @param {number} backoffExponent The exponent to use for calculating the next delay time. For example, if\n     * the initial time is 200ms and the exponent is 2.0, the next delay will be 400ms, then 800ms, etc.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    backoffExponent(backoffExponent: number = 2.0): ExponentialDelayStrategy {\n        if (backoffExponent < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._backoffExponent = backoffExponent;\n\n        return this;\n    }\n\n    /**\n     * This method sets the time (in millseconds) to allow reconnect attempts to continue without a successful\n     * connection, before \"giving up\" and abandoning the connection attempt. 0 means never give up.\n     *\n     * @param {number} maximumRetryTime The maximum time (milliseconds) to allow econnect attempts to continue\n     * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client\n     * never gives up.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    maximumRetryTime(maximumRetryTime: number = 0): ExponentialDelayStrategy {\n        if (maximumRetryTime < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._maximumRetryTime = maximumRetryTime;\n\n        return this;\n    }\n\n    /**\n     * This method sets the jitter factor used to add randomness to the delay time. Jitter is represented as a multiple\n     * of the initial delay time;\n     * a random number from `[ 0, (JITTER * INITIAL_DELAY) )` is added to nonzero time delays.\n     *\n     * @param {number} jitter The amount of 'jitter' to apply when calculating a delay time, measured in\n     * multiples of the initial delay. Jitter is used to reduce the number of simultaneous reconnects that may be\n     * issued from multiple clients.\n     * @returns {ExponentialDelayStrategy} The Delay object.\n     */\n    jitter(jitter: number = 1.0): ExponentialDelayStrategy {\n        if (jitter < 0) { throw new Error(ExponentialDelayStrategy.NEGATIVE_VALUE_ERROR); }\n        this._jitter = jitter;\n\n        return this;\n    }\n\n    /**\n     * This method returns the time (in milliseconds) that the client should delay before connecting to the given\n     * server URI.\n     *\n     * @param {string} uri The URI of the server.\n     * @returns {number} The time (in milliseconds) that the client should delay.\n     */\n    getConnectWaitDuration(uri: string): number {\n        const currentTime = new Date().getTime();\n\n        // exceeded time check\n        if (this._maximumRetryTime > 0) {\n            // maximum retry time is exceeded\n            if (this.startTime >= 0 && this._maximumRetryTime <= (currentTime - this.startTime)) {\n                throw new Error('Maximum Retry Time Exceeded');\n            }\n        }\n\n        let finalValue: number;\n\n        // next server in the chain or the first launch - return 0\n        if (uri !== this.recentUri && uri !== this.firstUri) {\n            // first launch\n            if (!this.firstUri) {\n                this.firstUri = uri;\n                this.startTime = currentTime;\n            }\n\n            finalValue = 0;\n        }\n        // wrapped circle or the same server again - return a new non-zero value\n        else {\n            // calculate the delay\n            this.currentDelay = (this.currentDelay < 0) ?\n                this._initialDelay :\n                Math.min(this._maximumDelay, (this.currentDelay * this._backoffExponent));\n\n            // calculate the jittered value\n            finalValue = Math.round(this.currentDelay + Math.random() * this._jitter * this._initialDelay);\n\n            // adjust it if it's too big by mirroring the delta: ex: 15005 => 14995\n            if (finalValue > this._maximumDelay) {\n                finalValue = 2 * this._maximumDelay - finalValue;\n\n                // make sure the final value is not smaller than the minimum delay (in case of a huge jitter value)\n                if (finalValue < this._initialDelay) { finalValue = this._initialDelay; }\n            }\n        }\n\n        // next this will be the recent uri\n        this.recentUri = uri;\n\n        return finalValue;\n    }\n\n    /**\n     * This method resets the state of this reconnect delay. AMPS calls this method when a connection is established.\n     */\n    reset(): void {\n        this.startTime = -1;\n        this.firstUri = null;\n        this.recentUri = null;\n        this.currentUri = null;\n        this.currentDelay = -1;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/exponential-delay-strategy.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { DelayStrategy } from './delay-strategy.interface';\n\n\n/**\n * This is the interface with available parameters to set for a [[FixedDelayStrategy]] object.\n */\nexport interface FixedDelayStrategyParams {\n    delay?: number;\n    maximumRetryTime?: number;\n}\n\n\n/**\n * [[FixedDelayStrategy]] is a reconnect delay strategy implementation that waits a fixed amount of time before retrying\n * a connection.\n *\n * ```javascript\n * // create the fixed strategy with all default values\n * var strategy = new amps.FixedDelayStrategy();\n *\n * // set the maximum retry time to 15 seconds, leave the default delay value\n * var strategy = new amps.FixedDelayStrategy({maximumRetryTime: 15000});\n *\n * // set all params as arguments...\n * var strategy = new amps.FixedDelayStrategy(2000, 45000);\n *\n * // ... or using the object with values\n * var strategy = new amps.FixedDelayStrategy({\n *     delay: 2000,\n *     maximumRetryTime: 45000\n * });\n * ```\n */\nexport class FixedDelayStrategy implements DelayStrategy {\n    // Internal data\n    private delay: number;\n    private maximumRetryTime: number;\n    private startTime: number;\n    private firstUri: string;\n    private recentUri: string;\n\n    /**\n     * @param {number} delay The time (in milliseconds) to wait before reconnecting to a server after a failed\n     * connection. The default value is **200** ms.\n     * @param {number} maximumRetryTime The maximum time (milliseconds) to allow reconnect attempts to continue\n     * without a successful connection, before giving up and abandoning the connection attempt. If zero, the client\n     * never gives up. The default value is **0**.\n     */\n    constructor(delay?: number, maximumRetryTime?: number);\n\n    /**\n     * ---------\n     * @param {FixedDelayStrategyParams} params The object with delay parameters, such as delay and maximumRetryTime.\n     */\n    constructor(params: FixedDelayStrategyParams);\n\n    constructor(delayOrParams?: FixedDelayStrategyParams | number, maximumRetryTime: number = 0) {\n        // Treat the first argument as a the object with values\n        if (typeof delayOrParams !== 'number' && delayOrParams) {\n            maximumRetryTime = delayOrParams.maximumRetryTime;\n            delayOrParams = delayOrParams.delay;\n        }\n\n        // set values\n        this.delay = (typeof delayOrParams !== 'number' ? 200 : delayOrParams);\n        this.maximumRetryTime = (typeof maximumRetryTime !== 'number' ? 0 : maximumRetryTime);\n\n        // Detect negative values and short circuit in this case\n        if (this.delay < 0 || this.maximumRetryTime < 0) {\n            throw new Error('Invalid value(s): Cannot use negative argument values');\n        }\n\n        // initialize other internal variables\n        this.reset();\n    }\n\n    /**\n     * This method returns the time (in milliseconds) that the client should delay before connecting to the given\n     * server URI.\n     *\n     * @param {string} uri The URI of the server.\n     * @returns {number} The time (in milliseconds) that the client should delay.\n     */\n    getConnectWaitDuration(uri: string): number {\n        const currentTime = new Date().getTime();\n\n        // exceeded time check\n        if (this.maximumRetryTime > 0) {\n            // maximum retry time is exceeded\n            if (this.startTime >= 0 && this.maximumRetryTime <= (currentTime - this.startTime)) {\n                throw new Error('Maximum Retry Time Exceeded');\n            }\n        }\n\n        let finalValue: number;\n\n        // next server in the chain or the first launch - return 0\n        if (uri !== this.recentUri && uri !== this.firstUri) {\n            // first launch\n            if (!this.firstUri) {\n                this.firstUri = uri;\n                this.startTime = currentTime;\n            }\n\n            finalValue = 0;\n        }\n        else {\n            finalValue = this.delay;\n        }\n\n        // next this will be the recent uri\n        this.recentUri = uri;\n\n        return finalValue;\n    }\n\n    /**\n     * This method resets the state of this reconnect delay. AMPS calls this method when a connection is established.\n     */\n    reset(): void {\n        this.startTime = -1;\n        this.firstUri = null;\n        this.recentUri = null;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/fixed-delay-strategy.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport * as BigInteger from 'big-integer';\nimport { BookmarkStore } from './bookmark-store.interface';\nimport { Client } from './client';\nimport { Message } from './message';\n\n\n\n/**\n * This is the internal class that encapsulates a bookmark object (which consists of a publisher id and a sequence\n * number).\n *\n * @param {string} rawBookmark The string of a format: \"10357694053628526720|1490901822670001000|\".\n * @returns {Bookmark} the bookmark object.\n * @private\n */\nclass Bookmark {\n    pubId: string = null;\n    sequenceNumber: BigInteger = null;\n    raw: string;\n    discarded: boolean = false;\n\n    constructor(rawBookmark: string) {\n        this.raw = rawBookmark;\n\n        if (rawBookmark.length > 1) {\n            // regular bookmark\n            if (rawBookmark.charAt(rawBookmark.length - 1) === '|') {\n                const parts = rawBookmark.split('|');\n                this.pubId = parts[0];\n                this.sequenceNumber = BigInteger(parts[1]);\n            }\n            // ELSE: Timestamp bookmark\n        }\n        else {\n            this.sequenceNumber = BigInteger.zero;\n        }\n    }\n}\n\n\nclass Subscription {\n    // internal data\n    private publishers: {[key: string]: BigInteger} = {};\n    private _bookmarks: Bookmark[] = [];\n    private bookmarkMap: {[key: string]: number} = {};\n    private _noPersistedAcks: boolean;\n\n    private lastPersisted: Bookmark = new Bookmark('0');\n    private lastDiscarded: Bookmark = null;\n\n    constructor(noPersAcks: boolean = false) {\n        this._noPersistedAcks = noPersAcks;\n    }\n\n    bookmarks(): Bookmark[] {\n        return this._bookmarks;\n    }\n\n    persisted(rawBookmark: string): void {\n        const bookmark = new Bookmark(rawBookmark);\n\n        if (this.lastPersisted &&\n            !this._noPersistedAcks &&\n            bookmark.pubId === this.lastPersisted.pubId && \n            bookmark.sequenceNumber.lesserOrEquals(this.lastPersisted.sequenceNumber)) {\n            return;\n        }\n\n        this.lastPersisted = bookmark;\n    }\n\n    isDiscarded(message: Message): boolean {\n        const bmIndex = this.bookmarkMap[message.bm];\n\n        // if we have the index for this bookmark already\n        if (bmIndex !== undefined) {\n            const bookmark = this._bookmarks[bmIndex];\n\n            // found the bookmark and it's not discarded\n            if (bookmark && !bookmark.discarded) {\n                return false;\n            }\n\n            if (!bookmark) {\n                delete this.bookmarkMap[message.bm];\n            }\n\n            return true;\n        }\n\n        // parse the message bookmark in order to have pubId and SeqNo and check if we have it stored in publishers\n        const messageBookmark = new Bookmark(message.bm);\n        const publisherSeqNo = this.publishers[messageBookmark.pubId];\n\n        if (publisherSeqNo === undefined || publisherSeqNo.lesser(messageBookmark.sequenceNumber)) {\n            this.publishers[messageBookmark.pubId] = messageBookmark.sequenceNumber;\n            return false;\n        }\n\n        // last attempt - trying to find it in the list of bookmarks\n        for (let i = 0; i < this._bookmarks.length; i++) {\n            const currentBookmark = this._bookmarks[i];\n\n            // found it!\n            if (currentBookmark &&\n                currentBookmark.pubId === messageBookmark.pubId &&\n                currentBookmark.sequenceNumber.equals(messageBookmark.sequenceNumber)) {\n                return currentBookmark.discarded;\n            }\n        }\n\n        // tried everything at this point, so it's discarded for sure\n        return true;\n    }\n\n    mostRecent(): string {\n        this.updateBookmarkMap();\n\n        let useLastDiscarded = this.lastDiscarded !== null;\n        let useLastPersisted = this.lastPersisted !== null;\n\n        if (useLastDiscarded) {\n            if (this._bookmarks.length && useLastPersisted) {\n                useLastDiscarded = false;\n            }\n            else {\n                // Only use one if they are the same publisher\n                if (useLastPersisted && (this.lastPersisted.pubId === this.lastDiscarded.pubId)) {\n                    useLastPersisted = this.lastPersisted.sequenceNumber.lesser(this.lastDiscarded.sequenceNumber);\n                    useLastDiscarded = !useLastPersisted;\n                }\n            }\n        }\n\n        // build the most recent list\n        let recentList = '';\n\n        if (useLastDiscarded) {\n            recentList += this.lastDiscarded.raw;\n        }\n\n        // If we don't have a last persisted or a last discarded OR we are expecting persisted acks but haven't\n        // received one yet, then we should try to build a list of bookmarks based on publishers we have seen\n        // so far, if any, or return EPOCH value.\n        const publisherKeys = Object.keys(this.publishers);\n        if ((!useLastPersisted && !useLastDiscarded) ||\n            (this.lastPersisted && this.lastPersisted.raw === Client.Bookmarks.EPOCH)) {\n\n            if (publisherKeys.length === 0) {\n                // Set last persisted to EPOCH and return it\n                if (this.lastPersisted === null) {\n                    this.lastPersisted = new Bookmark(Client.Bookmarks.EPOCH);\n                }\n\n                return this.lastPersisted.raw;\n            }\n\n            if (recentList.length > 0) {\n                recentList = '';\n            }\n\n            // build and return the bookmark list from the publishers map\n            const publisherBookmarksList = publisherKeys.map((key: string) => {\n                return key + '|' + this.publishers[key].toString() + '|';\n            }).join(',');\n\n            if (recentList.length > 0) { recentList += ','; }\n            recentList += publisherBookmarksList;\n\n            return recentList;\n        }\n\n        if (useLastPersisted) {\n            if (recentList.length > 0) { recentList += ','; }\n            recentList += this.lastPersisted.raw;\n        }\n\n        return recentList;\n    }\n\n    log(rawBookmark: string): BigInteger {\n        let bmIndex = this.bookmarkMap[rawBookmark];\n        if (bmIndex !== undefined) {\n            return this._bookmarks[bmIndex].sequenceNumber;\n        }\n\n        // add the bookmark as a parsed object\n        const bookmark = new Bookmark(rawBookmark);\n        this._bookmarks.push(bookmark);\n\n        // obtain its index and store in the map\n        bmIndex = this._bookmarks.length - 1;\n        this.bookmarkMap[rawBookmark] = bmIndex;\n\n        return bookmark.sequenceNumber;\n    }\n\n    discard(rawBookmark: string): void {\n        const bmIndex = this.bookmarkMap[rawBookmark];\n        if (bmIndex === undefined) { return; }\n\n        let currentBookmark = this._bookmarks[bmIndex];\n        currentBookmark.discarded = true;\n\n        // if this message is the first in the list, find all discarded messages in the row, make the new \n        // lastDiscarded value and remove all previous entries in the list\n        // Ex: [D-1, D-2, D-3, D-4, D-5, N, N, N, D, N] => [N, N, N, D, N], lastDiscarded = 5\n        if (bmIndex === 0) {\n            let cutUpto = 0;\n            while (\n                currentBookmark.discarded && \n                (!this.lastPersisted && this._noPersistedAcks || \n                    currentBookmark.sequenceNumber.lesserOrEquals(this.lastPersisted.sequenceNumber)) &&\n                cutUpto < this._bookmarks.length) {\n                currentBookmark = this._bookmarks[cutUpto++];\n                this.lastDiscarded = currentBookmark;\n            }\n\n            this._bookmarks.splice(0, cutUpto);\n            this.updateBookmarkMap();\n        }\n    }\n\n    noPersistedAcks(): void {\n        this._noPersistedAcks = true;\n    }\n\n    // internal methods\n    private updateBookmarkMap() {\n        this.bookmarkMap = {};\n\n        for (let i = 0; i < this._bookmarks.length; i++) {\n            const bookmark =  this._bookmarks[i];\n            if (bookmark) { this.bookmarkMap[bookmark.raw] = i; }\n        }\n    }\n}\n\n\n/**\n * Bookmark store is used by the [[Client]] to provide resumable subscriptions and client-side duplicate message\n * handling using in-memory storage.\n *\n * ```javascript\n * // create the bookmark store\n * var bookmarkStore = new amps.MemoryBookmarkStore();\n *\n * // create the client instance and assign the bookmark store to it\n * var client = new amps.Client('my-client');\n * client.bookmarkStore(bookmarkStore);\n *\n * // ... access the bookmark store later\n * client.bookmarkStore().purge();\n * ```\n */\nexport class MemoryBookmarkStore implements BookmarkStore {\n    // Internal state\n    private subscriptionsInfo: { [key: string]: Subscription; } = {};\n\n    /**\n     * This method is called internally by the [[Client]] to log a bookmark to the persistent log.\n     *\n     * @param {Message} message The message to bookmark.\n     * @returns {BigInteger} The corresponding bookmark sequence number for this bookmark.\n     */\n    log(message: Message): BigInteger {\n        return this.findSubscription(message.sub_id ? message.sub_id : message.sids).log(message.bm);\n    }\n\n    /**\n     * This method is called when you want to mark the message object as discarded, indicating that the application has\n     * completed processing the message. Marking a message as discarded means that the message will not be replayed when\n     * the subcription resumes.\n     *\n     * @param {Message} message The message object.\n     */\n    discard(message: Message): void;\n\n    /**\n     * ------------\n     * This method is called when you want to mark the message specified by the subscription ID and the bookmark\n     * sequence number as discarded, indicating that the application has completed processing the message.\n     * Marking a message as discarded means that the message will not be replayed when the subcription resumes.\n     *\n     * @param {string} subId The subscription id.\n     * @param {string} bookmark The bookmark field value in a message.\n     */\n    discard(subId: string, bookmark: string): void;\n\n    discard(messageOrSubId: string | Message, bookmark?: string): void {\n        // single argument: message\n        if (typeof messageOrSubId !== 'string') {\n            if (messageOrSubId.s === undefined) {\n                bookmark = messageOrSubId.bm;\n\n                if (!bookmark) {\n                    throw new Error('Invalid bookmark value has been provided');\n                }\n            }\n\n            messageOrSubId = (messageOrSubId.sub_id ? messageOrSubId.sub_id : messageOrSubId.sids);\n        }\n\n        this.findSubscription(messageOrSubId).discard(bookmark);\n    }\n\n    /**\n     * This method is called when you want to return the most recent bookmark from the log that ought to be used for\n     * (re-)subscriptions.\n     *\n     * @param {string} subId The subscription id.\n     * @returns {string} The most recent bookmark.\n     */\n    mostRecent(subId: string): string {\n        return this.findSubscription(subId).mostRecent();\n    }\n\n    /**\n     * This method is called for each arriving message to determine if the application has already processed and\n     * discarded this message. Returns 'true' if the bookmark is in the log and marked as discarded and should therefore\n     * not be reprocessed. Otherwise, returns 'false'. Generally, isDiscarded is called by the\n     * [[Client]] however, if needed it can be called by the application as well.\n     *\n     * @param {Message} message The message to check.\n     * @returns {boolean} `true` if the bookmark is in the log and marked as discarded and should therefore\n     * not be reprocessed. Otherwise, returns `false`.\n     */\n    isDiscarded(message: Message): boolean {\n        return this.findSubscription((message.sub_id ? message.sub_id : message.sids)).isDiscarded(message);\n    }\n\n    /**\n     * This method is called when you want to purge the contents of this store. If the subId is not provided, removes\n     * any tracking history associated with publishers and received messages. Otherwise, removes history for that subId\n     * only.\n     *\n     * @param {string} subId The identifier of the subscription to purge.\n     */\n    purge(subId?: string): void {\n        if (subId !== undefined) { delete this.subscriptionsInfo[subId]; }\n        else { this.subscriptionsInfo = {}; }\n    }\n\n    /**\n     * This method is called when you want to retrieve the sequence number of the oldest bookmark in the store.\n     *\n     * @param {string} subId The identifier of the subscription.\n     * @returns {BigInteger} The sequence number of the oldest bookmark in the store. 0 if not found/doesn't exist\n     */\n    oldestBookmarkSeq(subId: string): BigInteger {\n        try {\n            return this.findSubscription(subId).bookmarks()[0].sequenceNumber;\n        }\n        catch (err) {}\n\n        return BigInteger(0);\n    }\n\n    /**\n     * This method is called internally by the [[Client]] to mark a message as safely persisted by AMPS to all of its\n     * sync replication destinations.\n     *\n     * @param {string} subId The identifier of the subscription.\n     * @param {string} bookmark A raw bookmark string.\n     */\n    persisted(subId: string, bookmark: string): void {\n        this.findSubscription(subId).persisted(bookmark);\n    }\n\n    /**\n     * This method notifies the bookmark store that the subscription won't receive persisted acks.\n     *\n     * @param {string} subId The subscription id.\n     */\n    noPersistedAcks(subId: string): void {\n        this.findSubscription(subId).noPersistedAcks();\n    }\n\n    // internal methods\n    private findSubscription(subId: string): Subscription {\n        let subscription = this.subscriptionsInfo[subId];\n\n        if (!subscription) {\n            // create new subscription record\n            subscription = new Subscription();\n            this.subscriptionsInfo[subId] = subscription;\n        }\n\n        return subscription;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/memory-bookmark-store.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport * as BigInteger from 'big-integer';\nimport { PublishStore } from './publish-store.interface';\nimport { Header } from './header';\nimport { Message } from './message';\n\n\n/**\n * [[MemoryPublishStore]] represents the default implementation of the in-memory publish store. The AMPS client uses \n * publish stores for recovery purposes. The store is responsible for maintaining the state of published messages and \n * recovering that state in the event of a disconnection.\n */\nexport class MemoryPublishStore implements PublishStore {\n    private messageQueue: {sequence: BigInteger, header: Header, data: any}[] = [];\n    private _lastPersisted: BigInteger = null;\n    private _lowestUnpersisted: BigInteger = null;\n\n    /**\n     * Store the provided message. The sequence of the message is a key that the client can later use to replay the\n     * operation or remove the operation from the store. Implementations may assume that the sequence increases\n     * monotonically.\n     *\n     * @param {Message} message The message that contains fields like command name, topic name, data, etc.\n     */\n    store(message: Message): void {\n        // Validation first\n        if (message.c !== 'publish' && message.c !== 'delta_publish' && message.c !== 'sow_delete') {\n            throw new Error('Invalid message type to store');\n        }\n\n        if (this.messageQueue.length > 0 && \n            this.messageQueue[this.messageQueue.length - 1].sequence.compare(message.s) >= 0) {\n            // Invalid: sequence is not increasing\n            throw new Error('Sequence id is not increasing');\n        }\n\n        // store the message\n        this.messageQueue.push({sequence: BigInteger(message.s), header: message, data: message.data});\n\n        // remove data field from message\n        delete message.data;\n    }\n\n    /**\n     * This method replays all messages in the store using the provided message sender.\n     *\n     * @param {function} messageSender The sender that will re-send the messages.\n     */\n    replay(messageSender: (header: Header, data?: any, timeout?: number) => void): void {\n        for (const messageItem of this.messageQueue) {\n            messageSender(messageItem.header, messageItem.data);\n        }\n    }\n\n    /**\n     * This method replays the message with the specified sequenceId.\n     *\n     * @param {function} messageSender The sender that will re-send the message.\n     * @param {BigInteger} sequenceId The sequence id of the message to replay.\n     */\n    replaySingle(messageSender: (header: Header, data?: any, timeout?: number) => void, sequenceId: BigInteger): void {\n        const index = this.findQueueIndex(sequenceId);\n        if (index < 0) { return; }\n        \n        const messageItem = this.messageQueue[index];\n        messageSender(messageItem.header, messageItem.data);\n    }\n\n    /**\n     * This method discards all operations up to the index provided.\n     *\n     * @param {BigInteger} sequenceId The sequence id to keep. All previous sequence numbers will be discarded.\n     */\n    discardUpTo(sequenceId: BigInteger): void {\n        // determine the index of the last message to release\n        const cutBefore = this.findQueueIndex(sequenceId);\n        if (this.messageQueue.length === 0 || cutBefore < 0) { return; }\n\n        // set last persisted\n        if (this._lastPersisted === null || this._lastPersisted.compare(sequenceId) < 0) {\n            this._lastPersisted = sequenceId;\n        }\n\n        // release messages with sequence id < sequenceId not including sequenceId\n        this.messageQueue.splice(0, cutBefore + 1);\n\n        // adjust flags\n        if (this.messageQueue.length > 0) {\n            this._lowestUnpersisted = this.messageQueue[0].sequence;\n        }\n        else {\n            this._lowestUnpersisted = null;\n        }\n    }\n\n    /**\n     * This method returns the number of messages in the store.\n     *\n     * @returns {number} The number of messages in the store.\n     */\n    unpersistedCount(): number {\n        return this.messageQueue.length;\n    }\n\n    /**\n     * This method returns the oldest sequence in the store.\n     *\n     * @returns {BigInteger} The oldest sequence number in the store.\n     */\n    lowestUnpersisted(): BigInteger {\n        return this._lowestUnpersisted;\n    }\n\n    /**\n     * This method returns the last persisted sequence id in the store.\n     *\n     * @returns {BigInteger} The sequence number of the last discarded message.\n     */\n    lastPersisted() {\n        return this._lastPersisted;\n    }\n\n\n    // internal methods\n    /**\n     * This method finds the index of the sequence number in the message queue using classic binary search.\n     * No need to take care of duplicates since we assume there is none. Since it's possible to have missing chains in\n     * this list, we're looking for the last sequence id that is <= sequenceId rather than looking for a strict match.\n     *\n     * @param {BigInteger} sequenceId The sequence number to find.\n     * @returns {number} The index found. If the sequence is not in the queue, returns -1. Not found in this case means\n     * it's either bigger or smaller than all sequence numbers in the list\n     * @private\n     * @hidden\n     */\n    private findQueueIndex(sequenceId: BigInteger): number {\n        let start = 0;\n        let end = this.messageQueue.length;\n        const last = end - 1;\n        let found = -1;\n\n        // short cicuit\n        if (end === 0 || this.messageQueue[0].sequence.compare(sequenceId) > 0) { return found; }\n\n        let mid;\n        while (start < end) {\n            mid = Math.floor((start + end) / 2);\n\n            if (this.messageQueue[mid].sequence.compare(sequenceId) > 0) {\n                end = mid;\n            }\n            else if (this.messageQueue[mid].sequence.compare(sequenceId) <= 0 && \n                     (mid === last || this.messageQueue[mid + 1].sequence.compare(sequenceId) > 0)) {\n                found = mid; \n                break;\n            }\n            else {\n                start = mid + 1;\n            }\n        }\n\n        return found;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/memory-publish-store.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport * as BigInteger from 'big-integer';\nimport { Header } from './header';\n\n\n/**\n * This is a class that encapsulates a message header. The message header is exposed via `message.header` field of\n * the [[Message]] class:\n *\n * ```javascript\n * function messageHander(message) {\n *     if (message.header.command() === 'sow') {\n *         console.log(message.header.groupSequenceNumber());\n *         console.log(message.data);\n *     }\n * }\n * ```\n * @notice Not all messages populate all headers. The *Command Reference* provides detailed description of the headers \n * returned on specific messages and what they contain.\n */\nexport class MessageHeader {\n    private _sequenceId: BigInteger;\n    constructor(private _header: Header) {}\n\n    /**\n     * Returns the command name, e.g. 'publish', 'sow_and_subscribe', which is one of the followng:\n     * - ack\n     * - publish\n     * - delta_publish\n     * - subscribe\n     * - delta_subscribe\n     * - oof\n     * - sow\n     * - sow_and_subscribe\n     * - sow_and_delta_subscribe\n     * - sow_delete\n     * - unsubscribe\n     *\n     * Returns the command name.\n     * @returns {string} The command name value.\n     */\n    command(): string { return this._header.c; }\n\n    /**\n     * Returns the command id.\n     * @returns {string} The command id value.\n     */\n    commandId(): string { return this._header.cid; }\n\n    /**\n     * Returns the query id.\n     * @returns {string} The query id.\n     */\n    queryId(): string { return this._header.query_id; }\n\n    /**\n     * Returns the subscription id.\n     * @returns {string} The subscription id.\n     */\n    subId(): string { return this._header.sub_id; }\n\n    /**\n     * Returns the acknowledgement type for the given command. Multiple ack types are comma-delimited.\n     * @returns {string} The acknowledgement message type.\n     */\n    ackType(): string { return this._header.a; }\n\n    /**\n     * Returns the number of records to return. Note: If TopN is not equally divisible by the batch size, then more\n     * records will be returned so that the total number of records is equally divisible by the batch size setting.\n     * @returns {number} The top N value.\n     */\n    topN(): number { return this._header.top_n; }\n\n    /**\n     * Returns the specified number of messages that are batched together when returning a query result.\n     * @returns {number} The batch size value.\n     */\n    batchSize(): number { return this._header.bs; }\n\n    /**\n     * Returns the topic value.\n     * @returns {string} The topic value.\n     */\n    topic(): string { return this._header.t; }\n\n    /**\n     * Returns a client-originated identifier used to mark a location in journaled messages.\n     * @returns {string} The bookmark value.\n     */\n    bookmark(): string { return this._header.bm; }\n\n    /**\n     * Returns a comma-delimited list of options on a specific command.\n     * @returns {string} The options value.\n     */\n    options(): string { return this._header.o ? this._header.o : this._header.opts; }\n\n    /**\n     * Returns the correlation id: opaque token set by an application and returned with the message. Must be\n     * `base64` encoded characters only.\n     * @returns {string} The correlationId value.\n     */\n    correlationId(): string { return this._header.x; }\n\n    /**\n     * Returns the SOW topic key(s) by which to order SOW query.\n     * @returns {string} The orderBy value.\n     */\n    orderBy(): string { return this._header.orderby; }\n\n    /**\n     * Returns the sow key value.\n     * A SOW key will accompany each message returned in an SOW batch. A SowKey may also be added to messages coming in\n     * on a subscription when the published message matches a record in the SOW.\n     *\n     * Format:\n     *\n     * - string containing the digits of an unsigned long for AMPS-generated SOW keys\n     *\n     * OR\n     *\n     * - arbitrary string in the base64 character set for user-provided SOW keys.\n     * @returns {string} The sow key value.\n     */\n    sowKey(): string { return this._header.k; }\n\n    /**\n     * Returns the sowKeys as a comma-delimited value.\n     * @returns {string} The sowKeys value.\n     */\n    sowKeys(): string { return this._header.sow_keys; }\n\n    /**\n     * Returns the Message expiration value (in seconds).\n     * @returns {number} The Message expiration value.\n     */\n    expiration(): number { return this._header.e; }\n\n    /**\n     * Returns the client name value.\n     * Used to identify a client. Useful for publishers that wish to identify the source of a publish, client status\n     * messages and for client heartbeats.\n     * @returns {string} The client name value.\n     */\n    clientName(): string { return this._header.client_name; }\n\n    /**\n     * Returns an integer that corresponds to the publish message sequence number. For more information see the\n     * *Replication* section in the *User Guide*.\n     * @returns {BigInteger} The sequenceId value.\n     */\n    sequenceId(): BigInteger {\n        if (this._header.s !== undefined) { return BigInteger(this._header.s); }\n        return undefined;\n    }\n\n    /**\n     * Returns a comma-separated list of SubIds sent from AMPS engine to identify which client subscriptions match a\n     * given `publish` message.\n     * @returns {string} The subIds (comma-delimited) value.\n     */\n    subIds(): string { return this._header.sids; }\n\n    /**\n     * Returns the content filter value.\n     * @returns {string} The content filter value.\n     */\n    filter(): string { return this._header.filter ? this._header.filter : this._header.f; }\n\n    /**\n     * Returns the message timestamp set by the server in a ISO-8601 date-time format.\n     * @returns {string} The timestamp value.\n     */\n    timestamp(): string { return this._header.ts; }\n\n\n    /**\n     * Returns the number of topic matches for the SOW query. Sent in `stats` acknowledgement message.\n     * @returns {string} The topicMatches value.\n     */\n    topicMatches(): number { return this._header.topic_matches; }\n\n    /**\n     * Returns the user id used to identify the user of a command.\n     * @returns {string} The userId value.\n     */\n    userId(): string { return this._header.user_id; }\n\n    /**\n     * Returns the failure message that appears when an acknowledgement returns a status of failure.\n     * @returns {string} The failure reason value.\n     */\n    reason(): string { return this._header.reason; }\n\n    /**\n     * Returns the number of records deleted from the SOW with a `sow_delete` command.\n     * Used in conjunction with the stats acknowledgement.\n     * @returns {string} The recordsDeleted value.\n     */\n    recordsDeleted(): number { return this._header.records_deleted; }\n\n    /**\n     * Returns the number of records inserted into the SOW. Used in conjunction with the stats acknowledgement.\n     * @returns {string} The recordsInserted value.\n     */\n    recordsInserted(): number { return this._header.records_inserted; }\n\n    /**\n     * Returns number of records in the store. The value is returned in the acknowledgement to an SOW query.\n     * @returns {string} The recodsReturned value.\n     */\n    recordsReturned(): number { return this._header.records_returned; }\n\n    /**\n     * Returns the number of records updated in the SOW. Used in conjunction with the stats acknowledgement.\n     * @returns {string} The recodsUpdated value.\n     */\n    recordsUpdated(): number { return this._header.records_updated; }\n\n    /**\n     * For messages from a queue, returns the time at which the lease expires.\n     */\n    leasePeriod(): string { return this._header.lp; }\n\n    /**\n     * Returns the transmission time value.\n     * @returns {string} The transmission time value.\n     */\n    transmissionTime(): string { return this._header.transmission_time; }\n\n    /**\n     * As a part of the acknowledgement to a SOW query, returns the number of matches.\n     */\n    matches(): number { return this._header.matches; }\n\n    /**\n     * Sent with XML formatted message data to indicate the number of bytes used by the message body.\n     */\n    messageLength(): number { return this._header.l; }\n\n    /**\n     * Returns the Group Sequence Number for each batch message of a SOW response.\n     */\n    groupSequenceNumber(): number { return this._header.gseq; }\n\n    /**\n     * Returns the client status when client is monitored for heartbeats.\n     * @returns {string} The client status value.\n     */\n    status(): string { return this._header.status; }\n}\n\n\n/**\n * This is the AMPS Message representation class. Any Message received from AMPS is a [[Message]] object.\n *\n * Message have two main fields: `header` and `data`. The `header` property is used to access message header fields,\n * such as command type, message length, sow key, etc. The `data` fields contains the message payload.\n *\n * ```javascript\n * function messageHandler(message) {\n *     // print out the command type\n *     console.log(message.header.command());\n *\n *     // get the subscription id of the message\n *     console.log(message.header.subId());\n *\n *     // print out message data\n *     console.log(message.data);\n *\n * }\n * ```\n *\n * @see [[MessageHeader]] for the list of available header methods.\n */\nexport class Message extends Header {\n    /**\n     * Message data. Contains message payload parsed according with its message type and the [[TypeHelper]] used for\n     * that type.\n     */\n    data: any;\n\n    /**\n     * Message header fields, such as `command()`, `subId()`, `filter()`, etc.\n     */\n    header: MessageHeader;\n\n    /**\n     * The constructor basically prepares the header field so that a user can have acess methods for header fields.\n     * @private\n     * @hidden\n     */\n    constructor() {\n        super();\n        this.header = new MessageHeader(this);\n    }\n\n    /**\n     * This is the method that initializes messages that are created from simple objects\n     * @hidden\n     */\n    static fromObject(messageObject: any): Message {\n        // A bit of black magic to convert a simple dict into an object of class Message\n        messageObject.header = new MessageHeader(messageObject);\n\n        return messageObject as Message;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/message.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\ndeclare function unescape(s: string): string;\ndeclare function escape(s: string): string;\n\n\n/**\n * This is the interface for custom type helpers. Any custom type helper should implement this interface in\n * order to be compatible with the TypeHelper engine.\n */\nexport interface ITypeHelper {\n    /**\n     * This method is used to serialize data in order send it to the server. All data chuncks should be converted into\n     * an array of strings.\n     *\n     * @param data The data to serialize.\n     * @returns Serialized data as an array of strings.\n     */\n    serialize(data: any): string[];\n\n    /**\n     * This method deserializes data from the Server into a format that will be consumed by the message handler.\n     * It can be any format as long as the consumer of the data is aware of it.\n     *\n     * @param data The data to deserialize.\n     * @returns Deserialized data.\n     */\n    deserialize(data: any): any;\n\n    /**\n     * For composite helper only.\n     * @hidden\n     */\n    helpers?: ITypeHelper[];\n}\n\n\n/**\n * This is a default implementation of the FIX/NVFIX type helper. Messages are converted into JavaScript objects.\n * Repeating groups will take on their last value and ordering of fields isn’t preserved. It is possible to set a\n * custom delimiter for messages, hy default it is `\\x01`.\n *\n * [[TypeHelper]] class already provides instances of this class for types `fix` and `nvfix`.\n */\nexport class FixTypeHelper implements ITypeHelper {\n    private _delimiter: string;\n\n    /**\n     * This is the constructor of the FixNvfixTypeHelper class.\n     * @param delimiter Optional delimiter value.\n     */\n    constructor(delimiter: string = '\\x01') {\n        this._delimiter = delimiter;\n    }\n\n    /**\n     * @hidden\n     */\n    serialize(data: any): string[] {\n        // already formatted fix/nvfix string\n        if (typeof data === 'string') { return [data]; }\n\n        // otherwise, we assume it's an object with keys and values\n        return [Object.keys(data)\n            .map((key: string) => key + '=' + data[key])\n            .join(this._delimiter) + this._delimiter];\n    }\n\n    /**\n     * @hidden\n     */\n    deserialize(data: any): any {\n        const parsedData: {[key: string]: string} = {};\n\n        decodeURIComponent(escape(TypeHelper.Uint8ToString(new Uint8Array(data))))\n            .split(this._delimiter)\n            .filter((keyValue: string) => keyValue.length > 0)\n            .map((keyValue: string) => {\n                const keyValueTuple = keyValue.split('=');\n                const key = keyValueTuple[0];\n\n                // no '=' inside of the value\n                if (keyValueTuple.length === 2) {\n                    parsedData[key] = keyValueTuple[1];\n                }\n                else {\n                    parsedData[key] = keyValue.slice(key.length + 1);\n                }\n            });\n\n        return parsedData;\n    }\n\n    /**\n     * This method sets the delimiter value for the helper.\n     *\n     * ```javascript\n     * // set a custom delimiter\n     * amps.TypeHelper.helper('nvfix').delimiter('%01');\n     * ```\n     *\n     * @param delimiter The new delimiter value.\n     * @returns The helper object.\n     */\n    delimiter(delimiter: string): FixTypeHelper;\n\n    /**\n     * ------\n     * This method returns the delimiter value of the helper.\n     *\n     * ```javascript\n     * // get the current delimiter value\n     * var delimiter = amps.TypeHelper.helper('fix').delimiter();\n     * ```\n     *\n     * @returns The delimiter value.\n     */\n    delimiter(): string;\n    delimiter(delimiter?: string): FixTypeHelper | string {\n        if (typeof delimiter !== 'undefined') {\n            this._delimiter = delimiter;\n            return this;\n        }\n\n        return this._delimiter;\n    }\n}\n\n\n// Internal: type wrapper for type helper objects\ninterface TypeHelperInstance {\n    [key: string]: ITypeHelper;\n}\n\n\n/**\n * This is a helper class that is used to register custom message types in order for the client to support them.\n * By default, the [[Client]] supports the following message types:\n * * __JSON__\n * * __FIX__  / __NVFIX__ - via [[FixTypeHelper]] class.\n * * __Binary__\n * \n * __Composite__ message types can be created using [[TypeHelper.compositeHelper]] method.\n * \n * See [[TypeHelper.helper]] for examples on how to implement support for new types or custom type helpers for existing\n * message types.\n */\nexport class TypeHelper {\n    // Internal data\n    private static instance: TypeHelperInstance;\n\n    private static getInstance(): TypeHelperInstance {\n        if (!TypeHelper.instance) {\n            TypeHelper.instance = TypeHelper.createInstance();\n        }\n\n        return TypeHelper.instance;\n    }\n\n    private static createInstance(): TypeHelperInstance {\n        const jsonTypeHelper: ITypeHelper = {\n            serialize: (data) => {\n                if (typeof data === 'string') { return [data]; }\n                return [JSON.stringify(data)];\n            },\n            deserialize: (data: string | Uint8Array): any  => {\n                if (typeof data === 'string') {\n                    return JSON.parse(data);\n                } else {\n                    // Binary buffer, need to decode utf8\n                    return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(data)));\n                }\n            }\n        };\n\n        const binaryTypeHelper: ITypeHelper = {\n            serialize: (data) => { return [data]; },\n            deserialize: (data) => { return data; }\n        };\n\n        return {\n            'json': jsonTypeHelper,\n            'binary': binaryTypeHelper,\n            'fix': new FixTypeHelper(),\n            'nvfix': new FixTypeHelper()\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    static littleEndianSizeBuffer(size: number): Uint32Array {\n        const result = new Uint32Array(1);\n\n        result[0] = size;\n\n        return result;\n    }\n\n    /**\n     * @hidden\n     */\n    static bigEndianSizeBuffer(size: number): Uint32Array {\n        const result = new Uint32Array(1);\n\n        result[0] = ((size & 0x000000FF) << 24)\n            | ((size & 0x0000FF00) << 8)\n            | ((size & 0x00FF0000) >>> 8)\n            | ((size & 0xFF000000) >>> 24);\n\n        return result;\n    }\n\n    /**\n     * @hidden\n     */\n    static Uint8ToString(uint8Array: Uint8Array): string {\n        const CHUNK_SZ = 0x8000;\n\n        const chars: string[] = [];\n        for (let i = 0; i < uint8Array.length; i += CHUNK_SZ) {\n            chars.push(String.fromCharCode.apply(null, uint8Array.subarray(i, i + CHUNK_SZ)));\n        }\n\n        return chars.join('');\n    }\n\n    private static convertToArrayBuffers(data: any): any {\n        const result: any = [];\n\n        for (const item of data) {\n            if (item.constructor === String) {\n                // Need to convert to an ArrayBuffer\n                const encoded = unescape(encodeURIComponent(item));\n                const arrayified = new Uint8Array(encoded.length);\n\n                for (let i = 0; i < encoded.length; ++i) {\n                    arrayified[i] = encoded.charCodeAt(i);\n                }\n\n                result.push(arrayified);\n            }\n            else {\n                result.push(item);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * This method provides a helper for parsing messages of different types. If a helper was provided by a user,\n     * registers it for future use.\n     *\n     * #### Create a custom helper for XML messages:\n     * ```javascript\n     * var xmlTypeHelper = {\n     *     serialize: function(data) {\n     *         return [new XMLSerializer().serializeToString(data)];\n     *     },\n     *     deserialize: function(data) {\n     *         if (data.constructor === String) {\n     *             return new DOMParser().parseFromString(data);\n     *         } \n     *         else {\n     *             // Binary buffer, need to decode utf8\n     *             return new DOMParser().parseFromString(\n     *                 decodeURIComponent(escape(Uint8ToString(data)))\n     *             );\n     *         }\n     *     }\n     * };\n     *\n     * // Register the above XML custom helper for parsing all XML messages automatically\n     * amps.TypeHelper.helper('xml', xmlTypeHelper);\n     * ```\n     *\n     * #### In case the custom parsing behavior is expected, it is possible to override the default type helper:\n     * ```javascript\n     * // create a JSON type helper that does not parse JSON data into native JS objects keeping it as a string\n     * var jsonHelper = {\n     *     serialize: function(data) {\n     *         return [data];\n     *     },\n     *     deserialize: function(data) {\n     *         return JSON.stringify(data);\n     *     }\n     * };\n     *\n     * // override the default type helper\n     * amps.TypeHelper.helper('json', jsonHelper);\n     * ```\n     *\n     * #### Register the json-json-json-binary composite message type with the type helper:\n     * ```javascript\n     * amps.TypeHelper.helper(\n     *     'compositejjjbl',\n     *     amps.TypeHelper.compositeHelper('json', 'json', 'json', 'binary')\n     * );\n     * ```\n     *\n     * #### Set the custom delimiter for NVFIX format:\n     * ```javascript\n     * amps.TypeHelper.helper('nvfix').delimiter('%01');\n     * ```\n     *\n     * #### Register the custom helper for NVFIX format:\n     * ```javascript\n     * var nvfixTypeHelper = {\n     *     serialize: function(data) {\n     *         // already formatted fix/nvfix string\n     *         if (typeof data === 'string') {\n     *             return [data];\n     *         }\n     *\n     *         // otherwise, we assume it's an object with keys and values\n     *         return [\n     *             Object.keys(data).map(function(key) {\n     *                 return key + '=' + data[key];\n     *             }).join('\\x01') + '\\x01'\n     *         ];\n     *     },\n     *     deserialize: function(data) {\n     *         var parsedData = {};\n     *         String.fromCharCode.apply(null, new Int8Array(data))\n     *             .split('\\x01')\n     *             .slice(0, -1)\n     *             .map(function(keyValue) {\n     *                  var keyValueTuple = keyValue.split('=');\n     *                  var key = keyValueTuple[0];\n     *\n     *                  // no '=' inside of the value\n     *                  if (keyValueTuple.length === 2) {\n     *                      parsedData[key] = keyValueTuple[1];\n     *                  }\n     *                  else {\n     *                      parsedData[key] = keyValue.slice(key.length + 1);\n     *                  }\n     *             });\n     *\n     *         return parsedData;\n     *     }\n     * };\n     *\n     * // Register the above NVFIX custom helper for parsing all NVFIX messages automatically\n     * amps.TypeHelper.helper('nvfix', nvfixTypeHelper);\n     * ```\n     *\n     * @param {string} messageType The type of message to handle.\n     * @param {ITypeHelper} newHelper A helper object with predefined functions that can be provided for custom\n     * parsing/handling of a message type.\n     * @returns {ITypeHelper} The helper object assigned/registered.\n     */\n    public static helper(messageType: string, newHelper?: ITypeHelper): ITypeHelper {\n        const instance = TypeHelper.getInstance();\n\n        if (newHelper !== undefined) {\n            instance[messageType] = newHelper;\n            return newHelper;\n        }\n\n        if (instance[messageType] !== undefined) {\n            return instance[messageType];\n        }\n\n        return instance.binary;\n    }\n\n    /**\n     * This method is used to create composite message types from other types, such as JSON, XML, etc.\n     *\n     * ```javascript\n     * // Register the json-xml-json-binary composite message type with the type helper\n     * amps.TypeHelper.helper(\n     *     'compositejxjb',\n     *     amps.TypeHelper.compositeHelper('json', 'xml', 'json', 'binary')\n     * );\n     * ```\n     *\n     * @param {...string} messageType Previously registered types of messages.\n     * @returns {ITypeHelper} A created [[ITypeHelper]]-compatible object.\n     */\n    public static compositeHelper(...messageTypes: string[]): ITypeHelper {\n        // Generate all the type base helpers that are included in this composite helper\n        const helpers = messageTypes.map(item => TypeHelper.helper(item));\n\n        return {\n            // The list of types this composite helps with\n            helpers: helpers,\n            serialize: (data) => {\n                if (data.length > helpers.length) {\n                    throw 'too many elements to serialize';\n                }\n\n                let result: any = [];\n                for (let i = 0; i < data.length; ++i) {\n                    const part = TypeHelper.convertToArrayBuffers(helpers[i].serialize(data[i]));\n                    result = result.concat(TypeHelper.bigEndianSizeBuffer(part[0].length), part);\n                }\n\n                return result;\n            },\n            deserialize: (data) => {\n                const result = [];\n                let position = 0;\n                let index = 0;\n\n                while (data.byteLength - position > 0) {\n                    const sizeBuffer = new Uint8Array(data, position, 4);\n                    position += 4;\n\n                    const bytes = (sizeBuffer[0] << 24) |\n                        (sizeBuffer[1] << 16) |\n                        (sizeBuffer[2] << 8) |\n                        (sizeBuffer[3]);\n\n                    result.push(helpers[index].deserialize(new Uint8Array(data, position, bytes)));\n\n                    position += bytes;\n                    ++index;\n                }\n\n                return result;\n            }\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/type-helper.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\n'use strict';\n\nimport * as BigInteger from 'big-integer';\nimport { Client } from './client';\nimport { Header } from './header';\nimport { Command } from './command';\nimport { Message } from './message';\nimport { ServerChooser } from './server-chooser.interface';\nimport { DefaultServerChooser, ChooserItem } from './default-server-chooser';\nimport { SubscriptionManager } from './subscription-manager.interface';\nimport { DefaultSubscriptionManager } from './default-subscription-manager';\nimport { DelayStrategy } from './delay-strategy.interface';\nimport { ExponentialDelayStrategy, ExponentialDelayStrategyParams } from './exponential-delay-strategy';\nimport { FixedDelayStrategy, FixedDelayStrategyParams } from './fixed-delay-strategy';\nimport { BookmarkStore } from './bookmark-store.interface';\nimport { MemoryBookmarkStore } from './memory-bookmark-store';\nimport { PublishStore } from '././publish-store.interface';\nimport { MemoryPublishStore } from './memory-publish-store';\nimport { ITypeHelper, TypeHelper } from './type-helper';\nimport { Authenticator } from './authenticator.interface';\n\n\nexport {\n    // Main classes\n    Client,\n    Command,\n    Header,\n    Message,\n    TypeHelper,\n    ITypeHelper,\n    Authenticator,\n\n    // HAClient classes\n    BigInteger,\n    ServerChooser,\n    DefaultServerChooser,\n    SubscriptionManager,\n    DefaultSubscriptionManager,\n    DelayStrategy,\n    ExponentialDelayStrategy,\n    ExponentialDelayStrategyParams,\n    FixedDelayStrategy,\n    FixedDelayStrategyParams,\n    BookmarkStore,\n    MemoryBookmarkStore,\n    PublishStore,\n    MemoryPublishStore\n};\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/amps.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nimport { Authenticator } from './authenticator.interface';\n\n\n/**\n * @hidden\n */\nexport class DefaultAuthenticator implements Authenticator {\n    authenticate(login: string, password: string): Promise<string> {\n        return new Promise(resolve => resolve(password));\n    }\n\n    retry(login: string, password: string): Promise<string> {\n        return new Promise(resolve => resolve(password));\n    }\n\n    completed(login: string, password: string, reason: string) {}\n}\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/default-authenticator.ts","///////////////////////////////////////////////////////////////////////////\n//\n// Copyright (c) 2016-2019 60East Technologies Inc., All Rights Reserved.\n//\n// This computer software is owned by 60East Technologies Inc. and is\n// protected by U.S. copyright laws and other laws and by international\n// treaties.  This computer software is furnished by 60East Technologies\n// Inc. pursuant to a written license agreement and may be used, copied,\n// transmitted, and stored only in accordance with the terms of such\n// license agreement and with the inclusion of the above copyright notice.\n// This computer software or any other copies thereof may not be provided\n// or otherwise made available to any other person.\n//\n// U.S. Government Restricted Rights.  This computer software: (a) was\n// developed at private expense and is in all respects the proprietary\n// information of 60East Technologies Inc.; (b) was not developed with\n// government funds; (c) is a trade secret of 60East Technologies Inc.\n// for all purposes of the Freedom of Information Act; and (d) is a\n// commercial item and thus, pursuant to Section 12.212 of the Federal\n// Acquisition Regulations (FAR) and DFAR Supplement Section 227.7202,\n// Government's use, duplication or disclosure of the computer software\n// is subject to the restrictions set forth by 60East Technologies Inc..\n//\n////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * @hidden\n */\nexport interface URIParserOtions {\n    source?: string;\n    protocol?: string;\n    authority?: string;\n    userInfo?: string;\n    user?: string;\n    password?: string;\n    host?: string;\n    port?: string;\n    relative?: string;\n    path?: string;\n    directory?: string;\n    file?: string;\n    query?: string;\n    queryKey?: {[key: string]: string};\n    anchor?: string;\n}\n\ninterface URIParser {\n    (uri: string): any;\n    options: any;\n}\n\n/* tslint:disable */\nvar parseUri = <URIParser>function(str) {\n    let o: any = this.parseUri.options,\n        m: any = o.parser[o.strictMode ? 'strict' : 'loose'].exec(str),\n        uri: any = {},\n        i: number = 14;\n\n    while (i--) {\n        uri[o.key[i]] = m[i] || '';\n    }\n\n    uri[o.q.name] = {};\n    uri[o.key[12]].replace(o.q.parser, ($0: any, $1: any, $2: any) => {\n        if ($1) {\n            uri[o.q.name][$1] = $2;\n        }\n    });\n\n    return uri;\n};\n/* tslint:enable */\n\n// parseUri 1.2.2 (c) Steven Levithan <stevenlevithan.com> MIT License\nparseUri.options = {\n    strictMode: false,\n    key: [\n        'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative',\n        'path', 'directory', 'file', 'query', 'anchor'\n    ],\n    q: {name: 'queryKey', parser: /(?:^|&)([^&=]*)=?([^&]*)/g},\n    parser: {\n        /* tslint:disable */\n        strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n        loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/\n        /* tslint:enable */\n    }\n};\n\n\n/**\n * @hidden\n */\nexport class Helpers {\n    static parseUri: (uri: string) => URIParserOtions = parseUri;\n}\n\n\n// Detecting the environment\n/* tslint:disable */\ndeclare var window: {\n    fin?: any;\n    process?: any;\n}\n/* tslint:enable */\n\nlet isBrowser = false;\n\n// Openfin check\nconst isFin = (typeof window !== 'undefined') && window.fin && window.fin.desktop; // jshint ignore:line\n\n// Node js check\nlet isNode = false;\ntry { isNode = Object.prototype.toString.call(global.process) === '[object process]'; } catch (e) {}\n\n// Electron check\n/* tslint:disable */\nlet isElectron = (typeof window !== 'undefined') && window.process && window.process.versions && window.process.versions.electron; // jshint ignore:line\n/* tslint:enable */\n\n// Worker environment\n/* tslint:disable */\nlet isWebWorker = !isNode && (typeof window === 'undefined') && (typeof module !== 'undefined') && (typeof module.exports !== 'undefined'); // jshint ignore:line\n/* tslint:enable */\n\n// else Browser environment\nisBrowser = !isFin && !isNode && !isElectron;\n\n\n/**\n * Browser environment detected.\n */\nexport const IS_BROWSER = isBrowser;\n\n/**\n * Node.js (and derivatives) environment detected.\n */\nexport const IS_NODE = isNode;\n\n/**\n * OpenFin environment detected.\n */\nexport const IS_OPENFIN = isFin;\n\n/**\n * Electron environment detected.\n */\nexport const IS_ELECTRON = isElectron;\n\n/**\n * WebWorker context detected.\n */\nexport const IS_WEBWORKER = isWebWorker;\n\n\n\n\n// WEBPACK FOOTER //\n// ../~/tslint-loader??ref--0!../src/helpers.ts","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/buildin/module.js\n// module id = 15\n// module chunks = 0 1"],"sourceRoot":""}